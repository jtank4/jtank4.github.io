(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

const asn1 = exports;

asn1.bignum = require('bn.js');

asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"./asn1/api":2,"./asn1/base":4,"./asn1/constants":8,"./asn1/decoders":10,"./asn1/encoders":13,"bn.js":15}],2:[function(require,module,exports){
'use strict';

const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');

const api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;

  this.decoders = {};
  this.encoders = {};
}

Entity.prototype._createNamed = function createNamed(Base) {
  const name = this.name;

  function Generated(entity) {
    this._initNamed(entity, name);
  }
  inherits(Generated, Base);
  Generated.prototype._initNamed = function _initNamed(entity, name) {
    Base.call(this, entity, name);
  };

  return new Generated(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der';
  // Lazily create decoder
  if (!this.decoders.hasOwnProperty(enc))
    this.decoders[enc] = this._createNamed(decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der';
  // Lazily create encoder
  if (!this.encoders.hasOwnProperty(enc))
    this.encoders[enc] = this._createNamed(encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

},{"./decoders":10,"./encoders":13,"inherits":132}],3:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);
  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
  if (data instanceof DecoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    Buffer.isBuffer(data.base) &&
    data.constructor.name === 'DecoderBuffer' &&
    typeof data.offset === 'number' &&
    typeof data.length === 'number' &&
    typeof data.save === 'function' &&
    typeof data.restore === 'function' &&
    typeof data.isEmpty === 'function' &&
    typeof data.readUInt8 === 'function' &&
    typeof data.skip === 'function' &&
    typeof data.raw === 'function';

  return isCompatible;
};

DecoderBuffer.prototype.save = function save() {
  return { offset: this.offset, reporter: Reporter.prototype.save.call(this) };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  const res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;

  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);

  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length)
    return this.base.readUInt8(this.offset++, true);
  else
    return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length))
    return this.error(fail || 'DecoderBuffer overrun');

  const res = new DecoderBuffer(this.base);

  // Share reporter state
  res._reporterState = this._reporterState;

  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function(item) {
      if (!EncoderBuffer.isEncoderBuffer(item))
        item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff))
      return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + typeof value);
  }
}
exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
  if (data instanceof EncoderBuffer) {
    return true;
  }

  // Or accept compatible API
  const isCompatible = typeof data === 'object' &&
    data.constructor.name === 'EncoderBuffer' &&
    typeof data.length === 'number' &&
    typeof data.join === 'function';

  return isCompatible;
};

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out)
    out = Buffer.alloc(this.length);
  if (!offset)
    offset = 0;

  if (this.length === 0)
    return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function(item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number')
      out[offset] = this.value;
    else if (typeof this.value === 'string')
      out.write(this.value, offset);
    else if (Buffer.isBuffer(this.value))
      this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

},{"../base/reporter":6,"inherits":132,"safer-buffer":162}],4:[function(require,module,exports){
'use strict';

const base = exports;

base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./buffer":3,"./node":5,"./reporter":6}],5:[function(require,module,exports){
'use strict';

const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');

// Supported tags
const tags = [
  'seq', 'seqof', 'set', 'setof', 'objid', 'bool',
  'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc',
  'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str',
  'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr'
];

// Public methods list
const methods = [
  'key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice',
  'any', 'contains'
].concat(tags);

// Overrided methods list
const overrided = [
  '_peekTag', '_decodeTag', '_use',
  '_decodeStr', '_decodeObjid', '_decodeTime',
  '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList',

  '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime',
  '_encodeNull', '_encodeInt', '_encodeBool'
];

function Node(enc, parent, name) {
  const state = {};
  this._baseState = state;

  state.name = name;
  state.enc = enc;

  state.parent = parent || null;
  state.children = null;

  // State
  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null;

  // Should create new instance on each method
  if (!state.parent) {
    state.children = [];
    this._wrap();
  }
}
module.exports = Node;

const stateProps = [
  'enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice',
  'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit',
  'implicit', 'contains'
];

Node.prototype.clone = function clone() {
  const state = this._baseState;
  const cstate = {};
  stateProps.forEach(function(prop) {
    cstate[prop] = state[prop];
  });
  const res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  const state = this._baseState;
  methods.forEach(function(method) {
    this[method] = function _wrappedMethod() {
      const clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  const state = this._baseState;

  assert(state.parent === null);
  body.call(this);

  // Filter children
  state.children = state.children.filter(function(child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  const state = this._baseState;

  // Filter children and args
  const children = args.filter(function(arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function(arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children;

    // Replace parent to maintain backward link
    children.forEach(function(child) {
      child._baseState.parent = this;
    }, this);
  }
  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function(arg) {
      if (typeof arg !== 'object' || arg.constructor !== Object)
        return arg;

      const res = {};
      Object.keys(arg).forEach(function(key) {
        if (key == (key | 0))
          key |= 0;
        const value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
};

//
// Overrided methods
//

overrided.forEach(function(method) {
  Node.prototype[method] = function _overrided() {
    const state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
});

//
// Public methods
//

tags.forEach(function(tag) {
  Node.prototype[tag] = function _tagMethod() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);

    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  const state = this._baseState;

  assert(state.use === null);
  state.use = item;

  return this;
};

Node.prototype.optional = function optional() {
  const state = this._baseState;

  state.optional = true;

  return this;
};

Node.prototype.def = function def(val) {
  const state = this._baseState;

  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;

  return this;
};

Node.prototype.explicit = function explicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;

  return this;
};

Node.prototype.implicit = function implicit(num) {
  const state = this._baseState;

  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;

  return this;
};

Node.prototype.obj = function obj() {
  const state = this._baseState;
  const args = Array.prototype.slice.call(arguments);

  state.obj = true;

  if (args.length !== 0)
    this._useArgs(args);

  return this;
};

Node.prototype.key = function key(newKey) {
  const state = this._baseState;

  assert(state.key === null);
  state.key = newKey;

  return this;
};

Node.prototype.any = function any() {
  const state = this._baseState;

  state.any = true;

  return this;
};

Node.prototype.choice = function choice(obj) {
  const state = this._baseState;

  assert(state.choice === null);
  state.choice = obj;
  this._useArgs(Object.keys(obj).map(function(key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  const state = this._baseState;

  assert(state.use === null);
  state.contains = item;

  return this;
};

//
// Decoding
//

Node.prototype._decode = function decode(input, options) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return input.wrapResult(state.children[0]._decode(input, options));

  let result = state['default'];
  let present = true;

  let prevKey = null;
  if (state.key !== null)
    prevKey = input.enterKey(state.key);

  // Check if tag is there
  if (state.optional) {
    let tag = null;
    if (state.explicit !== null)
      tag = state.explicit;
    else if (state.implicit !== null)
      tag = state.implicit;
    else if (state.tag !== null)
      tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      const save = input.save();
      try {
        if (state.choice === null)
          this._decodeGeneric(state.tag, input, options);
        else
          this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }
      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);

      if (input.isError(present))
        return present;
    }
  }

  // Push object on stack
  let prevObj;
  if (state.obj && present)
    prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      const explicit = this._decodeTag(input, state.explicit);
      if (input.isError(explicit))
        return explicit;
      input = explicit;
    }

    const start = input.offset;

    // Unwrap implicit and normal values
    if (state.use === null && state.choice === null) {
      let save;
      if (state.any)
        save = input.save();
      const body = this._decodeTag(
        input,
        state.implicit !== null ? state.implicit : state.tag,
        state.any
      );
      if (input.isError(body))
        return body;

      if (state.any)
        result = input.raw(save);
      else
        input = body;
    }

    if (options && options.track && state.tag !== null)
      options.track(input.path(), start, input.length, 'tagged');

    if (options && options.track && state.tag !== null)
      options.track(input.path(), input.offset, input.length, 'content');

    // Select proper method for tag
    if (state.any) {
      // no-op
    } else if (state.choice === null) {
      result = this._decodeGeneric(state.tag, input, options);
    } else {
      result = this._decodeChoice(input, options);
    }

    if (input.isError(result))
      return result;

    // Decode children
    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    }

    // Decode contained/encoded by schema, only in bit or octet strings
    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      const data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)
        ._decode(data, options);
    }
  }

  // Pop object
  if (state.obj && present)
    result = input.leaveObject(prevObj);

  // Set key
  if (state.key !== null && (result !== null || present === true))
    input.leaveKey(prevKey, state.key, result);
  else if (prevKey !== null)
    input.exitKey(prevKey);

  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  const state = this._baseState;

  if (tag === 'seq' || tag === 'set')
    return null;
  if (tag === 'seqof' || tag === 'setof')
    return this._decodeList(input, tag, state.args[0], options);
  else if (/str$/.test(tag))
    return this._decodeStr(input, tag, options);
  else if (tag === 'objid' && state.args)
    return this._decodeObjid(input, state.args[0], state.args[1], options);
  else if (tag === 'objid')
    return this._decodeObjid(input, null, null, options);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._decodeTime(input, tag, options);
  else if (tag === 'null_')
    return this._decodeNull(input, options);
  else if (tag === 'bool')
    return this._decodeBool(input, options);
  else if (tag === 'objDesc')
    return this._decodeStr(input, tag, options);
  else if (tag === 'int' || tag === 'enum')
    return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)
      ._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {

  const state = this._baseState;
  // Create altered use decoder if implicit is set
  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];
  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }
  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  const state = this._baseState;
  let result = null;
  let match = false;

  Object.keys(state.choice).some(function(key) {
    const save = input.save();
    const node = state.choice[key];
    try {
      const value = node._decode(input, options);
      if (input.isError(value))
        return false;

      result = { type: key, value: value };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }
    return true;
  }, this);

  if (!match)
    return input.error('Choice not matched');

  return result;
};

//
// Encoding
//

Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  const state = this._baseState;
  if (state['default'] !== null && state['default'] === data)
    return;

  const result = this._encodeValue(data, reporter, parent);
  if (result === undefined)
    return;

  if (this._skipDefault(result, reporter, parent))
    return;

  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  const state = this._baseState;

  // Decode root node
  if (state.parent === null)
    return state.children[0]._encode(data, reporter || new Reporter());

  let result = null;

  // Set reporter to share it with a child class
  this.reporter = reporter;

  // Check if data is there
  if (state.optional && data === undefined) {
    if (state['default'] !== null)
      data = state['default'];
    else
      return;
  }

  // Encode children first
  let content = null;
  let primitive = false;
  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function(child) {
      if (child._baseState.tag === 'null_')
        return child._encode(null, reporter, data);

      if (child._baseState.key === null)
        return reporter.error('Child should have a key');
      const prevKey = reporter.enterKey(child._baseState.key);

      if (typeof data !== 'object')
        return reporter.error('Child expected, but input is not object');

      const res = child._encode(data[child._baseState.key], reporter, data);
      reporter.leaveKey(prevKey);

      return res;
    }, this).filter(function(child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1))
        return reporter.error('Too many args for : ' + state.tag);

      if (!Array.isArray(data))
        return reporter.error('seqof/setof, but data is not Array');

      const child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function(item) {
        const state = this._baseState;

        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  }

  // Encode data itself
  if (!state.any && state.choice === null) {
    const tag = state.implicit !== null ? state.implicit : state.tag;
    const cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null)
        reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null)
        result = this._encodeComposite(tag, primitive, cls, content);
    }
  }

  // Wrap in explicit
  if (state.explicit !== null)
    result = this._encodeComposite(state.explicit, false, 'context', result);

  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  const state = this._baseState;

  const node = state.choice[data.type];
  if (!node) {
    assert(
      false,
      data.type + ' not found in ' +
            JSON.stringify(Object.keys(state.choice)));
  }
  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  const state = this._baseState;

  if (/str$/.test(tag))
    return this._encodeStr(data, tag);
  else if (tag === 'objid' && state.args)
    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
  else if (tag === 'objid')
    return this._encodeObjid(data, null, null);
  else if (tag === 'gentime' || tag === 'utctime')
    return this._encodeTime(data, tag);
  else if (tag === 'null_')
    return this._encodeNull();
  else if (tag === 'int' || tag === 'enum')
    return this._encodeInt(data, state.args && state.reverseArgs[0]);
  else if (tag === 'bool')
    return this._encodeBool(data);
  else if (tag === 'objDesc')
    return this._encodeStr(data, tag);
  else
    throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/buffer":3,"../base/reporter":6,"minimalistic-assert":136}],6:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}
exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  const state = this._reporterState;

  return { obj: state.obj, pathLen: state.path.length };
};

Reporter.prototype.restore = function restore(data) {
  const state = this._reporterState;

  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  const state = this._reporterState;

  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  const state = this._reporterState;

  this.exitKey(index);
  if (state.obj !== null)
    state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  const state = this._reporterState;

  const prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  const state = this._reporterState;

  const now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  let err;
  const state = this._reporterState;

  const inherited = msg instanceof ReporterError;
  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function(elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial)
    throw err;

  if (!inherited)
    state.errors.push(err);

  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  const state = this._reporterState;
  if (!state.options.partial)
    return result;

  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }
  return this;
};

},{"inherits":132}],7:[function(require,module,exports){
'use strict';

// Helper
function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
}

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);

exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],8:[function(require,module,exports){
'use strict';

const constants = exports;

// Helper
constants._reverse = function reverse(map) {
  const res = {};

  Object.keys(map).forEach(function(key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key)
      key = key | 0;

    const value = map[key];
    res[value] = key;
  });

  return res;
};

constants.der = require('./der');

},{"./der":7}],9:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!DecoderBuffer.isDecoderBuffer(data)) {
    data = new DecoderBuffer(data, options);
  }

  return this.tree._decode(data, options);
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty())
    return false;

  const state = buffer.save();
  const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  buffer.restore(state);

  return decodedTag.tag === tag || decodedTag.tagStr === tag ||
    (decodedTag.tagStr + 'of') === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  const decodedTag = derDecodeTag(buffer,
    'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag))
    return decodedTag;

  let len = derDecodeLen(buffer,
    decodedTag.primitive,
    'Failed to get length of "' + tag + '"');

  // Failure
  if (buffer.isError(len))
    return len;

  if (!any &&
      decodedTag.tag !== tag &&
      decodedTag.tagStr !== tag &&
      decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null)
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');

  // Indefinite length... find END tag
  const state = buffer.save();
  const res = this._skipUntilEnd(
    buffer,
    'Failed to skip indefinite length body: "' + this.tag + '"');
  if (buffer.isError(res))
    return res;

  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  for (;;) {
    const tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag))
      return tag;
    const len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len))
      return len;

    let res;
    if (tag.primitive || len !== null)
      res = buffer.skip(len);
    else
      res = this._skipUntilEnd(buffer, fail);

    // Failure
    if (buffer.isError(res))
      return res;

    if (tag.tagStr === 'end')
      break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder,
  options) {
  const result = [];
  while (!buffer.isEmpty()) {
    const possibleEnd = this._peekTag(buffer, 'end');
    if (buffer.isError(possibleEnd))
      return possibleEnd;

    const res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd)
      break;
    result.push(res);
  }
  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    const unused = buffer.readUInt8();
    if (buffer.isError(unused))
      return unused;
    return { unused: unused, data: buffer.raw() };
  } else if (tag === 'bmpstr') {
    const raw = buffer.raw();
    if (raw.length % 2 === 1)
      return buffer.error('Decoding of string type: bmpstr length mismatch');

    let str = '';
    for (let i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }
    return str;
  } else if (tag === 'numstr') {
    const numstr = buffer.raw().toString('ascii');
    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' +
                          'numstr unsupported characters');
    }
    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    const printstr = buffer.raw().toString('ascii');
    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' +
                          'printstr unsupported characters');
    }
    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  let result;
  const identifiers = [];
  let ident = 0;
  let subident = 0;
  while (!buffer.isEmpty()) {
    subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;
    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }
  if (subident & 0x80)
    identifiers.push(ident);

  const first = (identifiers[0] / 40) | 0;
  const second = identifiers[0] % 40;

  if (relative)
    result = identifiers;
  else
    result = [first, second].concat(identifiers.slice(1));

  if (values) {
    let tmp = values[result.join(' ')];
    if (tmp === undefined)
      tmp = values[result.join('.')];
    if (tmp !== undefined)
      result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  const str = buffer.raw().toString();

  let year;
  let mon;
  let day;
  let hour;
  let min;
  let sec;
  if (tag === 'gentime') {
    year = str.slice(0, 4) | 0;
    mon = str.slice(4, 6) | 0;
    day = str.slice(6, 8) | 0;
    hour = str.slice(8, 10) | 0;
    min = str.slice(10, 12) | 0;
    sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    year = str.slice(0, 2) | 0;
    mon = str.slice(2, 4) | 0;
    day = str.slice(4, 6) | 0;
    hour = str.slice(6, 8) | 0;
    min = str.slice(8, 10) | 0;
    sec = str.slice(10, 12) | 0;
    if (year < 70)
      year = 2000 + year;
    else
      year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull() {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  const res = buffer.readUInt8();
  if (buffer.isError(res))
    return res;
  else
    return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  const raw = buffer.raw();
  let res = new bignum(raw);

  if (values)
    res = values[res.toString(10)] || res;

  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getDecoder('der').tree;
};

// Utility methods

function derDecodeTag(buf, fail) {
  let tag = buf.readUInt8(fail);
  if (buf.isError(tag))
    return tag;

  const cls = der.tagClass[tag >> 6];
  const primitive = (tag & 0x20) === 0;

  // Multi-octet tag - load
  if ((tag & 0x1f) === 0x1f) {
    let oct = tag;
    tag = 0;
    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct))
        return oct;

      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }
  const tagStr = der.tag[tag];

  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  let len = buf.readUInt8(fail);
  if (buf.isError(len))
    return len;

  // Indefinite form
  if (!primitive && len === 0x80)
    return null;

  // Definite form
  if ((len & 0x80) === 0) {
    // Short form
    return len;
  }

  // Long form
  const num = len & 0x7f;
  if (num > 4)
    return buf.error('length octect is too long');

  len = 0;
  for (let i = 0; i < num; i++) {
    len <<= 8;
    const j = buf.readUInt8(fail);
    if (buf.isError(j))
      return j;
    len |= j;
  }

  return len;
}

},{"../base/buffer":3,"../base/node":5,"../constants/der":7,"bn.js":15,"inherits":132}],10:[function(require,module,exports){
'use strict';

const decoders = exports;

decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":9,"./pem":11}],11:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;

const DERDecoder = require('./der');

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  const lines = data.toString().split(/[\r\n]+/g);

  const label = options.label.toUpperCase();

  const re = /^-----(BEGIN|END) ([^-]+)-----$/;
  let start = -1;
  let end = -1;
  for (let i = 0; i < lines.length; i++) {
    const match = lines[i].match(re);
    if (match === null)
      continue;

    if (match[2] !== label)
      continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN')
        break;
      start = i;
    } else {
      if (match[1] !== 'END')
        break;
      end = i;
      break;
    }
  }
  if (start === -1 || end === -1)
    throw new Error('PEM section not found for: ' + label);

  const base64 = lines.slice(start + 1, end).join('');
  // Remove excessive symbols
  base64.replace(/[^a-z0-9+/=]+/gi, '');

  const input = Buffer.from(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

},{"./der":9,"inherits":132,"safer-buffer":162}],12:[function(require,module,exports){
'use strict';

const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');

// Import DER constants
const der = require('../constants/der');

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity;

  // Construct base tree
  this.tree = new DERNode();
  this.tree._init(entity.body);
}
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
};

// Tree methods

function DERNode(parent) {
  Node.call(this, 'der', parent);
}
inherits(DERNode, Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag,
  primitive,
  cls,
  content) {
  const encodedTag = encodeTag(tag, primitive, cls, this.reporter);

  // Short form
  if (content.length < 0x80) {
    const header = Buffer.alloc(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([ header, content ]);
  }

  // Long form
  // Count octets required to store length
  let lenOctets = 1;
  for (let i = content.length; i >= 0x100; i >>= 8)
    lenOctets++;

  const header = Buffer.alloc(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (let i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8)
    header[i] = j & 0xff;

  return this._createEncoderBuffer([ header, content ]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([ str.unused | 0, str.data ]);
  } else if (tag === 'bmpstr') {
    const buf = Buffer.alloc(str.length * 2);
    for (let i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }
    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' +
                                 'only digits and space');
    }
    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' +
                                 'only latin upper and lower case letters, ' +
                                 'digits, space, apostrophe, left and rigth ' +
                                 'parenthesis, plus sign, comma, hyphen, ' +
                                 'dot, slash, colon, equal sign, ' +
                                 'question mark');
    }
    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag +
                               ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values)
      return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id))
      return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s.]+/g);
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  } else if (Array.isArray(id)) {
    id = id.slice();
    for (let i = 0; i < id.length; i++)
      id[i] |= 0;
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' +
                               'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40)
      return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  }

  // Count number of octets
  let size = 0;
  for (let i = 0; i < id.length; i++) {
    let ident = id[i];
    for (size++; ident >= 0x80; ident >>= 7)
      size++;
  }

  const objid = Buffer.alloc(size);
  let offset = objid.length - 1;
  for (let i = id.length - 1; i >= 0; i--) {
    let ident = id[i];
    objid[offset--] = ident & 0x7f;
    while ((ident >>= 7) > 0)
      objid[offset--] = 0x80 | (ident & 0x7f);
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10)
    return '0' + num;
  else
    return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  let str;
  const date = new Date(time);

  if (tag === 'gentime') {
    str = [
      two(date.getUTCFullYear()),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else if (tag === 'utctime') {
    str = [
      two(date.getUTCFullYear() % 100),
      two(date.getUTCMonth() + 1),
      two(date.getUTCDate()),
      two(date.getUTCHours()),
      two(date.getUTCMinutes()),
      two(date.getUTCSeconds()),
      'Z'
    ].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values)
      return this.reporter.error('String int or enum given, but no values map');
    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' +
                                 JSON.stringify(num));
    }
    num = values[num];
  }

  // Bignum, assume big endian
  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    const numArray = num.toArray();
    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }
    num = Buffer.from(numArray);
  }

  if (Buffer.isBuffer(num)) {
    let size = num.length;
    if (num.length === 0)
      size++;

    const out = Buffer.alloc(size);
    num.copy(out);
    if (num.length === 0)
      out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80)
    return this._createEncoderBuffer(num);

  if (num < 0x100)
    return this._createEncoderBuffer([0, num]);

  let size = 1;
  for (let i = num; i >= 0x100; i >>= 8)
    size++;

  const out = new Array(size);
  for (let i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }
  if(out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(Buffer.from(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function')
    entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  const state = this._baseState;
  let i;
  if (state['default'] === null)
    return false;

  const data = dataBuffer.join();
  if (state.defaultBuffer === undefined)
    state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();

  if (data.length !== state.defaultBuffer.length)
    return false;

  for (i=0; i < data.length; i++)
    if (data[i] !== state.defaultBuffer[i])
      return false;

  return true;
};

// Utility methods

function encodeTag(tag, primitive, cls, reporter) {
  let res;

  if (tag === 'seqof')
    tag = 'seq';
  else if (tag === 'setof')
    tag = 'set';

  if (der.tagByName.hasOwnProperty(tag))
    res = der.tagByName[tag];
  else if (typeof tag === 'number' && (tag | 0) === tag)
    res = tag;
  else
    return reporter.error('Unknown tag: ' + tag);

  if (res >= 0x1f)
    return reporter.error('Multi-octet tag encoding unsupported');

  if (!primitive)
    res |= 0x20;

  res |= (der.tagClassByName[cls || 'universal'] << 6);

  return res;
}

},{"../base/node":5,"../constants/der":7,"inherits":132,"safer-buffer":162}],13:[function(require,module,exports){
'use strict';

const encoders = exports;

encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":12,"./pem":14}],14:[function(require,module,exports){
'use strict';

const inherits = require('inherits');

const DEREncoder = require('./der');

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  const buf = DEREncoder.prototype.encode.call(this, data);

  const p = buf.toString('base64');
  const out = [ '-----BEGIN ' + options.label + '-----' ];
  for (let i = 0; i < p.length; i += 64)
    out.push(p.slice(i, i + 64));
  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

},{"./der":12,"inherits":132}],15:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":19}],16:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],17:[function(require,module,exports){
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this._strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // '0' - '9'
    if (c >= 48 && c <= 57) {
      return c - 48;
    // 'A' - 'F'
    } else if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    } else {
      assert(false, 'Invalid character in ' + string);
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this._strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var b = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        b = c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        b = c - 17 + 0xa;

      // '0' - '9'
      } else {
        b = c;
      }
      assert(c >= 0 && b < mul, 'Invalid character');
      r += b;
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this._strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  function move (dest, src) {
    dest.words = src.words;
    dest.length = src.length;
    dest.negative = src.negative;
    dest.red = src.red;
  }

  BN.prototype._move = function _move (dest) {
    move(dest, this);
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype._strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  // Check Symbol.for because not everywhere where Symbol defined
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
    try {
      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
      BN.prototype.inspect = inspect;
    }
  } else {
    BN.prototype.inspect = inspect;
  }

  function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  }

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modrn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16, 2);
  };

  if (Buffer) {
    BN.prototype.toBuffer = function toBuffer (endian, length) {
      return this.toArrayLike(Buffer, endian, length);
    };
  }

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  var allocate = function allocate (ArrayType, size) {
    if (ArrayType.allocUnsafe) {
      return ArrayType.allocUnsafe(size);
    }
    return new ArrayType(size);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    this._strip();

    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    var res = allocate(ArrayType, reqLength);
    var postfix = endian === 'le' ? 'LE' : 'BE';
    this['_toArrayLike' + postfix](res, byteLength);
    return res;
  };

  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
    var position = 0;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position++] = word & 0xff;
      if (position < res.length) {
        res[position++] = (word >> 8) & 0xff;
      }
      if (position < res.length) {
        res[position++] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position < res.length) {
          res[position++] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position < res.length) {
      res[position++] = carry;

      while (position < res.length) {
        res[position++] = 0;
      }
    }
  };

  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
    var position = res.length - 1;
    var carry = 0;

    for (var i = 0, shift = 0; i < this.length; i++) {
      var word = (this.words[i] << shift) | carry;

      res[position--] = word & 0xff;
      if (position >= 0) {
        res[position--] = (word >> 8) & 0xff;
      }
      if (position >= 0) {
        res[position--] = (word >> 16) & 0xff;
      }

      if (shift === 6) {
        if (position >= 0) {
          res[position--] = (word >> 24) & 0xff;
        }
        carry = 0;
        shift = 0;
      } else {
        carry = word >>> 24;
        shift += 2;
      }
    }

    if (position >= 0) {
      res[position--] = carry;

      while (position >= 0) {
        res[position--] = 0;
      }
    }
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] >>> wbit) & 0x01;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this._strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this._strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this._strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this._strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this._strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this._strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out._strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out._strip();
  }

  function jumboMulTo (self, num, out) {
    // Temporary disable, see https://github.com/indutny/bn.js/issues/211
    // var fftm = new FFTM();
    // return fftm.mulp(self, num, out);
    return bigMulTo(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out._strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this._strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this._strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this._strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) <= num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this._strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this._strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this._strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q._strip();
    }
    a._strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modrn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modrn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modrn = function modrn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return isNegNum ? -acc : acc;
  };

  // WARNING: DEPRECATED
  BN.prototype.modn = function modn (num) {
    return this.modrn(num);
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    var isNegNum = num < 0;
    if (isNegNum) num = -num;

    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    this._strip();
    return isNegNum ? this.ineg() : this;
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this._strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is a BN v4 instance
        r.strip();
      } else {
        // r is a BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);

    move(a, a.umod(this.m)._forceRed(this));
    return a;
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":19}],18:[function(require,module,exports){
var r;

module.exports = function rand(len) {
  if (!r)
    r = new Rand(null);

  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}
module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
};

// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes)
    return this.rand.getBytes(n);

  var res = new Uint8Array(n);
  for (var i = 0; i < res.length; i++)
    res[i] = this.rand.getByte();
  return res;
};

if (typeof self === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    };

  // Safari's WebWorkers do not have `crypto`
  } else if (typeof window === 'object') {
    // Old junk
    Rand.prototype._rand = function() {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function')
      throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {
  }
}

},{"crypto":19}],19:[function(require,module,exports){

},{}],20:[function(require,module,exports){
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/

var Buffer = require('safe-buffer').Buffer

function asUInt32Array (buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)

  var len = (buf.length / 4) | 0
  var out = new Array(len)

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4)
  }

  return out
}

function scrubVec (v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0
  }
}

function cryptBlock (M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0]
  var SUB_MIX1 = SUB_MIX[1]
  var SUB_MIX2 = SUB_MIX[2]
  var SUB_MIX3 = SUB_MIX[3]

  var s0 = M[0] ^ keySchedule[0]
  var s1 = M[1] ^ keySchedule[1]
  var s2 = M[2] ^ keySchedule[2]
  var s3 = M[3] ^ keySchedule[3]
  var t0, t1, t2, t3
  var ksRow = 4

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[(s1 >>> 16) & 0xff] ^ SUB_MIX2[(s2 >>> 8) & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++]
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[(s2 >>> 16) & 0xff] ^ SUB_MIX2[(s3 >>> 8) & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++]
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[(s3 >>> 16) & 0xff] ^ SUB_MIX2[(s0 >>> 8) & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++]
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[(s0 >>> 16) & 0xff] ^ SUB_MIX2[(s1 >>> 8) & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++]
    s0 = t0
    s1 = t1
    s2 = t2
    s3 = t3
  }

  t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++]
  t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++]
  t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++]
  t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++]
  t0 = t0 >>> 0
  t1 = t1 >>> 0
  t2 = t2 >>> 0
  t3 = t3 >>> 0

  return [t0, t1, t2, t3]
}

// AES constants
var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
var G = (function () {
  // Compute double table
  var d = new Array(256)
  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1
    } else {
      d[j] = (j << 1) ^ 0x11b
    }
  }

  var SBOX = []
  var INV_SBOX = []
  var SUB_MIX = [[], [], [], []]
  var INV_SUB_MIX = [[], [], [], []]

  // Walk GF(2^8)
  var x = 0
  var xi = 0
  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4)
    sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63
    SBOX[x] = sx
    INV_SBOX[sx] = x

    // Compute multiplication
    var x2 = d[x]
    var x4 = d[x2]
    var x8 = d[x4]

    // Compute sub bytes, mix columns tables
    var t = (d[sx] * 0x101) ^ (sx * 0x1010100)
    SUB_MIX[0][x] = (t << 24) | (t >>> 8)
    SUB_MIX[1][x] = (t << 16) | (t >>> 16)
    SUB_MIX[2][x] = (t << 8) | (t >>> 24)
    SUB_MIX[3][x] = t

    // Compute inv sub bytes, inv mix columns tables
    t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100)
    INV_SUB_MIX[0][sx] = (t << 24) | (t >>> 8)
    INV_SUB_MIX[1][sx] = (t << 16) | (t >>> 16)
    INV_SUB_MIX[2][sx] = (t << 8) | (t >>> 24)
    INV_SUB_MIX[3][sx] = t

    if (x === 0) {
      x = xi = 1
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]]
      xi ^= d[d[xi]]
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  }
})()

function AES (key) {
  this._key = asUInt32Array(key)
  this._reset()
}

AES.blockSize = 4 * 4
AES.keySize = 256 / 8
AES.prototype.blockSize = AES.blockSize
AES.prototype.keySize = AES.keySize
AES.prototype._reset = function () {
  var keyWords = this._key
  var keySize = keyWords.length
  var nRounds = keySize + 6
  var ksRows = (nRounds + 1) * 4

  var keySchedule = []
  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k]
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1]

    if (k % keySize === 0) {
      t = (t << 8) | (t >>> 24)
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])

      t ^= RCON[(k / keySize) | 0] << 24
    } else if (keySize > 6 && k % keySize === 4) {
      t =
        (G.SBOX[t >>> 24] << 24) |
        (G.SBOX[(t >>> 16) & 0xff] << 16) |
        (G.SBOX[(t >>> 8) & 0xff] << 8) |
        (G.SBOX[t & 0xff])
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t
  }

  var invKeySchedule = []
  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)]

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt
    } else {
      invKeySchedule[ik] =
        G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^
        G.INV_SUB_MIX[1][G.SBOX[(tt >>> 16) & 0xff]] ^
        G.INV_SUB_MIX[2][G.SBOX[(tt >>> 8) & 0xff]] ^
        G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]]
    }
  }

  this._nRounds = nRounds
  this._keySchedule = keySchedule
  this._invKeySchedule = invKeySchedule
}

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M)
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds)
}

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[1], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[3], 12)
  return buf
}

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M)

  // swap
  var m1 = M[1]
  M[1] = M[3]
  M[3] = m1

  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds)
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0], 0)
  buf.writeUInt32BE(out[3], 4)
  buf.writeUInt32BE(out[2], 8)
  buf.writeUInt32BE(out[1], 12)
  return buf
}

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule)
  scrubVec(this._invKeySchedule)
  scrubVec(this._key)
}

module.exports.AES = AES

},{"safe-buffer":161}],21:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')
var GHASH = require('./ghash')
var xor = require('buffer-xor')
var incr32 = require('./incr32')

function xorTest (a, b) {
  var out = 0
  if (a.length !== b.length) out++

  var len = Math.min(a.length, b.length)
  for (var i = 0; i < len; ++i) {
    out += (a[i] ^ b[i])
  }

  return out
}

function calcIv (self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])])
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])])
  }
  var ghash = new GHASH(ck)
  var len = iv.length
  var toPad = len % 16
  ghash.update(iv)
  if (toPad) {
    toPad = 16 - toPad
    ghash.update(Buffer.alloc(toPad, 0))
  }
  ghash.update(Buffer.alloc(8, 0))
  var ivBits = len * 8
  var tail = Buffer.alloc(8)
  tail.writeUIntBE(ivBits, 0, 8)
  ghash.update(tail)
  self._finID = ghash.state
  var out = Buffer.from(self._finID)
  incr32(out)
  return out
}
function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  var h = Buffer.alloc(4, 0)

  this._cipher = new aes.AES(key)
  var ck = this._cipher.encryptBlock(h)
  this._ghash = new GHASH(ck)
  iv = calcIv(this, iv, ck)

  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._alen = 0
  this._len = 0
  this._mode = mode

  this._authTag = null
  this._called = false
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - (this._alen % 16)
    if (rump < 16) {
      rump = Buffer.alloc(rump, 0)
      this._ghash.update(rump)
    }
  }

  this._called = true
  var out = this._mode.encrypt(this, chunk)
  if (this._decrypt) {
    this._ghash.update(chunk)
  } else {
    this._ghash.update(out)
  }
  this._len += chunk.length
  return out
}

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data')

  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID))
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data')

  this._authTag = tag
  this._cipher.scrub()
}

StreamCipher.prototype.getAuthTag = function getAuthTag () {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state')

  return this._authTag
}

StreamCipher.prototype.setAuthTag = function setAuthTag (tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state')

  this._authTag = tag
}

StreamCipher.prototype.setAAD = function setAAD (buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state')

  this._ghash.update(buf)
  this._alen += buf.length
}

module.exports = StreamCipher

},{"./aes":20,"./ghash":25,"./incr32":26,"buffer-xor":62,"cipher-base":64,"inherits":132,"safe-buffer":161}],22:[function(require,module,exports){
var ciphers = require('./encrypter')
var deciphers = require('./decrypter')
var modes = require('./modes/list.json')

function getCiphers () {
  return Object.keys(modes)
}

exports.createCipher = exports.Cipher = ciphers.createCipher
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv
exports.createDecipher = exports.Decipher = deciphers.createDecipher
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"./decrypter":23,"./encrypter":24,"./modes/list.json":34}],23:[function(require,module,exports){
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var MODES = require('./modes')
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Decipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._last = void 0
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Decipher, Transform)

Decipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []
  while ((chunk = this._cache.get(this._autopadding))) {
    thing = this._mode.decrypt(this, chunk)
    out.push(thing)
  }
  return Buffer.concat(out)
}

Decipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk))
  } else if (chunk) {
    throw new Error('data not multiple of block length')
  }
}

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function (autoPadding) {
  var out
  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16)
      this.cache = this.cache.slice(16)
      return out
    }
  }

  return null
}

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache
}

function unpad (last) {
  var padded = last[15]
  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data')
  }
  var i = -1
  while (++i < padded) {
    if (last[(i + (16 - padded))] !== padded) {
      throw new Error('unable to decrypt data')
    }
  }
  if (padded === 16) return

  return last.slice(0, 16 - padded)
}

function createDecipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true)
  }

  return new Decipher(config.module, password, iv)
}

function createDecipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createDecipheriv(suite, keys.key, keys.iv)
}

exports.createDecipher = createDecipher
exports.createDecipheriv = createDecipheriv

},{"./aes":20,"./authCipher":21,"./modes":33,"./streamCipher":36,"cipher-base":64,"evp_bytestokey":101,"inherits":132,"safe-buffer":161}],24:[function(require,module,exports){
var MODES = require('./modes')
var AuthCipher = require('./authCipher')
var Buffer = require('safe-buffer').Buffer
var StreamCipher = require('./streamCipher')
var Transform = require('cipher-base')
var aes = require('./aes')
var ebtk = require('evp_bytestokey')
var inherits = require('inherits')

function Cipher (mode, key, iv) {
  Transform.call(this)

  this._cache = new Splitter()
  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._mode = mode
  this._autopadding = true
}

inherits(Cipher, Transform)

Cipher.prototype._update = function (data) {
  this._cache.add(data)
  var chunk
  var thing
  var out = []

  while ((chunk = this._cache.get())) {
    thing = this._mode.encrypt(this, chunk)
    out.push(thing)
  }

  return Buffer.concat(out)
}

var PADDING = Buffer.alloc(16, 0x10)

Cipher.prototype._final = function () {
  var chunk = this._cache.flush()
  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk)
    this._cipher.scrub()
    return chunk
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub()
    throw new Error('data not multiple of block length')
  }
}

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo
  return this
}

function Splitter () {
  this.cache = Buffer.allocUnsafe(0)
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data])
}

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    return out
  }
  return null
}

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length
  var padBuff = Buffer.allocUnsafe(len)

  var i = -1
  while (++i < len) {
    padBuff.writeUInt8(len, i)
  }

  return Buffer.concat([this.cache, padBuff])
}

function createCipheriv (suite, password, iv) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  if (typeof password === 'string') password = Buffer.from(password)
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length)

  if (typeof iv === 'string') iv = Buffer.from(iv)
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length)

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv)
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv)
  }

  return new Cipher(config.module, password, iv)
}

function createCipher (suite, password) {
  var config = MODES[suite.toLowerCase()]
  if (!config) throw new TypeError('invalid suite type')

  var keys = ebtk(password, false, config.key, config.iv)
  return createCipheriv(suite, keys.key, keys.iv)
}

exports.createCipheriv = createCipheriv
exports.createCipher = createCipher

},{"./aes":20,"./authCipher":21,"./modes":33,"./streamCipher":36,"cipher-base":64,"evp_bytestokey":101,"inherits":132,"safe-buffer":161}],25:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var ZEROES = Buffer.alloc(16, 0)

function toArray (buf) {
  return [
    buf.readUInt32BE(0),
    buf.readUInt32BE(4),
    buf.readUInt32BE(8),
    buf.readUInt32BE(12)
  ]
}

function fromArray (out) {
  var buf = Buffer.allocUnsafe(16)
  buf.writeUInt32BE(out[0] >>> 0, 0)
  buf.writeUInt32BE(out[1] >>> 0, 4)
  buf.writeUInt32BE(out[2] >>> 0, 8)
  buf.writeUInt32BE(out[3] >>> 0, 12)
  return buf
}

function GHASH (key) {
  this.h = key
  this.state = Buffer.alloc(16, 0)
  this.cache = Buffer.allocUnsafe(0)
}

// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function (block) {
  var i = -1
  while (++i < block.length) {
    this.state[i] ^= block[i]
  }
  this._multiply()
}

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h)
  var Zi = [0, 0, 0, 0]
  var j, xi, lsbVi
  var i = -1
  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & (1 << (7 - (i % 8)))) !== 0
    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0]
      Zi[1] ^= Vi[1]
      Zi[2] ^= Vi[2]
      Zi[3] ^= Vi[3]
    }

    // Store the value of LSB(V_i)
    lsbVi = (Vi[3] & 1) !== 0

    // V_i+1 = V_i >> 1
    for (j = 3; j > 0; j--) {
      Vi[j] = (Vi[j] >>> 1) | ((Vi[j - 1] & 1) << 31)
    }
    Vi[0] = Vi[0] >>> 1

    // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
    if (lsbVi) {
      Vi[0] = Vi[0] ^ (0xe1 << 24)
    }
  }
  this.state = fromArray(Zi)
}

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf])
  var chunk
  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16)
    this.cache = this.cache.slice(16)
    this.ghash(chunk)
  }
}

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16))
  }

  this.ghash(fromArray([0, abl, 0, bl]))
  return this.state
}

module.exports = GHASH

},{"safe-buffer":161}],26:[function(require,module,exports){
function incr32 (iv) {
  var len = iv.length
  var item
  while (len--) {
    item = iv.readUInt8(len)
    if (item === 255) {
      iv.writeUInt8(0, len)
    } else {
      item++
      iv.writeUInt8(item, len)
      break
    }
  }
}
module.exports = incr32

},{}],27:[function(require,module,exports){
var xor = require('buffer-xor')

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev)

  self._prev = self._cipher.encryptBlock(data)
  return self._prev
}

exports.decrypt = function (self, block) {
  var pad = self._prev

  self._prev = block
  var out = self._cipher.decryptBlock(block)

  return xor(out, pad)
}

},{"buffer-xor":62}],28:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var xor = require('buffer-xor')

function encryptStart (self, data, decrypt) {
  var len = data.length
  var out = xor(data, self._cache)
  self._cache = self._cache.slice(len)
  self._prev = Buffer.concat([self._prev, decrypt ? data : out])
  return out
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0)
  var len

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev)
      self._prev = Buffer.allocUnsafe(0)
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])
      data = data.slice(len)
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)])
      break
    }
  }

  return out
}

},{"buffer-xor":62,"safe-buffer":161}],29:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad
  var i = -1
  var len = 8
  var out = 0
  var bit, value
  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev)
    bit = (byteParam & (1 << (7 - i))) ? 0x80 : 0
    value = pad[0] ^ bit
    out += ((value & 0x80) >> (i % 8))
    self._prev = shiftIn(self._prev, decrypt ? bit : value)
  }
  return out
}

function shiftIn (buffer, value) {
  var len = buffer.length
  var i = -1
  var out = Buffer.allocUnsafe(buffer.length)
  buffer = Buffer.concat([buffer, Buffer.from([value])])

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> (7)
  }

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":161}],30:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

function encryptByte (self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev)
  var out = pad[0] ^ byteParam

  self._prev = Buffer.concat([
    self._prev.slice(1),
    Buffer.from([decrypt ? byteParam : out])
  ])

  return out
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length
  var out = Buffer.allocUnsafe(len)
  var i = -1

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt)
  }

  return out
}

},{"safe-buffer":161}],31:[function(require,module,exports){
var xor = require('buffer-xor')
var Buffer = require('safe-buffer').Buffer
var incr32 = require('../incr32')

function getBlock (self) {
  var out = self._cipher.encryptBlockRaw(self._prev)
  incr32(self._prev)
  return out
}

var blockSize = 16
exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize)
  var start = self._cache.length
  self._cache = Buffer.concat([
    self._cache,
    Buffer.allocUnsafe(chunkNum * blockSize)
  ])
  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self)
    var offset = start + i * blockSize
    self._cache.writeUInt32BE(out[0], offset + 0)
    self._cache.writeUInt32BE(out[1], offset + 4)
    self._cache.writeUInt32BE(out[2], offset + 8)
    self._cache.writeUInt32BE(out[3], offset + 12)
  }
  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

},{"../incr32":26,"buffer-xor":62,"safe-buffer":161}],32:[function(require,module,exports){
exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block)
}

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block)
}

},{}],33:[function(require,module,exports){
var modeModules = {
  ECB: require('./ecb'),
  CBC: require('./cbc'),
  CFB: require('./cfb'),
  CFB8: require('./cfb8'),
  CFB1: require('./cfb1'),
  OFB: require('./ofb'),
  CTR: require('./ctr'),
  GCM: require('./ctr')
}

var modes = require('./list.json')

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode]
}

module.exports = modes

},{"./cbc":27,"./cfb":28,"./cfb1":29,"./cfb8":30,"./ctr":31,"./ecb":32,"./list.json":34,"./ofb":35}],34:[function(require,module,exports){
module.exports={
  "aes-128-ecb": {
    "cipher": "AES",
    "key": 128,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-192-ecb": {
    "cipher": "AES",
    "key": 192,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-256-ecb": {
    "cipher": "AES",
    "key": 256,
    "iv": 0,
    "mode": "ECB",
    "type": "block"
  },
  "aes-128-cbc": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-192-cbc": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-256-cbc": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes128": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes192": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes256": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CBC",
    "type": "block"
  },
  "aes-128-cfb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-192-cfb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-256-cfb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB",
    "type": "stream"
  },
  "aes-128-cfb8": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-192-cfb8": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-256-cfb8": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB8",
    "type": "stream"
  },
  "aes-128-cfb1": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-192-cfb1": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-256-cfb1": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CFB1",
    "type": "stream"
  },
  "aes-128-ofb": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-192-ofb": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-256-ofb": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "OFB",
    "type": "stream"
  },
  "aes-128-ctr": {
    "cipher": "AES",
    "key": 128,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-192-ctr": {
    "cipher": "AES",
    "key": 192,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-256-ctr": {
    "cipher": "AES",
    "key": 256,
    "iv": 16,
    "mode": "CTR",
    "type": "stream"
  },
  "aes-128-gcm": {
    "cipher": "AES",
    "key": 128,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-192-gcm": {
    "cipher": "AES",
    "key": 192,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  },
  "aes-256-gcm": {
    "cipher": "AES",
    "key": 256,
    "iv": 12,
    "mode": "GCM",
    "type": "auth"
  }
}

},{}],35:[function(require,module,exports){
(function (Buffer){(function (){
var xor = require('buffer-xor')

function getBlock (self) {
  self._prev = self._cipher.encryptBlock(self._prev)
  return self._prev
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)])
  }

  var pad = self._cache.slice(0, chunk.length)
  self._cache = self._cache.slice(chunk.length)
  return xor(chunk, pad)
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":63,"buffer-xor":62}],36:[function(require,module,exports){
var aes = require('./aes')
var Buffer = require('safe-buffer').Buffer
var Transform = require('cipher-base')
var inherits = require('inherits')

function StreamCipher (mode, key, iv, decrypt) {
  Transform.call(this)

  this._cipher = new aes.AES(key)
  this._prev = Buffer.from(iv)
  this._cache = Buffer.allocUnsafe(0)
  this._secCache = Buffer.allocUnsafe(0)
  this._decrypt = decrypt
  this._mode = mode
}

inherits(StreamCipher, Transform)

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt)
}

StreamCipher.prototype._final = function () {
  this._cipher.scrub()
}

module.exports = StreamCipher

},{"./aes":20,"cipher-base":64,"inherits":132,"safe-buffer":161}],37:[function(require,module,exports){
var DES = require('browserify-des')
var aes = require('browserify-aes/browser')
var aesModes = require('browserify-aes/modes')
var desModes = require('browserify-des/modes')
var ebtk = require('evp_bytestokey')

function createCipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createCipheriv(suite, keys.key, keys.iv)
}

function createDecipher (suite, password) {
  suite = suite.toLowerCase()

  var keyLen, ivLen
  if (aesModes[suite]) {
    keyLen = aesModes[suite].key
    ivLen = aesModes[suite].iv
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8
    ivLen = desModes[suite].iv
  } else {
    throw new TypeError('invalid suite type')
  }

  var keys = ebtk(password, false, keyLen, ivLen)
  return createDecipheriv(suite, keys.key, keys.iv)
}

function createCipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite })

  throw new TypeError('invalid suite type')
}

function createDecipheriv (suite, key, iv) {
  suite = suite.toLowerCase()
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv)
  if (desModes[suite]) return new DES({ key: key, iv: iv, mode: suite, decrypt: true })

  throw new TypeError('invalid suite type')
}

function getCiphers () {
  return Object.keys(desModes).concat(aes.getCiphers())
}

exports.createCipher = exports.Cipher = createCipher
exports.createCipheriv = exports.Cipheriv = createCipheriv
exports.createDecipher = exports.Decipher = createDecipher
exports.createDecipheriv = exports.Decipheriv = createDecipheriv
exports.listCiphers = exports.getCiphers = getCiphers

},{"browserify-aes/browser":22,"browserify-aes/modes":33,"browserify-des":38,"browserify-des/modes":39,"evp_bytestokey":101}],38:[function(require,module,exports){
var CipherBase = require('cipher-base')
var des = require('des.js')
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
}
modes.des = modes['des-cbc']
modes.des3 = modes['des-ede3-cbc']
module.exports = DES
inherits(DES, CipherBase)
function DES (opts) {
  CipherBase.call(this)
  var modeName = opts.mode.toLowerCase()
  var mode = modes[modeName]
  var type
  if (opts.decrypt) {
    type = 'decrypt'
  } else {
    type = 'encrypt'
  }
  var key = opts.key
  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key)
  }
  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)])
  }
  var iv = opts.iv
  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv)
  }
  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  })
}
DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data))
}
DES.prototype._final = function () {
  return Buffer.from(this._des.final())
}

},{"cipher-base":64,"des.js":72,"inherits":132,"safe-buffer":161}],39:[function(require,module,exports){
exports['des-ecb'] = {
  key: 8,
  iv: 0
}
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
}
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
}
exports['des-ede3'] = {
  key: 24,
  iv: 0
}
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
}
exports['des-ede'] = {
  key: 16,
  iv: 0
}

},{}],40:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js')
var randomBytes = require('randombytes')

function blind (priv) {
  var r = getr(priv)
  var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed()
  return { blinder: blinder, unblinder: r.invm(priv.modulus) }
}

function getr (priv) {
  var len = priv.modulus.byteLength()
  var r
  do {
    r = new BN(randomBytes(len))
  } while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
  return r
}

function crt (msg, priv) {
  var blinds = blind(priv)
  var len = priv.modulus.byteLength()
  var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus)
  var c1 = blinded.toRed(BN.mont(priv.prime1))
  var c2 = blinded.toRed(BN.mont(priv.prime2))
  var qinv = priv.coefficient
  var p = priv.prime1
  var q = priv.prime2
  var m1 = c1.redPow(priv.exponent1).fromRed()
  var m2 = c2.redPow(priv.exponent2).fromRed()
  var h = m1.isub(m2).imul(qinv).umod(p).imul(q)
  return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len)
}
crt.getr = getr

module.exports = crt

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":17,"buffer":63,"randombytes":158}],41:[function(require,module,exports){
module.exports = require('./browser/algorithms.json')

},{"./browser/algorithms.json":42}],42:[function(require,module,exports){
module.exports={
  "sha224WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "RSA-SHA224": {
    "sign": "ecdsa/rsa",
    "hash": "sha224",
    "id": "302d300d06096086480165030402040500041c"
  },
  "sha256WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "RSA-SHA256": {
    "sign": "ecdsa/rsa",
    "hash": "sha256",
    "id": "3031300d060960864801650304020105000420"
  },
  "sha384WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "RSA-SHA384": {
    "sign": "ecdsa/rsa",
    "hash": "sha384",
    "id": "3041300d060960864801650304020205000430"
  },
  "sha512WithRSAEncryption": {
    "sign": "rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA512": {
    "sign": "ecdsa/rsa",
    "hash": "sha512",
    "id": "3051300d060960864801650304020305000440"
  },
  "RSA-SHA1": {
    "sign": "rsa",
    "hash": "sha1",
    "id": "3021300906052b0e03021a05000414"
  },
  "ecdsa-with-SHA1": {
    "sign": "ecdsa",
    "hash": "sha1",
    "id": ""
  },
  "sha256": {
    "sign": "ecdsa",
    "hash": "sha256",
    "id": ""
  },
  "sha224": {
    "sign": "ecdsa",
    "hash": "sha224",
    "id": ""
  },
  "sha384": {
    "sign": "ecdsa",
    "hash": "sha384",
    "id": ""
  },
  "sha512": {
    "sign": "ecdsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-SHA1": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA": {
    "sign": "dsa",
    "hash": "sha1",
    "id": ""
  },
  "DSA-WITH-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-SHA224": {
    "sign": "dsa",
    "hash": "sha224",
    "id": ""
  },
  "DSA-WITH-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-SHA256": {
    "sign": "dsa",
    "hash": "sha256",
    "id": ""
  },
  "DSA-WITH-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-SHA384": {
    "sign": "dsa",
    "hash": "sha384",
    "id": ""
  },
  "DSA-WITH-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-SHA512": {
    "sign": "dsa",
    "hash": "sha512",
    "id": ""
  },
  "DSA-RIPEMD160": {
    "sign": "dsa",
    "hash": "rmd160",
    "id": ""
  },
  "ripemd160WithRSA": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "RSA-RIPEMD160": {
    "sign": "rsa",
    "hash": "rmd160",
    "id": "3021300906052b2403020105000414"
  },
  "md5WithRSAEncryption": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  },
  "RSA-MD5": {
    "sign": "rsa",
    "hash": "md5",
    "id": "3020300c06082a864886f70d020505000410"
  }
}

},{}],43:[function(require,module,exports){
module.exports={
  "1.3.132.0.10": "secp256k1",
  "1.3.132.0.33": "p224",
  "1.2.840.10045.3.1.1": "p192",
  "1.2.840.10045.3.1.7": "p256",
  "1.3.132.0.34": "p384",
  "1.3.132.0.35": "p521"
}

},{}],44:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var createHash = require('create-hash')
var stream = require('readable-stream')
var inherits = require('inherits')
var sign = require('./sign')
var verify = require('./verify')

var algorithms = require('./algorithms.json')
Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = Buffer.from(algorithms[key].id, 'hex')
  algorithms[key.toLowerCase()] = algorithms[key]
})

function Sign (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hashType = data.hash
  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Sign, stream.Writable)

Sign.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Sign.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Sign.prototype.sign = function signMethod (key, enc) {
  this.end()
  var hash = this._hash.digest()
  var sig = sign(hash, key, this._hashType, this._signType, this._tag)

  return enc ? sig.toString(enc) : sig
}

function Verify (algorithm) {
  stream.Writable.call(this)

  var data = algorithms[algorithm]
  if (!data) throw new Error('Unknown message digest')

  this._hash = createHash(data.hash)
  this._tag = data.id
  this._signType = data.sign
}
inherits(Verify, stream.Writable)

Verify.prototype._write = function _write (data, _, done) {
  this._hash.update(data)
  done()
}

Verify.prototype.update = function update (data, enc) {
  if (typeof data === 'string') data = Buffer.from(data, enc)

  this._hash.update(data)
  return this
}

Verify.prototype.verify = function verifyMethod (key, sig, enc) {
  if (typeof sig === 'string') sig = Buffer.from(sig, enc)

  this.end()
  var hash = this._hash.digest()
  return verify(sig, hash, key, this._signType, this._tag)
}

function createSign (algorithm) {
  return new Sign(algorithm)
}

function createVerify (algorithm) {
  return new Verify(algorithm)
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
}

},{"./algorithms.json":42,"./sign":45,"./verify":46,"create-hash":67,"inherits":132,"readable-stream":61,"safe-buffer":161}],45:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var createHmac = require('create-hmac')
var crt = require('browserify-rsa')
var EC = require('elliptic').ec
var BN = require('bn.js')
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function sign (hash, key, hashType, signType, tag) {
  var priv = parseKeys(key)
  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
    return ecSign(hash, priv)
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type')
    return dsaSign(hash, priv, hashType)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = priv.modulus.byteLength()
  var pad = [0, 1]
  while (hash.length + pad.length + 1 < len) pad.push(0xff)
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) pad.push(hash[i])

  var out = crt(pad, priv)
  return out
}

function ecSign (hash, priv) {
  var curveId = curves[priv.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'))

  var curve = new EC(curveId)
  var key = curve.keyFromPrivate(priv.privateKey)
  var out = key.sign(hash)

  return Buffer.from(out.toDER())
}

function dsaSign (hash, priv, algo) {
  var x = priv.params.priv_key
  var p = priv.params.p
  var q = priv.params.q
  var g = priv.params.g
  var r = new BN(0)
  var k
  var H = bits2int(hash, q).mod(q)
  var s = false
  var kv = getKey(x, q, hash, algo)
  while (s === false) {
    k = makeKey(q, kv, algo)
    r = makeR(g, k, p, q)
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q)
    if (s.cmpn(0) === 0) {
      s = false
      r = new BN(0)
    }
  }
  return toDER(r, s)
}

function toDER (r, s) {
  r = r.toArray()
  s = s.toArray()

  // Pad values
  if (r[0] & 0x80) r = [0].concat(r)
  if (s[0] & 0x80) s = [0].concat(s)

  var total = r.length + s.length + 4
  var res = [0x30, total, 0x02, r.length]
  res = res.concat(r, [0x02, s.length], s)
  return Buffer.from(res)
}

function getKey (x, q, hash, algo) {
  x = Buffer.from(x.toArray())
  if (x.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - x.length)
    x = Buffer.concat([zeros, x])
  }
  var hlen = hash.length
  var hbits = bits2octets(hash, q)
  var v = Buffer.alloc(hlen)
  v.fill(1)
  var k = Buffer.alloc(hlen)
  k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest()
  v = createHmac(algo, k).update(v).digest()
  return { k: k, v: v }
}

function bits2int (obits, q) {
  var bits = new BN(obits)
  var shift = (obits.length << 3) - q.bitLength()
  if (shift > 0) bits.ishrn(shift)
  return bits
}

function bits2octets (bits, q) {
  bits = bits2int(bits, q)
  bits = bits.mod(q)
  var out = Buffer.from(bits.toArray())
  if (out.length < q.byteLength()) {
    var zeros = Buffer.alloc(q.byteLength() - out.length)
    out = Buffer.concat([zeros, out])
  }
  return out
}

function makeKey (q, kv, algo) {
  var t
  var k

  do {
    t = Buffer.alloc(0)

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest()
      t = Buffer.concat([t, kv.v])
    }

    k = bits2int(t, q)
    kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest()
    kv.v = createHmac(algo, kv.k).update(kv.v).digest()
  } while (k.cmp(q) !== -1)

  return k
}

function makeR (g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q)
}

module.exports = sign
module.exports.getKey = getKey
module.exports.makeKey = makeKey

},{"./curves.json":43,"bn.js":17,"browserify-rsa":40,"create-hmac":69,"elliptic":83,"parse-asn1":143,"safe-buffer":161}],46:[function(require,module,exports){
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer
var BN = require('bn.js')
var EC = require('elliptic').ec
var parseKeys = require('parse-asn1')
var curves = require('./curves.json')

function verify (sig, hash, key, signType, tag) {
  var pub = parseKeys(key)
  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
    return ecVerify(sig, hash, pub)
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type')
    return dsaVerify(sig, hash, pub)
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')
  }
  hash = Buffer.concat([tag, hash])
  var len = pub.modulus.byteLength()
  var pad = [1]
  var padNum = 0
  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff)
    padNum++
  }
  pad.push(0x00)
  var i = -1
  while (++i < hash.length) {
    pad.push(hash[i])
  }
  pad = Buffer.from(pad)
  var red = BN.mont(pub.modulus)
  sig = new BN(sig).toRed(red)

  sig = sig.redPow(new BN(pub.publicExponent))
  sig = Buffer.from(sig.fromRed().toArray())
  var out = padNum < 8 ? 1 : 0
  len = Math.min(sig.length, pad.length)
  if (sig.length !== pad.length) out = 1

  i = -1
  while (++i < len) out |= sig[i] ^ pad[i]
  return out === 0
}

function ecVerify (sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')]
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))

  var curve = new EC(curveId)
  var pubkey = pub.data.subjectPrivateKey.data

  return curve.verify(hash, sig, pubkey)
}

function dsaVerify (sig, hash, pub) {
  var p = pub.data.p
  var q = pub.data.q
  var g = pub.data.g
  var y = pub.data.pub_key
  var unpacked = parseKeys.signature.decode(sig, 'der')
  var s = unpacked.s
  var r = unpacked.r
  checkValue(s, q)
  checkValue(r, q)
  var montp = BN.mont(p)
  var w = s.invm(q)
  var v = g.toRed(montp)
    .redPow(new BN(hash).mul(w).mod(q))
    .fromRed()
    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())
    .mod(p)
    .mod(q)
  return v.cmp(r) === 0
}

function checkValue (b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig')
  if (b.cmp(q) >= q) throw new Error('invalid sig')
}

module.exports = verify

},{"./curves.json":43,"bn.js":17,"elliptic":83,"parse-asn1":143,"safe-buffer":161}],47:[function(require,module,exports){
'use strict';

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

var codes = {};

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inheritsLoose(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
    }

    return NodeError;
  }(Base);

  NodeError.prototype.name = Base.name;
  NodeError.prototype.code = code;
  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
  return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  // determiner: 'must be' or 'must not be'
  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  }

  msg += ". Received type ".concat(typeof actual);
  return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
  return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function (name) {
  return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
  return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],48:[function(require,module,exports){
(function (process){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
};
/*</replacement>*/

module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
{
  // Allow the keys array to be GC'ed.
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}
function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  this.allowHalfOpen = true;
  if (options) {
    if (options.readable === false) this.readable = false;
    if (options.writable === false) this.writable = false;
    if (options.allowHalfOpen === false) {
      this.allowHalfOpen = false;
      this.once('end', onend);
    }
  }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});

// the no-half-open enforcer
function onend() {
  // If the writable side ended, then we're ok.
  if (this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(onEndNT, this);
}
function onEndNT(self) {
  self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});
}).call(this)}).call(this,require('_process'))
},{"./_stream_readable":50,"./_stream_writable":52,"_process":150,"inherits":132}],49:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}
PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":51,"inherits":132}],50:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

module.exports = Readable;

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;

// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}
function ReadableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;
  this.paused = true;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'end' (and potentially 'finish')
  this.autoDestroy = !!options.autoDestroy;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');
  if (!(this instanceof Readable)) return new Readable(options);

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the ReadableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  this._readableState = new ReadableState(options, this, isDuplex);

  // legacy
  this.readable = true;
  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }
  Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;
  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }
  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  debug('readableAddChunk', chunk);
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      errorOrDestroy(stream, er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }
      if (addToFront) {
        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
      } else if (state.destroyed) {
        return false;
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
      maybeReadMore(stream, state);
    }
  }

  // We can push more data if we are below the highWaterMark.
  // Also, if we have no data yet, we can stand some more bytes.
  // This is to work around cases where hwm=0, such as the repl.
  return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    state.awaitDrain = 0;
    stream.emit('data', chunk);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
  }
  return er;
}
Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  var decoder = new StringDecoder(enc);
  this._readableState.decoder = decoder;
  // If setEncoding(null), decoder.encoding equals utf8
  this._readableState.encoding = this._readableState.decoder.encoding;

  // Iterate over current buffer to convert already stored Buffers:
  var p = this._readableState.buffer.head;
  var content = '';
  while (p !== null) {
    content += decoder.write(p.data);
    p = p.next;
  }
  this._readableState.buffer.clear();
  if (content !== '') this._readableState.buffer.push(content);
  this._readableState.length = content.length;
  return this;
};

// Don't raise the hwm > 1GB
var MAX_HWM = 0x40000000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }
  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }
  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;
  if (ret === null) {
    state.needReadable = state.length <= state.highWaterMark;
    n = 0;
  } else {
    state.length -= n;
    state.awaitDrain = 0;
  }
  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }
  if (ret !== null) this.emit('data', ret);
  return ret;
};
function onEofChunk(stream, state) {
  debug('onEofChunk');
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;
  if (state.sync) {
    // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
  } else {
    // emit 'readable' now to make sure it gets picked up.
    state.needReadable = false;
    if (!state.emittedReadable) {
      state.emittedReadable = true;
      emitReadable_(stream);
    }
  }
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  debug('emitReadable', state.needReadable, state.emittedReadable);
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    process.nextTick(emitReadable_, stream);
  }
}
function emitReadable_(stream) {
  var state = stream._readableState;
  debug('emitReadable_', state.destroyed, state.length, state.ended);
  if (!state.destroyed && (state.length || state.ended)) {
    stream.emit('readable');
    state.emittedReadable = false;
  }

  // The stream needs another readable event if
  // 1. It is not flowing, as the flow mechanism will take
  //    care of it.
  // 2. It is not ended.
  // 3. It is below the highWaterMark, so we can schedule
  //    another readable later.
  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(maybeReadMore_, stream, state);
  }
}
function maybeReadMore_(stream, state) {
  // Attempt to read more data if we should.
  //
  // The conditions for reading more data are (one of):
  // - Not enough data buffered (state.length < state.highWaterMark). The loop
  //   is responsible for filling the buffer with enough data if such data
  //   is available. If highWaterMark is 0 and we are not in the flowing mode
  //   we should _not_ attempt to buffer any extra data. We'll get more data
  //   when the stream consumer calls read() instead.
  // - No data in the buffer, and the stream is in flowing mode. In this mode
  //   the loop below is responsible for ensuring read() is called. Failing to
  //   call read here would abort the flow and there's no other mechanism for
  //   continuing the flow if the stream consumer has just subscribed to the
  //   'data' event.
  //
  // In addition to the above conditions to keep reading data, the following
  // conditions prevent the data from being read:
  // - The stream has ended (state.ended).
  // - There is already a pending 'read' operation (state.reading). This is a
  //   case where the the stream has called the implementation defined _read()
  //   method, but they are processing the call asynchronously and have _not_
  //   called push() with new data. In this case we skip performing more
  //   read()s. The execution ends in this method again after the _read() ends
  //   up calling push() with more data.
  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
    var len = state.length;
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;
  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }
  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    debug('dest.write', ret);
    if (ret === false) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', state.awaitDrain);
        state.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);
  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }
  return dest;
};
function pipeOnDrain(src) {
  return function pipeOnDrainFunctionResult() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}
Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    for (var i = 0; i < len; i++) dests[i].emit('unpipe', this, {
      hasUnpiped: false
    });
    return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);
  var state = this._readableState;
  if (ev === 'data') {
    // update readableListening so that resume() may be a no-op
    // a few lines down. This is needed to support once('readable').
    state.readableListening = this.listenerCount('readable') > 0;

    // Try start flowing on next tick if stream isn't explicitly paused
    if (state.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.flowing = false;
      state.emittedReadable = false;
      debug('on readable', state.length, state.reading);
      if (state.length) {
        emitReadable(this);
      } else if (!state.reading) {
        process.nextTick(nReadingNextTick, this);
      }
    }
  }
  return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function (ev, fn) {
  var res = Stream.prototype.removeListener.call(this, ev, fn);
  if (ev === 'readable') {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
Readable.prototype.removeAllListeners = function (ev) {
  var res = Stream.prototype.removeAllListeners.apply(this, arguments);
  if (ev === 'readable' || ev === undefined) {
    // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
  }
  return res;
};
function updateReadableListening(self) {
  var state = self._readableState;
  state.readableListening = self.listenerCount('readable') > 0;
  if (state.resumeScheduled && !state.paused) {
    // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;

    // crude way to check if we should resume
  } else if (self.listenerCount('data') > 0) {
    self.resume();
  }
}
function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    // we flow only if there is no one listening
    // for readable, but we still have to call
    // resume()
    state.flowing = !state.readableListening;
    resume(this, state);
  }
  state.paused = false;
  return this;
};
function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(resume_, stream, state);
  }
}
function resume_(stream, state) {
  debug('resume', state.reading);
  if (!state.reading) {
    stream.read(0);
  }
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (this._readableState.flowing !== false) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  this._readableState.paused = true;
  return this;
};
function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null);
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;
  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }
    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };
  return this;
};
if (typeof Symbol === 'function') {
  Readable.prototype[Symbol.asyncIterator] = function () {
    if (createReadableStreamAsyncIterator === undefined) {
      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    }
    return createReadableStreamAsyncIterator(this);
  };
}
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.flowing;
  },
  set: function set(state) {
    if (this._readableState) {
      this._readableState.flowing = state;
    }
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.length;
  }
});

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = state.buffer.consume(n, state.decoder);
  }
  return ret;
}
function endReadable(stream) {
  var state = stream._readableState;
  debug('endReadable', state.endEmitted);
  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(endReadableNT, state, stream);
  }
}
function endReadableNT(state, stream) {
  debug('endReadableNT', state.endEmitted, state.length);

  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
    if (state.autoDestroy) {
      // In case of duplex streams we need a way to detect
      // if the writable side is ready for autoDestroy as well
      var wState = stream._writableState;
      if (!wState || wState.autoDestroy && wState.finished) {
        stream.destroy();
      }
    }
  }
}
if (typeof Symbol === 'function') {
  Readable.from = function (iterable, opts) {
    if (from === undefined) {
      from = require('./internal/streams/from');
    }
    return from(Readable, iterable, opts);
  };
}
function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":47,"./_stream_duplex":48,"./internal/streams/async_iterator":53,"./internal/streams/buffer_list":54,"./internal/streams/destroy":55,"./internal/streams/from":57,"./internal/streams/state":59,"./internal/streams/stream":60,"_process":150,"buffer":63,"events":100,"inherits":132,"string_decoder/":186,"util":19}],51:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;
var _require$codes = require('../errors').codes,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
  ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;
  if (cb === null) {
    return this.emit('error', new ERR_MULTIPLE_CALLBACK());
  }
  ts.writechunk = null;
  ts.writecb = null;
  if (data != null)
    // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}
function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;
  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}
function prefinish() {
  var _this = this;
  if (typeof this._flush === 'function' && !this._readableState.destroyed) {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}
Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;
  if (ts.writechunk !== null && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};
Transform.prototype._destroy = function (err, cb) {
  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
  });
};
function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null)
    // single equals check for both `null` and `undefined`
    stream.push(data);

  // TODO(BridgeAR): Write a test for these two error cases
  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
  return stream.push(null);
}
},{"../errors":47,"./_stream_duplex":48,"inherits":132}],52:[function(require,module,exports){
(function (process,global){(function (){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/* <replacement> */
function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
  var _this = this;
  this.next = null;
  this.entry = null;
  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/
var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;

/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}).Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'),
  getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes,
  ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
  ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
  ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
  ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
  ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
  ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
  ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {}
function WritableState(options, stream, isDuplex) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream,
  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);

  // if _final has been called
  this.finalCalled = false;

  // drain event flag.
  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // has it been destroyed
  this.destroyed = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function (er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;

  // Should close be emitted on destroy. Defaults to true.
  this.emitClose = options.emitClose !== false;

  // Should .destroy() be called after 'finish' (and potentially 'end')
  this.autoDestroy = !!options.autoDestroy;

  // count buffered requests
  this.bufferedRequestCount = 0;

  // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two
  this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};
(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function writableStateBufferGetter() {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})();

// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.

  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  // Checking for a Stream.Duplex instance is faster here instead of inside
  // the WritableState constructor, at least with V8 6.5
  var isDuplex = this instanceof Duplex;
  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
  this._writableState = new WritableState(options, this, isDuplex);

  // legacy.
  this.writable = true;
  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }
  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function () {
  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
  var er = new ERR_STREAM_WRITE_AFTER_END();
  // TODO: defer error events consistently everywhere, not just the cb
  errorOrDestroy(stream, er);
  process.nextTick(cb, er);
}

// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
  var er;
  if (chunk === null) {
    er = new ERR_STREAM_NULL_VALUES();
  } else if (typeof chunk !== 'string' && !state.objectMode) {
    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
  }
  if (er) {
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
    return false;
  }
  return true;
}
Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;
  var isBuf = !state.objectMode && _isUint8Array(chunk);
  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }
  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};
Writable.prototype.cork = function () {
  this._writableState.corked++;
};
Writable.prototype.uncork = function () {
  var state = this._writableState;
  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }
  return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
});

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);
    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }
  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret) state.needDrain = true;
  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }
  return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    process.nextTick(cb, er);
    // this can emit finish, and it will always happen
    // after error
    process.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    errorOrDestroy(stream, er);
    // this can emit finish, but finish must
    // always follow error
    finishMaybe(stream, state);
  }
}
function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}
function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state) || stream.destroyed;
    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }
    if (sync) {
      process.nextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}
function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}

// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;
  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;
    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }
    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

    // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite
    state.pendingcb++;
    state.lastBufferedRequest = null;
    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }
    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }
    if (entry === null) state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}
Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;
  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }
  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending) endWritable(this, state, cb);
  return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.length;
  }
});
function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;
    if (err) {
      errorOrDestroy(stream, err);
    }
    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}
function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function' && !state.destroyed) {
      state.pendingcb++;
      state.finalCalled = true;
      process.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}
function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    prefinish(stream, state);
    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
      if (state.autoDestroy) {
        // In case of duplex streams we need a way to detect
        // if the readable side is ready for autoDestroy as well
        var rState = stream._readableState;
        if (!rState || rState.autoDestroy && rState.endEmitted) {
          stream.destroy();
        }
      }
    }
  }
  return need;
}
function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
  }
  state.ended = true;
  stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;
  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  // reuse the free corkReq.
  state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }
    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function (err, cb) {
  cb(err);
};
}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"../errors":47,"./_stream_duplex":48,"./internal/streams/destroy":55,"./internal/streams/state":59,"./internal/streams/stream":60,"_process":150,"buffer":63,"inherits":132,"util-deprecate":187}],53:[function(require,module,exports){
(function (process){(function (){
'use strict';

var _Object$setPrototypeO;
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
  return {
    value: value,
    done: done
  };
}
function readAndResolve(iter) {
  var resolve = iter[kLastResolve];
  if (resolve !== null) {
    var data = iter[kStream].read();
    // we defer if data is null
    // we can be expecting either 'end' or
    // 'error'
    if (data !== null) {
      iter[kLastPromise] = null;
      iter[kLastResolve] = null;
      iter[kLastReject] = null;
      resolve(createIterResult(data, false));
    }
  }
}
function onReadable(iter) {
  // we wait for the next tick, because it might
  // emit an error with process.nextTick
  process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
  return function (resolve, reject) {
    lastPromise.then(function () {
      if (iter[kEnded]) {
        resolve(createIterResult(undefined, true));
        return;
      }
      iter[kHandlePromise](resolve, reject);
    }, reject);
  };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
  get stream() {
    return this[kStream];
  },
  next: function next() {
    var _this = this;
    // if we have detected an error in the meanwhile
    // reject straight away
    var error = this[kError];
    if (error !== null) {
      return Promise.reject(error);
    }
    if (this[kEnded]) {
      return Promise.resolve(createIterResult(undefined, true));
    }
    if (this[kStream].destroyed) {
      // We need to defer via nextTick because if .destroy(err) is
      // called, the error will be emitted via nextTick, and
      // we cannot guarantee that there is no error lingering around
      // waiting to be emitted.
      return new Promise(function (resolve, reject) {
        process.nextTick(function () {
          if (_this[kError]) {
            reject(_this[kError]);
          } else {
            resolve(createIterResult(undefined, true));
          }
        });
      });
    }

    // if we have multiple next() calls
    // we will wait for the previous Promise to finish
    // this logic is optimized to support for await loops,
    // where next() is only called once at a time
    var lastPromise = this[kLastPromise];
    var promise;
    if (lastPromise) {
      promise = new Promise(wrapForNext(lastPromise, this));
    } else {
      // fast path needed to support multiple this.push()
      // without triggering the next() queue
      var data = this[kStream].read();
      if (data !== null) {
        return Promise.resolve(createIterResult(data, false));
      }
      promise = new Promise(this[kHandlePromise]);
    }
    this[kLastPromise] = promise;
    return promise;
  }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
  return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
  var _this2 = this;
  // destroy(err, cb) is a private API
  // we can guarantee we have that here, because we control the
  // Readable class this is attached to
  return new Promise(function (resolve, reject) {
    _this2[kStream].destroy(null, function (err) {
      if (err) {
        reject(err);
        return;
      }
      resolve(createIterResult(undefined, true));
    });
  });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
  var _Object$create;
  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
    value: stream,
    writable: true
  }), _defineProperty(_Object$create, kLastResolve, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kLastReject, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kError, {
    value: null,
    writable: true
  }), _defineProperty(_Object$create, kEnded, {
    value: stream._readableState.endEmitted,
    writable: true
  }), _defineProperty(_Object$create, kHandlePromise, {
    value: function value(resolve, reject) {
      var data = iterator[kStream].read();
      if (data) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(data, false));
      } else {
        iterator[kLastResolve] = resolve;
        iterator[kLastReject] = reject;
      }
    },
    writable: true
  }), _Object$create));
  iterator[kLastPromise] = null;
  finished(stream, function (err) {
    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
      var reject = iterator[kLastReject];
      // reject if we are waiting for data in the Promise
      // returned by next() and store the error
      if (reject !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        reject(err);
      }
      iterator[kError] = err;
      return;
    }
    var resolve = iterator[kLastResolve];
    if (resolve !== null) {
      iterator[kLastPromise] = null;
      iterator[kLastResolve] = null;
      iterator[kLastReject] = null;
      resolve(createIterResult(undefined, true));
    }
    iterator[kEnded] = true;
  });
  stream.on('readable', onReadable.bind(null, iterator));
  return iterator;
};
module.exports = createReadableStreamAsyncIterator;
}).call(this)}).call(this,require('_process'))
},{"./end-of-stream":56,"_process":150}],54:[function(require,module,exports){
'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var _require = require('buffer'),
  Buffer = _require.Buffer;
var _require2 = require('util'),
  inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
  Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/function () {
  function BufferList() {
    _classCallCheck(this, BufferList);
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  _createClass(BufferList, [{
    key: "push",
    value: function push(v) {
      var entry = {
        data: v,
        next: null
      };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    }
  }, {
    key: "unshift",
    value: function unshift(v) {
      var entry = {
        data: v,
        next: this.head
      };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    }
  }, {
    key: "shift",
    value: function shift() {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.head = this.tail = null;
      this.length = 0;
    }
  }, {
    key: "join",
    value: function join(s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) ret += s + p.data;
      return ret;
    }
  }, {
    key: "concat",
    value: function concat(n) {
      if (this.length === 0) return Buffer.alloc(0);
      var ret = Buffer.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    }

    // Consumes a specified amount of bytes or characters from the buffered data.
  }, {
    key: "consume",
    value: function consume(n, hasStrings) {
      var ret;
      if (n < this.head.data.length) {
        // `slice` is the same for buffers and strings.
        ret = this.head.data.slice(0, n);
        this.head.data = this.head.data.slice(n);
      } else if (n === this.head.data.length) {
        // First chunk is a perfect match.
        ret = this.shift();
      } else {
        // Result spans more than one buffer.
        ret = hasStrings ? this._getString(n) : this._getBuffer(n);
      }
      return ret;
    }
  }, {
    key: "first",
    value: function first() {
      return this.head.data;
    }

    // Consumes a specified amount of characters from the buffered data.
  }, {
    key: "_getString",
    value: function _getString(n) {
      var p = this.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Consumes a specified amount of bytes from the buffered data.
  }, {
    key: "_getBuffer",
    value: function _getBuffer(n) {
      var ret = Buffer.allocUnsafe(n);
      var p = this.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) this.head = p.next;else this.head = this.tail = null;
          } else {
            this.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      this.length -= c;
      return ret;
    }

    // Make sure the linked list only shows the minimal necessary information.
  }, {
    key: custom,
    value: function value(_, options) {
      return inspect(this, _objectSpread(_objectSpread({}, options), {}, {
        // Only inspect one level.
        depth: 0,
        // It should not recurse.
        customInspect: false
      }));
    }
  }]);
  return BufferList;
}();
},{"buffer":63,"util":19}],55:[function(require,module,exports){
(function (process){(function (){
'use strict';

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;
  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;
  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err) {
      if (!this._writableState) {
        process.nextTick(emitErrorNT, this, err);
      } else if (!this._writableState.errorEmitted) {
        this._writableState.errorEmitted = true;
        process.nextTick(emitErrorNT, this, err);
      }
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }
  this._destroy(err || null, function (err) {
    if (!cb && err) {
      if (!_this._writableState) {
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else if (!_this._writableState.errorEmitted) {
        _this._writableState.errorEmitted = true;
        process.nextTick(emitErrorAndCloseNT, _this, err);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    } else if (cb) {
      process.nextTick(emitCloseNT, _this);
      cb(err);
    } else {
      process.nextTick(emitCloseNT, _this);
    }
  });
  return this;
}
function emitErrorAndCloseNT(self, err) {
  emitErrorNT(self, err);
  emitCloseNT(self);
}
function emitCloseNT(self) {
  if (self._writableState && !self._writableState.emitClose) return;
  if (self._readableState && !self._readableState.emitClose) return;
  self.emit('close');
}
function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }
  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finalCalled = false;
    this._writableState.prefinished = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}
function emitErrorNT(self, err) {
  self.emit('error', err);
}
function errorOrDestroy(stream, err) {
  // We have tests that rely on errors being emitted
  // in the same tick, so changing this is semver major.
  // For now when you opt-in to autoDestroy we allow
  // the error to be emitted nextTick. In a future
  // semver major update we should change the default to this.

  var rState = stream._readableState;
  var wState = stream._writableState;
  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
}
module.exports = {
  destroy: destroy,
  undestroy: undestroy,
  errorOrDestroy: errorOrDestroy
};
}).call(this)}).call(this,require('_process'))
},{"_process":150}],56:[function(require,module,exports){
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    callback.apply(this, args);
  };
}
function noop() {}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;
  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };
  var writableEnded = stream._writableState && stream._writableState.finished;
  var onfinish = function onfinish() {
    writable = false;
    writableEnded = true;
    if (!readable) callback.call(stream);
  };
  var readableEnded = stream._readableState && stream._readableState.endEmitted;
  var onend = function onend() {
    readable = false;
    readableEnded = true;
    if (!writable) callback.call(stream);
  };
  var onerror = function onerror(err) {
    callback.call(stream, err);
  };
  var onclose = function onclose() {
    var err;
    if (readable && !readableEnded) {
      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
    if (writable && !writableEnded) {
      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
      return callback.call(stream, err);
    }
  };
  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };
  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !stream._writableState) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
}
module.exports = eos;
},{"../../../errors":47}],57:[function(require,module,exports){
module.exports = function () {
  throw new Error('Readable.from is not available in the browser')
};

},{}],58:[function(require,module,exports){
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).

'use strict';

var eos;
function once(callback) {
  var called = false;
  return function () {
    if (called) return;
    called = true;
    callback.apply(void 0, arguments);
  };
}
var _require$codes = require('../../../errors').codes,
  ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
  ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
  // Rethrow the error if it exists to avoid swallowing it
  if (err) throw err;
}
function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  if (eos === undefined) eos = require('./end-of-stream');
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;

    // request.destroy just do .end - .abort is what we want
    if (isRequest(stream)) return stream.abort();
    if (typeof stream.destroy === 'function') return stream.destroy();
    callback(err || new ERR_STREAM_DESTROYED('pipe'));
  };
}
function call(fn) {
  fn();
}
function pipe(from, to) {
  return from.pipe(to);
}
function popCallback(streams) {
  if (!streams.length) return noop;
  if (typeof streams[streams.length - 1] !== 'function') return noop;
  return streams.pop();
}
function pipeline() {
  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
    streams[_key] = arguments[_key];
  }
  var callback = popCallback(streams);
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) {
    throw new ERR_MISSING_ARGS('streams');
  }
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
}
module.exports = pipeline;
},{"../../../errors":47,"./end-of-stream":56}],59:[function(require,module,exports){
'use strict';

var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
  if (hwm != null) {
    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
      var name = isDuplex ? duplexKey : 'highWaterMark';
      throw new ERR_INVALID_OPT_VALUE(name, hwm);
    }
    return Math.floor(hwm);
  }

  // Default value
  return state.objectMode ? 16 : 16 * 1024;
}
module.exports = {
  getHighWaterMark: getHighWaterMark
};
},{"../../../errors":47}],60:[function(require,module,exports){
module.exports = require('events').EventEmitter;

},{"events":100}],61:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_duplex.js":48,"./lib/_stream_passthrough.js":49,"./lib/_stream_readable.js":50,"./lib/_stream_transform.js":51,"./lib/_stream_writable.js":52,"./lib/internal/streams/end-of-stream.js":56,"./lib/internal/streams/pipeline.js":58}],62:[function(require,module,exports){
(function (Buffer){(function (){
module.exports = function xor (a, b) {
  var length = Math.min(a.length, b.length)
  var buffer = new Buffer(length)

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i]
  }

  return buffer
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"buffer":63}],63:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":16,"buffer":63,"ieee754":131}],64:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var Transform = require('stream').Transform
var StringDecoder = require('string_decoder').StringDecoder
var inherits = require('inherits')

function CipherBase (hashMode) {
  Transform.call(this)
  this.hashMode = typeof hashMode === 'string'
  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest
  } else {
    this.final = this._finalOrDigest
  }
  if (this._final) {
    this.__final = this._final
    this._final = null
  }
  this._decoder = null
  this._encoding = null
}
inherits(CipherBase, Transform)

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc)
  }

  var outData = this._update(data)
  if (this.hashMode) return this

  if (outputEnc) {
    outData = this._toString(outData, outputEnc)
  }

  return outData
}

CipherBase.prototype.setAutoPadding = function () {}
CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state')
}

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state')
}

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state')
}

CipherBase.prototype._transform = function (data, _, next) {
  var err
  try {
    if (this.hashMode) {
      this._update(data)
    } else {
      this.push(this._update(data))
    }
  } catch (e) {
    err = e
  } finally {
    next(err)
  }
}
CipherBase.prototype._flush = function (done) {
  var err
  try {
    this.push(this.__final())
  } catch (e) {
    err = e
  }

  done(err)
}
CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0)
  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true)
  }
  return outData
}

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc)
    this._encoding = enc
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings')

  var out = this._decoder.write(value)
  if (fin) {
    out += this._decoder.end()
  }

  return out
}

module.exports = CipherBase

},{"inherits":132,"safe-buffer":161,"stream":171,"string_decoder":186}],65:[function(require,module,exports){
(function (Buffer){(function (){
var elliptic = require('elliptic')
var BN = require('bn.js')

module.exports = function createECDH (curve) {
  return new ECDH(curve)
}

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
}

aliases.p224 = aliases.secp224r1
aliases.p256 = aliases.secp256r1 = aliases.prime256v1
aliases.p192 = aliases.secp192r1 = aliases.prime192v1
aliases.p384 = aliases.secp384r1
aliases.p521 = aliases.secp521r1

function ECDH (curve) {
  this.curveType = aliases[curve]
  if (!this.curveType) {
    this.curveType = {
      name: curve
    }
  }
  this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
  this.keys = void 0
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair()
  return this.getPublicKey(enc, format)
}

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8'
  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc)
  }
  var otherPub = this.curve.keyFromPublic(other).getPublic()
  var out = otherPub.mul(this.keys.getPrivate()).getX()
  return formatReturnValue(out, enc, this.curveType.byteLength)
}

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true)
  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7
    } else {
      key[0] = 6
    }
  }
  return formatReturnValue(key, enc)
}

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc)
}

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc)
  }
  this.keys._importPublic(pub)
  return this
}

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8'
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc)
  }

  var _priv = new BN(priv)
  _priv = _priv.toString(16)
  this.keys = this.curve.genKeyPair()
  this.keys._importPrivate(_priv)
  return this
}

function formatReturnValue (bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray()
  }
  var buf = new Buffer(bn)
  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length)
    zeros.fill(0)
    buf = Buffer.concat([zeros, buf])
  }
  if (!enc) {
    return buf
  } else {
    return buf.toString(enc)
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"bn.js":66,"buffer":63,"elliptic":83}],66:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"buffer":19,"dup":15}],67:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var MD5 = require('md5.js')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Base = require('cipher-base')

function Hash (hash) {
  Base.call(this, 'digest')

  this._hash = hash
}

inherits(Hash, Base)

Hash.prototype._update = function (data) {
  this._hash.update(data)
}

Hash.prototype._final = function () {
  return this._hash.digest()
}

module.exports = function createHash (alg) {
  alg = alg.toLowerCase()
  if (alg === 'md5') return new MD5()
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160()

  return new Hash(sha(alg))
}

},{"cipher-base":64,"inherits":132,"md5.js":133,"ripemd160":160,"sha.js":164}],68:[function(require,module,exports){
var MD5 = require('md5.js')

module.exports = function (buffer) {
  return new MD5().update(buffer).digest()
}

},{"md5.js":133}],69:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Legacy = require('./legacy')
var Base = require('cipher-base')
var Buffer = require('safe-buffer').Buffer
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')

var sha = require('sha.js')

var ZEROS = Buffer.alloc(128)

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  this._alg = alg
  this._key = key
  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
    key = hash.update(key).digest()
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }
  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg)
  this._hash.update(ipad)
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.update(data)
}

Hmac.prototype._final = function () {
  var h = this._hash.digest()
  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg)
  return hash.update(this._opad).update(h).digest()
}

module.exports = function createHmac (alg, key) {
  alg = alg.toLowerCase()
  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key)
  }
  if (alg === 'md5') {
    return new Legacy(md5, key)
  }
  return new Hmac(alg, key)
}

},{"./legacy":70,"cipher-base":64,"create-hash/md5":68,"inherits":132,"ripemd160":160,"safe-buffer":161,"sha.js":164}],70:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var Buffer = require('safe-buffer').Buffer

var Base = require('cipher-base')

var ZEROS = Buffer.alloc(128)
var blocksize = 64

function Hmac (alg, key) {
  Base.call(this, 'digest')
  if (typeof key === 'string') {
    key = Buffer.from(key)
  }

  this._alg = alg
  this._key = key

  if (key.length > blocksize) {
    key = alg(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize)
  var opad = this._opad = Buffer.allocUnsafe(blocksize)

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  this._hash = [ipad]
}

inherits(Hmac, Base)

Hmac.prototype._update = function (data) {
  this._hash.push(data)
}

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash))
  return this._alg(Buffer.concat([this._opad, h]))
}
module.exports = Hmac

},{"cipher-base":64,"inherits":132,"safe-buffer":161}],71:[function(require,module,exports){
'use strict'

exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')
exports.createHash = exports.Hash = require('create-hash')
exports.createHmac = exports.Hmac = require('create-hmac')

var algos = require('browserify-sign/algos')
var algoKeys = Object.keys(algos)
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)
exports.getHashes = function () {
  return hashes
}

var p = require('pbkdf2')
exports.pbkdf2 = p.pbkdf2
exports.pbkdf2Sync = p.pbkdf2Sync

var aes = require('browserify-cipher')

exports.Cipher = aes.Cipher
exports.createCipher = aes.createCipher
exports.Cipheriv = aes.Cipheriv
exports.createCipheriv = aes.createCipheriv
exports.Decipher = aes.Decipher
exports.createDecipher = aes.createDecipher
exports.Decipheriv = aes.Decipheriv
exports.createDecipheriv = aes.createDecipheriv
exports.getCiphers = aes.getCiphers
exports.listCiphers = aes.listCiphers

var dh = require('diffie-hellman')

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup
exports.getDiffieHellman = dh.getDiffieHellman
exports.createDiffieHellman = dh.createDiffieHellman
exports.DiffieHellman = dh.DiffieHellman

var sign = require('browserify-sign')

exports.createSign = sign.createSign
exports.Sign = sign.Sign
exports.createVerify = sign.createVerify
exports.Verify = sign.Verify

exports.createECDH = require('create-ecdh')

var publicEncrypt = require('public-encrypt')

exports.publicEncrypt = publicEncrypt.publicEncrypt
exports.privateEncrypt = publicEncrypt.privateEncrypt
exports.publicDecrypt = publicEncrypt.publicDecrypt
exports.privateDecrypt = publicEncrypt.privateDecrypt

// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = require('randomfill')

exports.randomFill = rf.randomFill
exports.randomFillSync = rf.randomFillSync

exports.createCredentials = function () {
  throw new Error([
    'sorry, createCredentials is not implemented yet',
    'we accept pull requests',
    'https://github.com/crypto-browserify/crypto-browserify'
  ].join('\n'))
}

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
}

},{"browserify-cipher":37,"browserify-sign":44,"browserify-sign/algos":41,"create-ecdh":65,"create-hash":67,"create-hmac":69,"diffie-hellman":78,"pbkdf2":144,"public-encrypt":151,"randombytes":158,"randomfill":159}],72:[function(require,module,exports){
'use strict';

exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/cbc":73,"./des/cipher":74,"./des/des":75,"./des/ede":76,"./des/utils":77}],73:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');

  this.iv = new Array(8);
  for (var i = 0; i < this.iv.length; i++)
    this.iv[i] = iv[i];
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);
    this._cbcInit();
  }
  inherits(CBC, Base);

  var keys = Object.keys(proto);
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;

  var iv = state.iv;
  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++)
      iv[i] ^= inp[inOff + i];

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = out[outOff + i];
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++)
      out[outOff + i] ^= iv[i];

    for (var i = 0; i < this.blockSize; i++)
      iv[i] = inp[inOff + i];
  }
};

},{"inherits":132,"minimalistic-assert":136}],74:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');

function Cipher(options) {
  this.options = options;

  this.type = this.options.type;
  this.blockSize = 8;
  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
  this.padding = options.padding !== false
}
module.exports = Cipher;

Cipher.prototype._init = function _init() {
  // Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0)
    return [];

  if (this.type === 'decrypt')
    return this._updateDecrypt(data);
  else
    return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
  for (var i = 0; i < min; i++)
    this.buffer[this.bufferOff + i] = data[off + i];
  this.bufferOff += min;

  // Shift next
  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);
  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = ((this.bufferOff + data.length) / this.blockSize) | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);

    if (this.bufferOff === this.buffer.length)
      outputOff += this._flushBuffer(out, outputOff);
  }

  // Write blocks
  var max = data.length - ((data.length - inputOff) % this.blockSize);
  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);
    outputOff += this.blockSize;
  }

  // Queue rest
  for (; inputOff < data.length; inputOff++, this.bufferOff++)
    this.buffer[this.bufferOff] = data[inputOff];

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;

  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize);

  // TODO(indutny): optimize it, this is far from optimal
  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  }

  // Buffer rest of the input
  inputOff += this._buffer(data, inputOff);

  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer)
    first = this.update(buffer);

  var last;
  if (this.type === 'encrypt')
    last = this._finalEncrypt();
  else
    last = this._finalDecrypt();

  if (first)
    return first.concat(last);
  else
    return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0)
    return false;

  while (off < buffer.length)
    buffer[off++] = 0;

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff))
    return [];

  var out = new Array(this.blockSize);
  this._update(this.buffer, 0, out, 0);
  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);
  this._flushBuffer(out, 0);

  return this._unpad(out);
};

},{"minimalistic-assert":136}],75:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var utils = require('./utils');
var Cipher = require('./cipher');

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);

  var state = new DESState();
  this._desState = state;

  this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [
  1, 1, 2, 2, 2, 2, 2, 2,
  1, 2, 2, 2, 2, 2, 2, 1
];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);

  assert.equal(key.length, this.blockSize, 'Invalid key length');

  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);

  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];
  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;

  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4);

  // Initial Permutation
  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];

  if (this.type === 'encrypt')
    this._encrypt(state, l, r, state.tmp, 0);
  else
    this._decrypt(state, l, r, state.tmp, 0);

  l = state.tmp[0];
  r = state.tmp[1];

  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  if (this.padding === false) {
    return false;
  }

  var value = buffer.length - off;
  for (var i = off; i < buffer.length; i++)
    buffer[i] = value;

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  if (this.padding === false) {
    return buffer;
  }

  var pad = buffer[buffer.length - 1];
  for (var i = buffer.length - pad; i < buffer.length; i++)
    assert.equal(buffer[i], pad);

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart;

  // Apply f() x16 times
  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(r, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  }

  // Reverse Initial Permutation
  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart;

  // Apply f() x16 times
  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1];

    // f(r, k)
    utils.expand(l, state.tmp, 0);

    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);

    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  }

  // Reverse Initial Permutation
  utils.rip(l, r, out, off);
};

},{"./cipher":74,"./utils":77,"inherits":132,"minimalistic-assert":136}],76:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

var Cipher = require('./cipher');
var DES = require('./des');

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');

  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [
      DES.create({ type: 'encrypt', key: k1 }),
      DES.create({ type: 'decrypt', key: k2 }),
      DES.create({ type: 'encrypt', key: k3 })
    ];
  } else {
    this.ciphers = [
      DES.create({ type: 'decrypt', key: k3 }),
      DES.create({ type: 'encrypt', key: k2 }),
      DES.create({ type: 'decrypt', key: k1 })
    ];
  }
}

function EDE(options) {
  Cipher.call(this, options);

  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}
inherits(EDE, Cipher);

module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);
  state.ciphers[1]._update(out, outOff, out, outOff);
  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"./cipher":74,"./des":75,"inherits":132,"minimalistic-assert":136}],77:[function(require,module,exports){
'use strict';

exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res =  (bytes[0 + off] << 24) |
             (bytes[1 + off] << 16) |
             (bytes[2 + off] << 8) |
             bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = (value >>> 16) & 0xff;
  bytes[2 + off] = (value >>> 8) & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
    }
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= (inR >>> (j + i)) & 1;
      outL <<= 1;
      outL |= (inL >>> (j + i)) & 1;
    }
  }
  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= (inR >>> (j + i)) & 1;
      outR <<= 1;
      outR |= (inL >>> (j + i)) & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28
  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= (inR >> (j + i)) & 1;
  }

  // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60
  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inR >> (j + i)) & 1;
    }
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= (inL >> (j + i)) & 1;
    }
  }
  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= (inL >> (j + i)) & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return ((num << shift) & 0xfffffff) | (num >>> (28 - shift));
};

var pc2table = [
  // inL => outL
  14, 11, 17, 4, 27, 23, 25, 0,
  13, 22, 7, 18, 5, 9, 16, 24,
  2, 20, 12, 21, 1, 8, 15, 26,

  // inR => outR
  15, 4, 25, 19, 9, 1, 26, 16,
  5, 11, 23, 8, 12, 7, 17, 0,
  22, 3, 10, 14, 6, 20, 27, 24
];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  var len = pc2table.length >>> 1;
  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= (inL >>> pc2table[i]) & 0x1;
  }
  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= (inR >>> pc2table[i]) & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;

  outL = ((r & 1) << 5) | (r >>> 27);
  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= (r >>> i) & 0x3f;
  }
  for (var i = 11; i >= 3; i -= 4) {
    outR |= (r >>> i) & 0x3f;
    outR <<= 6;
  }
  outR |= ((r & 0x1f) << 1) | (r >>> 31);

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [
  14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1,
  3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8,
  4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7,
  15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13,

  15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14,
  9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5,
  0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2,
  5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9,

  10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10,
  1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1,
  13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7,
  11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12,

  7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3,
  1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9,
  10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8,
  15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14,

  2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1,
  8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6,
  4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13,
  15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3,

  12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5,
  0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8,
  9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10,
  7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13,

  4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10,
  3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6,
  1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7,
  10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12,

  13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4,
  10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2,
  7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13,
  0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11
];

exports.substitute = function substitute(inL, inR) {
  var out = 0;
  for (var i = 0; i < 4; i++) {
    var b = (inL >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  for (var i = 0; i < 4; i++) {
    var b = (inR >>> (18 - i * 6)) & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];

    out <<= 4;
    out |= sb;
  }
  return out >>> 0;
};

var permuteTable = [
  16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22,
  30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7
];

exports.permute = function permute(num) {
  var out = 0;
  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= (num >>> permuteTable[i]) & 0x1;
  }
  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);
  while (str.length < size)
    str = '0' + str;

  var out = [];
  for (var i = 0; i < size; i += group)
    out.push(str.slice(i, i + group));
  return out.join(' ');
};

},{}],78:[function(require,module,exports){
(function (Buffer){(function (){
var generatePrime = require('./lib/generatePrime')
var primes = require('./lib/primes.json')

var DH = require('./lib/dh')

function getDiffieHellman (mod) {
  var prime = new Buffer(primes[mod].prime, 'hex')
  var gen = new Buffer(primes[mod].gen, 'hex')

  return new DH(prime, gen)
}

var ENCODINGS = {
  'binary': true, 'hex': true, 'base64': true
}

function createDiffieHellman (prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator)
  }

  enc = enc || 'binary'
  genc = genc || 'binary'
  generator = generator || new Buffer([2])

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc)
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true)
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc)
  }

  return new DH(prime, generator, true)
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman

}).call(this)}).call(this,require("buffer").Buffer)
},{"./lib/dh":79,"./lib/generatePrime":80,"./lib/primes.json":81,"buffer":63}],79:[function(require,module,exports){
(function (Buffer){(function (){
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }
  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }
  this._priv = new BN(priv);
  return this;
}

var primeCache = {};
function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');
  if (hex in primeCache) {
    return primeCache[hex];
  }
  var error = 0;

  if (prime.isEven() ||
    !primes.simpleSieve ||
    !primes.fermatTest(prime) ||
    !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }
    primeCache[hex] = error;
    return error;
  }
  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }
  var rem;
  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }
      break;
    case '05':
      rem = prime.mod(TEN);
      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }
      break;
    default:
      error += 4;
  }
  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;
  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}
Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function () {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }
    return this._primeCode;
  }
});
DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }
  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();
  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }
  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';
  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }
  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());
  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"./generatePrime":80,"bn.js":82,"buffer":63,"miller-rabin":134,"randombytes":158}],80:[function(require,module,exports){
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null)
    return primes;

  var limit = 0x100000;
  var res = [];
  res[0] = 2;
  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));
    for (var j = 0; j < i && res[j] <= sqrt; j++)
      if (k % res[j] === 0)
        break;

    if (i !== j && res[j] <= sqrt)
      continue;

    res[i++] = k;
  }
  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++)
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }
  gen = new BN(gen);

  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));
    while (num.bitLength() > bits) {
      num.ishrn(1);
    }
    if (num.isEven()) {
      num.iadd(ONE);
    }
    if (!num.testn(1)) {
      num.iadd(TWO);
    }
    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }
    n2 = num.shrn(1);
    if (simpleSieve(n2) && simpleSieve(num) &&
      fermatTest(n2) && fermatTest(num) &&
      millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }

}

},{"bn.js":82,"miller-rabin":134,"randombytes":158}],81:[function(require,module,exports){
module.exports={
    "modp1": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"
    },
    "modp2": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"
    },
    "modp5": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"
    },
    "modp14": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"
    },
    "modp15": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"
    },
    "modp16": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"
    },
    "modp17": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"
    },
    "modp18": {
        "gen": "02",
        "prime": "ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"
    }
}
},{}],82:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"buffer":19,"dup":15}],83:[function(require,module,exports){
'use strict';

var elliptic = exports;

elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');

// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":99,"./elliptic/curve":86,"./elliptic/curves":89,"./elliptic/ec":90,"./elliptic/eddsa":93,"./elliptic/utils":97,"brorand":18}],84:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16);

  // Use Montgomery, when there is no fast reduction for the prime
  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);

  // Useful for many curves
  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red);

  // Curve configuration, optional
  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

  // Temporary arrays
  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);

  this._bitLength = this.n ? this.n.bitLength() : 0;

  // Generalized Greg Maxwell's trick
  var adjustCount = this.n && this.p.div(this.n);
  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}
module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);
  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3;

  // Translate into more windowed form
  var repr = [];
  var j;
  var nafW;
  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;
    for (var l = j + doubles.step - 1; l >= j; l--)
      nafW = (nafW << 1) + naf[l];
    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);
  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i)
        b = b.mixedAdd(doubles.points[j]);
      else if (nafW === -i)
        b = b.mixedAdd(doubles.points[j].neg());
    }
    a = a.add(b);
  }
  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4;

  // Precompute window
  var nafPoints = p._getNAFPoints(w);
  w = nafPoints.wnd;
  var wnd = nafPoints.points;

  // Get NAF form
  var naf = getNAF(k, w, this._bitLength);

  // Add `this`*(N+1) for every w-NAF index
  var acc = this.jpoint(null, null, null);
  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--)
      l++;
    if (i >= 0)
      l++;
    acc = acc.dblp(l);

    if (i < 0)
      break;
    var z = naf[i];
    assert(z !== 0);
    if (p.type === 'affine') {
      // J +- P
      if (z > 0)
        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
      else
        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
    } else {
      // J +- J
      if (z > 0)
        acc = acc.add(wnd[(z - 1) >> 1]);
      else
        acc = acc.add(wnd[(-z - 1) >> 1].neg());
    }
  }
  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
  points,
  coeffs,
  len,
  jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3;

  // Fill all arrays
  var max = 0;
  var i;
  var j;
  var p;
  for (i = 0; i < len; i++) {
    p = points[i];
    var nafPoints = p._getNAFPoints(defW);
    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  }

  // Comb small window NAFs
  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;
    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [
      points[a], /* 1 */
      null, /* 3 */
      null, /* 5 */
      points[b], /* 7 */
    ];

    // Try to avoid Projective points, if possible
    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [
      -3, /* -1 -1 */
      -1, /* -1 0 */
      -5, /* -1 1 */
      -7, /* 0 -1 */
      0, /* 0 0 */
      7, /* 0 1 */
      5, /* 1 -1 */
      1, /* 1 0 */
      3,  /* 1 1 */
    ];

    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);
    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;

      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;
  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;
      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0)
          zero = false;
      }
      if (!zero)
        break;
      k++;
      i--;
    }
    if (i >= 0)
      k++;
    acc = acc.dblp(k);
    if (i < 0)
      break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0)
        continue;
      else if (z > 0)
        p = wnd[j][(z - 1) >> 1];
      else if (z < 0)
        p = wnd[j][(-z - 1) >> 1].neg();

      if (p.type === 'affine')
        acc = acc.mixedAdd(p);
      else
        acc = acc.add(p);
    }
  }
  // Zeroify references
  for (i = 0; i < len; i++)
    wnd[i] = null;

  if (jacobianResult)
    return acc;
  else
    return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq(/*other*/) {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);

  var len = this.p.byteLength();

  // uncompressed, hybrid-odd, hybrid-even
  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
      bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06)
      assert(bytes[bytes.length - 1] % 2 === 0);
    else if (bytes[0] === 0x07)
      assert(bytes[bytes.length - 1] % 2 === 1);

    var res =  this.point(bytes.slice(1, 1 + len),
      bytes.slice(1 + len, 1 + 2 * len));

    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
              bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }
  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);

  if (compact)
    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

  return [ 0x04 ].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed)
    return this;

  var precomputed = {
    doubles: null,
    naf: null,
    beta: null,
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;

  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed)
    return false;

  var doubles = this.precomputed.doubles;
  if (!doubles)
    return false;

  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles)
    return this.precomputed.doubles;

  var doubles = [ this ];
  var acc = this;
  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++)
      acc = acc.dbl();
    doubles.push(acc);
  }
  return {
    step: step,
    points: doubles,
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf)
    return this.precomputed.naf;

  var res = [ this ];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();
  for (var i = 1; i < max; i++)
    res[i] = res[i - 1].add(dbl);
  return {
    wnd: wnd,
    points: res,
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;
  for (var i = 0; i < k; i++)
    r = r.dbl();
  return r;
};

},{"../utils":97,"bn.js":98}],85:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;

  Base.call(this, 'edwards', conf);

  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);

  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA)
    return num.redNeg();
  else
    return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC)
    return num;
  else
    return this.c.redMul(num);
};

// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));

  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red)
    y = y.toRed(this.red);

  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd)
      throw new Error('invalid point');
    else
      return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  if (x.fromRed().isOdd() !== odd)
    x = x.redNeg();

  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity())
    return true;

  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
  point.normalize();

  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));

  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red)
      this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;

    // Use extended coordinates
    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne)
        this.t = this.t.redMul(this.z.redInvm());
    }
  }
}
inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 &&
    (this.y.cmp(this.z) === 0 ||
    (this.zOne && this.y.cmp(this.curve.c) === 0));
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S

  // A = X1^2
  var a = this.x.redSqr();
  // B = Y1^2
  var b = this.y.redSqr();
  // C = 2 * Z1^2
  var c = this.z.redSqr();
  c = c.redIAdd(c);
  // D = a * A
  var d = this.curve._mulA(a);
  // E = (X1 + Y1)^2 - A - B
  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
  // G = D + B
  var g = d.redAdd(b);
  // F = G - C
  var f = g.redSub(c);
  // H = D - B
  var h = d.redSub(b);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S

  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr();
  // C = X1^2
  var c = this.x.redSqr();
  // D = Y1^2
  var d = this.y.redSqr();

  var nx;
  var ny;
  var nz;
  var e;
  var h;
  var j;
  if (this.curve.twisted) {
    // E = a * C
    e = this.curve._mulA(c);
    // F = E + D
    var f = e.redAdd(d);
    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F^2 - 2 * F
      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      h = this.z.redSqr();
      // J = F - 2 * H
      j = f.redSub(h).redISub(h);
      // X3 = (B-C-D)*J
      nx = b.redSub(c).redISub(d).redMul(j);
      // Y3 = F * (E - D)
      ny = f.redMul(e.redSub(d));
      // Z3 = F * J
      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    e = c.redAdd(d);
    // H = (c * Z1)^2
    h = this.curve._mulC(this.z).redSqr();
    // J = E - 2 * H
    j = e.redSub(h).redSub(h);
    // X3 = c * (B - E) * J
    nx = this.curve._mulC(b.redISub(e)).redMul(j);
    // Y3 = c * E * (C - D)
    ny = this.curve._mulC(e).redMul(c.redISub(d));
    // Z3 = E * J
    nz = e.redMul(j);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  // Double in extended coordinates
  if (this.curve.extended)
    return this._extDbl();
  else
    return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M

  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
  // B = (Y1 + X1) * (Y2 + X2)
  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
  // C = T1 * k * T2
  var c = this.t.redMul(this.curve.dd).redMul(p.t);
  // D = Z1 * 2 * Z2
  var d = this.z.redMul(p.z.redAdd(p.z));
  // E = B - A
  var e = b.redSub(a);
  // F = D - C
  var f = d.redSub(c);
  // G = D + C
  var g = d.redAdd(c);
  // H = B + A
  var h = b.redAdd(a);
  // X3 = E * F
  var nx = e.redMul(f);
  // Y3 = G * H
  var ny = g.redMul(h);
  // T3 = E * H
  var nt = e.redMul(h);
  // Z3 = F * G
  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S

  // A = Z1 * Z2
  var a = this.z.redMul(p.z);
  // B = A^2
  var b = a.redSqr();
  // C = X1 * X2
  var c = this.x.redMul(p.x);
  // D = Y1 * Y2
  var d = this.y.redMul(p.y);
  // E = d * C * D
  var e = this.curve.d.redMul(c).redMul(d);
  // F = B - E
  var f = b.redSub(e);
  // G = B + E
  var g = b.redAdd(e);
  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;
  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
    // Z3 = F * G
    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c));
    // Z3 = c * F * G
    nz = this.curve._mulC(f).redMul(g);
  }
  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity())
    return p;
  if (p.isInfinity())
    return this;

  if (this.curve.extended)
    return this._extAdd(p);
  else
    return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne)
    return this;

  // Normalize coordinates
  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t)
    this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(),
    this.y,
    this.z,
    this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other ||
         this.getX().cmp(other.getX()) === 0 &&
         this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":97,"./base":84,"bn.js":98,"inherits":132}],86:[function(require,module,exports){
'use strict';

var curve = exports;

curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":84,"./edwards":85,"./mont":87,"./short":88}],87:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var utils = require('../utils');

function MontCurve(conf) {
  Base.call(this, 'mont', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();

  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');
  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.z.red)
      this.z = this.z.toRed(this.curve.red);
  }
}
inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {
  // No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A

  // A = X1 + Z1
  var a = this.x.redAdd(this.z);
  // AA = A^2
  var aa = a.redSqr();
  // B = X1 - Z1
  var b = this.x.redSub(this.z);
  // BB = B^2
  var bb = b.redSqr();
  // C = AA - BB
  var c = aa.redSub(bb);
  // X3 = AA * BB
  var nx = aa.redMul(bb);
  // Z3 = C * (BB + A24 * C)
  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A

  // A = X2 + Z2
  var a = this.x.redAdd(this.z);
  // B = X2 - Z2
  var b = this.x.redSub(this.z);
  // C = X3 + Z3
  var c = p.x.redAdd(p.z);
  // D = X3 - Z3
  var d = p.x.redSub(p.z);
  // DA = D * A
  var da = d.redMul(a);
  // CB = C * B
  var cb = c.redMul(b);
  // X5 = Z1 * (DA + CB)^2
  var nx = diff.z.redMul(da.redAdd(cb).redSqr());
  // Z5 = X1 * (DA - CB)^2
  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q
  var b = this.curve.point(null, null); // (N / 2) * Q
  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))
    bits.push(t.andln(1));

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c);
      // N * Q = 2 * ((N / 2) * Q + Q))
      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c);
      // N * Q + Q = 2 * ((N / 2) * Q + Q)
      a = a.dbl();
    }
  }
  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();

  return this.x.fromRed();
};

},{"../utils":97,"./base":84,"bn.js":98,"inherits":132}],88:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');

var assert = utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);

  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();

  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

  // If the curve is endomorphic, precalculate beta and lambda
  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
    return;

  // Compute beta and lambda, that lambda * P = (beta * Px; Py)
  var beta;
  var lambda;
  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p);
    // Choose the smallest beta
    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }
  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);
    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  }

  // Get basis vectors, used for balanced length-two representation
  var basis;
  if (conf.basis) {
    basis = conf.basis.map(function(vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16),
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis,
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();

  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);

  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [ l1, l2 ];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

  // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt
  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1);

  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
  var a0;
  var b0;
  // First vector
  var a1;
  var b1;
  // Second vector
  var a2;
  var b2;

  var prevR;
  var i = 0;
  var r;
  var x;
  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }
    prevR = r;

    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }
  a2 = r.neg();
  b2 = x;

  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());
  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  }

  // Normalize signs
  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }
  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [
    { a: a1, b: b1 },
    { a: a2, b: b2 },
  ];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];

  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);

  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b);

  // Calculate answer
  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return { k1: k1, k2: k2 };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red)
    x = x.toRed(this.red);

  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
    throw new Error('invalid point');

  // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd)
    y = y.redNeg();

  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf)
    return true;

  var x = point.x;
  var y = point.y;

  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd =
    function _endoWnafMulAdd(points, coeffs, jacobianResult) {
      var npoints = this._endoWnafT1;
      var ncoeffs = this._endoWnafT2;
      for (var i = 0; i < points.length; i++) {
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();

        if (split.k1.negative) {
          split.k1.ineg();
          p = p.neg(true);
        }
        if (split.k2.negative) {
          split.k2.ineg();
          beta = beta.neg(true);
        }

        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
      }
      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

      // Clean-up references to points and coefficients
      for (var j = 0; j < i * 2; j++) {
        npoints[j] = null;
        ncoeffs[j] = null;
      }
      return res;
    };

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');
  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    // Force redgomery representation when loading from JSON
    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }
    if (!this.x.red)
      this.x = this.x.toRed(this.curve.red);
    if (!this.y.red)
      this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}
inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo)
    return;

  var pre = this.precomputed;
  if (pre && pre.beta)
    return pre.beta;

  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
  if (pre) {
    var curve = this.curve;
    var endoMul = function(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };
    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul),
      },
    };
  }
  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed)
    return [ this.x, this.y ];

  return [ this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1),
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1),
    },
  } ];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string')
    obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2])
    return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [ res ].concat(pre.doubles.points.map(obj2point)),
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [ res ].concat(pre.naf.points.map(obj2point)),
    },
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
      ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf)
    return p;

  // P + O = P
  if (p.inf)
    return this;

  // P + P = 2P
  if (this.eq(p))
    return this.dbl();

  // P + (-P) = O
  if (this.neg().eq(p))
    return this.curve.point(null, null);

  // P + Q = O
  if (this.x.cmp(p.x) === 0)
    return this.curve.point(null, null);

  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0)
    c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf)
    return this;

  // 2P = O
  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0)
    return this.curve.point(null, null);

  var a = this.curve.a;

  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this.isInfinity())
    return this;
  else if (this._hasDoubles(k))
    return this.curve._fixedNafMul(this, k);
  else if (this.curve.endo)
    return this.curve._endoWnafMulAdd([ this ], [ k ]);
  else
    return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [ this, p2 ];
  var coeffs = [ k1, k2 ];
  if (this.curve.endo)
    return this.curve._endoWnafMulAdd(points, coeffs, true);
  else
    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p ||
         this.inf === p.inf &&
             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf)
    return this;

  var res = this.curve.point(this.x, this.y.redNeg());
  if (_precompute && this.precomputed) {
    var pre = this.precomputed;
    var negate = function(p) {
      return p.neg();
    };
    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate),
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate),
      },
    };
  }
  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf)
    return this.curve.jpoint(null, null, null);

  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');
  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }
  if (!this.x.red)
    this.x = this.x.toRed(this.curve.red);
  if (!this.y.red)
    this.y = this.y.toRed(this.curve.red);
  if (!this.z.red)
    this.z = this.z.toRed(this.curve.red);

  this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity())
    return this.curve.point(null, null);

  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);

  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity())
    return p;

  // P + O = P
  if (p.isInfinity())
    return this;

  // 12M + 4S + 7A
  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity())
    return p.toJ();

  // P + O = P
  if (p.isInfinity())
    return this;

  // 8M + 3S + 7A
  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);

  var h = u1.redSub(u2);
  var r = s1.redSub(s2);
  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0)
      return this.curve.jpoint(null, null, null);
    else
      return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);

  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0)
    return this;
  if (this.isInfinity())
    return this;
  if (!pow)
    return this.dbl();

  var i;
  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;
    for (i = 0; i < pow; i++)
      r = r.dbl();
    return r;
  }

  // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A
  var a = this.curve.a;
  var tinv = this.curve.tinv;

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  // Reuse results
  var jyd = jy.redAdd(jy);
  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow)
      jz4 = jz4.redMul(jyd4);

    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity())
    return this;

  if (this.curve.zeroA)
    return this._zeroDbl();
  else if (this.curve.threeA)
    return this._threeDbl();
  else
    return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // T = M ^ 2 - 2*S
    var t = m.redSqr().redISub(s).redISub(s);

    // 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);

    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2*Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A

    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = B^2
    var c = b.redSqr();
    // D = 2 * ((X1 + B)^2 - A - C)
    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d);
    // E = 3 * A
    var e = a.redAdd(a).redIAdd(a);
    // F = E^2
    var f = e.redSqr();

    // 8 * C
    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8);

    // X3 = F - 2 * D
    nx = f.redISub(d).redISub(d);
    // Y3 = E * (D - X3) - 8 * C
    ny = e.redMul(d.redISub(nx)).redISub(c8);
    // Z3 = 2 * Y1 * Z1
    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz;
  // Z = 1
  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A

    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // S = 2 * ((X1 + YY)^2 - XX - YYYY)
    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s);
    // M = 3 * XX + a
    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
    // T = M^2 - 2 * S
    var t = m.redSqr().redISub(s).redISub(s);
    // X3 = T
    nx = t;
    // Y3 = M * (S - T) - 8 * YYYY
    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8);
    // Z3 = 2 * Y1
    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S

    // delta = Z1^2
    var delta = this.z.redSqr();
    // gamma = Y1^2
    var gamma = this.y.redSqr();
    // beta = X1 * gamma
    var beta = this.x.redMul(gamma);
    // alpha = 3 * (X1 - delta) * (X1 + delta)
    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha);
    // X3 = alpha^2 - 8 * beta
    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8);
    // Z3 = (Y1 + Z1)^2 - gamma - delta
    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a;

  // 4M + 6S + 10A
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();

  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();

  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);

  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA)
    return this.dbl().add(this);

  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...

  // XX = X1^2
  var xx = this.x.redSqr();
  // YY = Y1^2
  var yy = this.y.redSqr();
  // ZZ = Z1^2
  var zz = this.z.redSqr();
  // YYYY = YY^2
  var yyyy = yy.redSqr();
  // M = 3 * XX + a * ZZ2; a = 0
  var m = xx.redAdd(xx).redIAdd(xx);
  // MM = M^2
  var mm = m.redSqr();
  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm);
  // EE = E^2
  var ee = e.redSqr();
  // T = 16*YYYY
  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  // U = (M + E)^2 - MM - EE - T
  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
  // X3 = 4 * (X1 * EE - 4 * YY * U)
  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx);
  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  // Z3 = (Z1 + E)^2 - ZZ - EE
  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);

  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine')
    return this.eq(p.toJ());

  if (this === p)
    return true;

  // x1 * z2^2 == x2 * z1^2
  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
    return false;

  // y1 * z2^3 == y2 * z1^3
  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0)
    return true;

  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);
  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0)
      return false;

    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0)
      return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity())
    return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) +
      ' y: ' + this.y.toString(16, 2) +
      ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

},{"../utils":97,"./base":84,"bn.js":98,"inherits":132}],89:[function(require,module,exports){
'use strict';

var curves = exports;

var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');

var assert = utils.assert;

function PresetCurve(options) {
  if (options.type === 'short')
    this.curve = new curve.short(options);
  else if (options.type === 'edwards')
    this.curve = new curve.edwards(options);
  else
    this.curve = new curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;

  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve,
      });
      return curve;
    },
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: [
    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
  ],
});

defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: [
    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
  ],
});

defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: [
    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
  ],
});

defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: [
    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
    '5502f25d bf55296c 3a545e38 72760ab7',
    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
  ],
});

defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: [
    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
    '3fad0761 353c7086 a272c240 88be9476 9fd16650',
  ],
});

defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '9',
  ],
});

defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: [
    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

    // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658',
  ],
});

var pre;
try {
  pre = require('./precomputed/secp256k1');
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,

  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [
    {
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3',
    },
    {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15',
    },
  ],

  gRed: false,
  g: [
    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
    pre,
  ],
});

},{"./curve":86,"./precomputed/secp256k1":96,"./utils":97,"hash.js":118}],90:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;

var KeyPair = require('./key');
var Signature = require('./signature');

function EC(options) {
  if (!(this instanceof EC))
    return new EC(options);

  // Shortcut `elliptic.ec(curve-name)`
  if (typeof options === 'string') {
    assert(Object.prototype.hasOwnProperty.call(curves, options),
      'Unknown curve ' + options);

    options = curves[options];
  }

  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
  if (options instanceof curves.PresetCurve)
    options = { curve: options };

  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g;

  // Point on curve
  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1);

  // Hash for function for DRBG
  this.hash = options.hash || options.curve.hash;
}
module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options)
    options = {};

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray(),
  });

  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));
  for (;;) {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0)
      continue;

    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0)
    msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0)
    return msg.sub(this.n);
  else
    return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }
  if (!options)
    options = {};

  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16));

  // Zero-extend key to provide enough entropy
  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes);

  // Zero-extend nonce to have the same byte size as N
  var nonce = msg.toArray('be', bytes);

  // Instantiate Hmac_DRBG
  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
  });

  // Number of bytes to generate
  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; ; iter++) {
    var k = options.k ?
      options.k(iter) :
      new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
      continue;

    var kp = this.g.mul(k);
    if (kp.isInfinity())
      continue;

    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0)
      continue;

    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0)
      continue;

    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                        (kpX.cmp(r) !== 0 ? 2 : 0);

    // Use complement of `s`, if it is > `n / 2`
    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex');

  // Perform primitive values validation
  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
    return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
    return false;

  // Validate signature
  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity())
      return false;

    return p.getX().umod(this.n).cmp(r) === 0;
  }

  // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K

  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity())
    return false;

  // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`
  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);

  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s;

  // A set LSB signifies that the y-coordinate is odd
  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
    throw new Error('Unable to find sencond key candinate');

  // 1.1. Let x = r + jn.
  if (isSecondKey)
    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
  else
    r = this.curve.pointFromX(r, isYOdd);

  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n);

  // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)
  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null)
    return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;
    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q))
      return i;
  }
  throw new Error('Unable to find valid recovery factor');
};

},{"../curves":89,"../utils":97,"./key":91,"./signature":92,"bn.js":98,"brorand":18,"hmac-drbg":130}],91:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null;

  // KeyPair(ec, { priv: ..., pub: ... })
  if (options.priv)
    this._importPrivate(options.priv, options.privEnc);
  if (options.pub)
    this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair)
    return pub;

  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc,
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair)
    return priv;

  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc,
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();

  if (pub.isInfinity())
    return { result: false, reason: 'Invalid public key' };
  if (!pub.validate())
    return { result: false, reason: 'Public key is not a point' };
  if (!pub.mul(this.ec.curve.n).isInfinity())
    return { result: false, reason: 'Public key * N != O' };

  return { result: true, reason: null };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub)
    this.pub = this.ec.g.mul(this.priv);

  if (!enc)
    return this.pub;

  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex')
    return this.priv.toString(16, 2);
  else
    return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16);

  // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method
  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' ||
               this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }
    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }
  this.pub = this.ec.curve.decodePoint(key, enc);
};

// ECDH
KeyPair.prototype.derive = function derive(pub) {
  if(!pub.validate()) {
    assert(pub.validate(), 'public point not validated');
  }
  return pub.mul(this.priv).getX();
};

// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"../utils":97,"bn.js":98}],92:[function(require,module,exports){
'use strict';

var BN = require('bn.js');

var utils = require('../utils');
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature)
    return options;

  if (this._importDER(options, enc))
    return;

  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined)
    this.recoveryParam = null;
  else
    this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];
  if (!(initial & 0x80)) {
    return initial;
  }
  var octetLen = initial & 0xf;

  // Indefinite length or overflow
  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;
  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  }

  // Leading zeroes
  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;
  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }
  if (i === 0) {
    return buf;
  }
  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();
  if (data[p.place++] !== 0x30) {
    return false;
  }
  var len = getLength(data, p);
  if (len === false) {
    return false;
  }
  if ((len + p.place) !== data.length) {
    return false;
  }
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var rlen = getLength(data, p);
  if (rlen === false) {
    return false;
  }
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;
  if (data[p.place++] !== 0x02) {
    return false;
  }
  var slen = getLength(data, p);
  if (slen === false) {
    return false;
  }
  if (data.length !== slen + p.place) {
    return false;
  }
  var s = data.slice(p.place, slen + p.place);
  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }
  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;

  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }
  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);
  while (--octets) {
    arr.push((len >>> (octets << 3)) & 0xff);
  }
  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray();

  // Pad values
  if (r[0] & 0x80)
    r = [ 0 ].concat(r);
  // Pad values
  if (s[0] & 0x80)
    s = [ 0 ].concat(s);

  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }
  var arr = [ 0x02 ];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [ 0x30 ];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

},{"../utils":97,"bn.js":98}],93:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');

  if (!(this instanceof EDDSA))
    return new EDDSA(curve);

  curve = curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);

  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;

/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/
EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)
    .mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });
};

/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/
EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();
  for (var i = 0; i < arguments.length; i++)
    hash.update(arguments[i]);
  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature)
    return sig;
  return new Signature(this, sig);
};

/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/
EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);

  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;

  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

},{"../curves":89,"../utils":97,"./key":94,"./signature":95,"hash.js":118}],94:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;

/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/
function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub))
    this._pub = params.pub;
  else
    this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair)
    return pub;
  return new KeyPair(eddsa, { pub: pub });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair)
    return secret;
  return new KeyPair(eddsa, { secret: secret });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});

cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes)
    return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});

cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;

  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;

  return a;
});

cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});

cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});

cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

},{"../utils":97}],95:[function(require,module,exports){
'use strict';

var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;

/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/
function Signature(eddsa, sig) {
  this.eddsa = eddsa;

  if (typeof sig !== 'object')
    sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength),
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');

  if (eddsa.isPoint(sig.R))
    this._R = sig.R;
  if (sig.S instanceof BN)
    this._S = sig.S;

  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});

cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});

cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});

cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

},{"../utils":97,"bn.js":98}],96:[function(require,module,exports){
module.exports = {
  doubles: {
    step: 4,
    points: [
      [
        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',
      ],
      [
        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',
      ],
      [
        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',
      ],
      [
        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',
      ],
      [
        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',
      ],
      [
        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',
      ],
      [
        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',
      ],
      [
        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',
      ],
      [
        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',
      ],
      [
        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',
      ],
      [
        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',
      ],
      [
        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',
      ],
      [
        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',
      ],
      [
        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',
      ],
      [
        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',
      ],
      [
        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',
      ],
      [
        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',
      ],
      [
        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',
      ],
      [
        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',
      ],
      [
        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',
      ],
      [
        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',
      ],
      [
        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',
      ],
      [
        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',
      ],
      [
        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',
      ],
      [
        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',
      ],
      [
        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',
      ],
      [
        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',
      ],
      [
        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',
      ],
      [
        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',
      ],
      [
        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',
      ],
      [
        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',
      ],
      [
        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',
      ],
      [
        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',
      ],
      [
        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',
      ],
      [
        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',
      ],
      [
        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',
      ],
      [
        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',
      ],
      [
        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',
      ],
      [
        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',
      ],
      [
        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',
      ],
      [
        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',
      ],
      [
        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',
      ],
      [
        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',
      ],
      [
        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',
      ],
      [
        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',
      ],
      [
        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',
      ],
      [
        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',
      ],
      [
        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',
      ],
      [
        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',
      ],
      [
        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',
      ],
      [
        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',
      ],
      [
        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',
      ],
      [
        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',
      ],
      [
        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',
      ],
      [
        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',
      ],
      [
        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',
      ],
      [
        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',
      ],
      [
        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',
      ],
      [
        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',
      ],
      [
        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',
      ],
      [
        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',
      ],
      [
        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',
      ],
      [
        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',
      ],
      [
        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',
      ],
      [
        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',
      ],
    ],
  },
  naf: {
    wnd: 7,
    points: [
      [
        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',
      ],
      [
        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',
      ],
      [
        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',
      ],
      [
        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',
      ],
      [
        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',
      ],
      [
        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',
      ],
      [
        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',
      ],
      [
        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',
      ],
      [
        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',
      ],
      [
        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',
      ],
      [
        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',
      ],
      [
        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',
      ],
      [
        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',
      ],
      [
        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',
      ],
      [
        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',
      ],
      [
        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',
      ],
      [
        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',
      ],
      [
        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',
      ],
      [
        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',
      ],
      [
        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',
      ],
      [
        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',
      ],
      [
        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',
      ],
      [
        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',
      ],
      [
        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',
      ],
      [
        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',
      ],
      [
        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',
      ],
      [
        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',
      ],
      [
        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',
      ],
      [
        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',
      ],
      [
        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',
      ],
      [
        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',
      ],
      [
        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',
      ],
      [
        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',
      ],
      [
        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',
      ],
      [
        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',
      ],
      [
        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',
      ],
      [
        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',
      ],
      [
        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',
      ],
      [
        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',
      ],
      [
        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',
      ],
      [
        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',
      ],
      [
        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',
      ],
      [
        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',
      ],
      [
        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',
      ],
      [
        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',
      ],
      [
        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',
      ],
      [
        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',
      ],
      [
        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',
      ],
      [
        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',
      ],
      [
        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',
      ],
      [
        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',
      ],
      [
        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',
      ],
      [
        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',
      ],
      [
        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',
      ],
      [
        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',
      ],
      [
        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',
      ],
      [
        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',
      ],
      [
        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',
      ],
      [
        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',
      ],
      [
        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',
      ],
      [
        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',
      ],
      [
        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',
      ],
      [
        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',
      ],
      [
        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',
      ],
      [
        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',
      ],
      [
        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',
      ],
      [
        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',
      ],
      [
        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',
      ],
      [
        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',
      ],
      [
        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',
      ],
      [
        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',
      ],
      [
        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',
      ],
      [
        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',
      ],
      [
        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',
      ],
      [
        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',
      ],
      [
        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',
      ],
      [
        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',
      ],
      [
        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',
      ],
      [
        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',
      ],
      [
        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',
      ],
      [
        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',
      ],
      [
        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',
      ],
      [
        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',
      ],
      [
        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',
      ],
      [
        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',
      ],
      [
        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',
      ],
      [
        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',
      ],
      [
        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',
      ],
      [
        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',
      ],
      [
        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',
      ],
      [
        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',
      ],
      [
        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',
      ],
      [
        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',
      ],
      [
        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',
      ],
      [
        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',
      ],
      [
        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',
      ],
      [
        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',
      ],
      [
        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',
      ],
      [
        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',
      ],
      [
        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',
      ],
      [
        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',
      ],
      [
        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',
      ],
      [
        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',
      ],
      [
        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',
      ],
      [
        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',
      ],
      [
        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',
      ],
      [
        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',
      ],
      [
        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',
      ],
      [
        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',
      ],
      [
        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',
      ],
      [
        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',
      ],
      [
        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',
      ],
      [
        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',
      ],
      [
        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',
      ],
      [
        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',
      ],
      [
        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',
      ],
      [
        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',
      ],
      [
        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',
      ],
      [
        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',
      ],
      [
        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',
      ],
      [
        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',
      ],
      [
        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',
      ],
      [
        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',
      ],
      [
        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',
      ],
      [
        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',
      ],
      [
        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',
      ],
      [
        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',
      ],
    ],
  },
};

},{}],97:[function(require,module,exports){
'use strict';

var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;

// Represent num in a w-NAF form
function getNAF(num, w, bits) {
  var naf = new Array(Math.max(num.bitLength(), bits) + 1);
  naf.fill(0);

  var ws = 1 << (w + 1);
  var k = num.clone();

  for (var i = 0; i < naf.length; i++) {
    var z;
    var mod = k.andln(ws - 1);
    if (k.isOdd()) {
      if (mod > (ws >> 1) - 1)
        z = (ws >> 1) - mod;
      else
        z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf[i] = z;
    k.iushrn(1);
  }

  return naf;
}
utils.getNAF = getNAF;

// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
  var jsf = [
    [],
    [],
  ];

  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;
  var m8;
  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = (k1.andln(3) + d1) & 3;
    var m24 = (k2.andln(3) + d2) & 3;
    if (m14 === 3)
      m14 = -1;
    if (m24 === 3)
      m24 = -1;
    var u1;
    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      m8 = (k1.andln(7) + d1) & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2)
        u1 = -m14;
      else
        u1 = m14;
    }
    jsf[0].push(u1);

    var u2;
    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      m8 = (k2.andln(7) + d2) & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2)
        u2 = -m24;
      else
        u2 = m24;
    }
    jsf[1].push(u2);

    // Second phase
    if (2 * d1 === u1 + 1)
      d1 = 1 - d1;
    if (2 * d2 === u2 + 1)
      d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}
utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;
  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] :
      this[key] = computer.call(this);
  };
}
utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
    bytes;
}
utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;


},{"bn.js":98,"minimalistic-assert":136,"minimalistic-crypto-utils":137}],98:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"buffer":19,"dup":15}],99:[function(require,module,exports){
module.exports={
  "_from": "elliptic@^6.5.3",
  "_id": "elliptic@6.5.4",
  "_inBundle": false,
  "_integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
  "_location": "/elliptic",
  "_phantomChildren": {},
  "_requested": {
    "type": "range",
    "registry": true,
    "raw": "elliptic@^6.5.3",
    "name": "elliptic",
    "escapedName": "elliptic",
    "rawSpec": "^6.5.3",
    "saveSpec": null,
    "fetchSpec": "^6.5.3"
  },
  "_requiredBy": [
    "/browserify-sign",
    "/create-ecdh"
  ],
  "_resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
  "_shasum": "da37cebd31e79a1367e941b592ed1fbebd58abbb",
  "_spec": "elliptic@^6.5.3",
  "_where": "D:\\hardDocuments\\programmingHard\\git\\jtank4.github.io\\pagesThatUseNpmModules\\node_modules\\browserify-sign",
  "author": {
    "name": "Fedor Indutny",
    "email": "fedor@indutny.com"
  },
  "bugs": {
    "url": "https://github.com/indutny/elliptic/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.11.9",
    "brorand": "^1.1.0",
    "hash.js": "^1.0.0",
    "hmac-drbg": "^1.0.1",
    "inherits": "^2.0.4",
    "minimalistic-assert": "^1.0.1",
    "minimalistic-crypto-utils": "^1.0.1"
  },
  "deprecated": false,
  "description": "EC cryptography",
  "devDependencies": {
    "brfs": "^2.0.2",
    "coveralls": "^3.1.0",
    "eslint": "^7.6.0",
    "grunt": "^1.2.1",
    "grunt-browserify": "^5.3.0",
    "grunt-cli": "^1.3.2",
    "grunt-contrib-connect": "^3.0.0",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-uglify": "^5.0.0",
    "grunt-mocha-istanbul": "^5.0.2",
    "grunt-saucelabs": "^9.0.1",
    "istanbul": "^0.4.5",
    "mocha": "^8.0.1"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/indutny/elliptic",
  "keywords": [
    "EC",
    "Elliptic",
    "curve",
    "Cryptography"
  ],
  "license": "MIT",
  "main": "lib/elliptic.js",
  "name": "elliptic",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/indutny/elliptic.git"
  },
  "scripts": {
    "lint": "eslint lib test",
    "lint:fix": "npm run lint -- --fix",
    "test": "npm run lint && npm run unit",
    "unit": "istanbul test _mocha --reporter=spec test/index.js",
    "version": "grunt dist && git add dist/"
  },
  "version": "6.5.4"
}

},{}],100:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    };

    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

},{}],101:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer
var MD5 = require('md5.js')

/* eslint-disable camelcase */
function EVP_BytesToKey (password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary')
  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary')
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length')
  }

  var keyLen = keyBits / 8
  var key = Buffer.alloc(keyLen)
  var iv = Buffer.alloc(ivLen || 0)
  var tmp = Buffer.alloc(0)

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5()
    hash.update(tmp)
    hash.update(password)
    if (salt) hash.update(salt)
    tmp = hash.digest()

    var used = 0

    if (keyLen > 0) {
      var keyStart = key.length - keyLen
      used = Math.min(keyLen, tmp.length)
      tmp.copy(key, keyStart, 0, used)
      keyLen -= used
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen
      var length = Math.min(ivLen, tmp.length - used)
      tmp.copy(iv, ivStart, used, used + length)
      ivLen -= length
    }
  }

  tmp.fill(0)
  return { key: key, iv: iv }
}

module.exports = EVP_BytesToKey

},{"md5.js":133,"safe-buffer":161}],102:[function(require,module,exports){
'use strict'
var Buffer = require('safe-buffer').Buffer
var Transform = require('readable-stream').Transform
var inherits = require('inherits')

function throwIfNotStringOrBuffer (val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer')
  }
}

function HashBase (blockSize) {
  Transform.call(this)

  this._block = Buffer.allocUnsafe(blockSize)
  this._blockSize = blockSize
  this._blockOffset = 0
  this._length = [0, 0, 0, 0]

  this._finalized = false
}

inherits(HashBase, Transform)

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null
  try {
    this.update(chunk, encoding)
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype._flush = function (callback) {
  var error = null
  try {
    this.push(this.digest())
  } catch (err) {
    error = err
  }

  callback(error)
}

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data')
  if (this._finalized) throw new Error('Digest already called')
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)

  // consume data
  var block = this._block
  var offset = 0
  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++]
    this._update()
    this._blockOffset = 0
  }
  while (offset < data.length) block[this._blockOffset++] = data[offset++]

  // update length
  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry
    carry = (this._length[j] / 0x0100000000) | 0
    if (carry > 0) this._length[j] -= 0x0100000000 * carry
  }

  return this
}

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented')
}

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called')
  this._finalized = true

  var digest = this._digest()
  if (encoding !== undefined) digest = digest.toString(encoding)

  // reset state
  this._block.fill(0)
  this._blockOffset = 0
  for (var i = 0; i < 4; ++i) this._length[i] = 0

  return digest
}

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented')
}

module.exports = HashBase

},{"inherits":132,"readable-stream":117,"safe-buffer":161}],103:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47}],104:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./_stream_readable":106,"./_stream_writable":108,"_process":150,"dup":48,"inherits":132}],105:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_stream_transform":107,"dup":49,"inherits":132}],106:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"../errors":103,"./_stream_duplex":104,"./internal/streams/async_iterator":109,"./internal/streams/buffer_list":110,"./internal/streams/destroy":111,"./internal/streams/from":113,"./internal/streams/state":115,"./internal/streams/stream":116,"_process":150,"buffer":63,"dup":50,"events":100,"inherits":132,"string_decoder/":186,"util":19}],107:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../errors":103,"./_stream_duplex":104,"dup":51,"inherits":132}],108:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":103,"./_stream_duplex":104,"./internal/streams/destroy":111,"./internal/streams/state":115,"./internal/streams/stream":116,"_process":150,"buffer":63,"dup":52,"inherits":132,"util-deprecate":187}],109:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./end-of-stream":112,"_process":150,"dup":53}],110:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"buffer":63,"dup":54,"util":19}],111:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"_process":150,"dup":55}],112:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"../../../errors":103,"dup":56}],113:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],114:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":103,"./end-of-stream":112,"dup":58}],115:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":103,"dup":59}],116:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"dup":60,"events":100}],117:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":104,"./lib/_stream_passthrough.js":105,"./lib/_stream_readable.js":106,"./lib/_stream_transform.js":107,"./lib/_stream_writable.js":108,"./lib/internal/streams/end-of-stream.js":112,"./lib/internal/streams/pipeline.js":114,"dup":61}],118:[function(require,module,exports){
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/common":119,"./hash/hmac":120,"./hash/ripemd":121,"./hash/sha":122,"./hash/utils":129}],119:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":129,"minimalistic-assert":136}],120:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":129,"minimalistic-assert":136}],121:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./common":119,"./utils":129}],122:[function(require,module,exports){
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":123,"./sha/224":124,"./sha/256":125,"./sha/384":126,"./sha/512":127}],123:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":119,"../utils":129,"./common":128}],124:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":129,"./256":125}],125:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../common":119,"../utils":129,"./common":128,"minimalistic-assert":136}],126:[function(require,module,exports){
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":129,"./512":127}],127:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../common":119,"../utils":129,"minimalistic-assert":136}],128:[function(require,module,exports){
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":129}],129:[function(require,module,exports){
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"inherits":132,"minimalistic-assert":136}],130:[function(require,module,exports){
'use strict';

var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG))
    return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;

  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;

  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;

  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
  this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);

  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);
  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);
  this._reseed = 1;
  this.reseedInterval = 0x1000000000000;  // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac()
                 .update(this.V)
                 .update([ 0x00 ]);
  if (seed)
    kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed)
    return;

  this.K = this._hmac()
               .update(this.V)
               .update([ 0x01 ])
               .update(seed)
               .digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);

  assert(entropy.length >= (this.minEntropy / 8),
         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));
  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval)
    throw new Error('Reseed is required');

  // Optional encoding
  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  }

  // Optional additional data
  if (add) {
    add = utils.toArray(add, addEnc || 'hex');
    this._update(add);
  }

  var temp = [];
  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);
  this._update(add);
  this._reseed++;
  return utils.encode(res, enc);
};

},{"hash.js":118,"minimalistic-assert":136,"minimalistic-crypto-utils":137}],131:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],132:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],133:[function(require,module,exports){
'use strict'
var inherits = require('inherits')
var HashBase = require('hash-base')
var Buffer = require('safe-buffer').Buffer

var ARRAY16 = new Array(16)

function MD5 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
}

inherits(MD5, HashBase)

MD5.prototype._update = function () {
  var M = ARRAY16
  for (var i = 0; i < 16; ++i) M[i] = this._block.readInt32LE(i * 4)

  var a = this._a
  var b = this._b
  var c = this._c
  var d = this._d

  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7)
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12)
  c = fnF(c, d, a, b, M[2], 0x242070db, 17)
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22)
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7)
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12)
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17)
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22)
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7)
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12)
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17)
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22)
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7)
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12)
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17)
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22)

  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5)
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9)
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14)
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20)
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5)
  d = fnG(d, a, b, c, M[10], 0x02441453, 9)
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14)
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20)
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5)
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9)
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14)
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20)
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5)
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9)
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14)
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20)

  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4)
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11)
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16)
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23)
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4)
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11)
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16)
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23)
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4)
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11)
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16)
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23)
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4)
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11)
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16)
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23)

  a = fnI(a, b, c, d, M[0], 0xf4292244, 6)
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10)
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15)
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21)
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6)
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10)
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15)
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21)
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6)
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10)
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15)
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21)
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6)
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10)
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15)
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21)

  this._a = (this._a + a) | 0
  this._b = (this._b + b) | 0
  this._c = (this._c + c) | 0
  this._d = (this._d + d) | 0
}

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.allocUnsafe(16)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fnF (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + b) | 0
}

function fnG (a, b, c, d, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + b) | 0
}

function fnH (a, b, c, d, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + b) | 0
}

function fnI (a, b, c, d, m, k, s) {
  return (rotl((a + ((c ^ (b | (~d)))) + m + k) | 0, s) + b) | 0
}

module.exports = MD5

},{"hash-base":102,"inherits":132,"safe-buffer":161}],134:[function(require,module,exports){
var bn = require('bn.js');
var brorand = require('brorand');

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8);

  // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.
  do
    var a = new bn(this.rand.generate(min_bytes));
  while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  var prime = true;
  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);
    if (cb)
      cb(a);

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return false;
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s)
      return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);

  if (!k)
    k = Math.max(1, (len / 48) | 0);

  // Find d and s, (n - 1) = (2 ^ s) * d;
  var n1 = n.subn(1);
  for (var s = 0; !n1.testn(s); s++) {}
  var d = n.shrn(s);

  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0)
      return g;

    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0)
      continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();

      if (x.cmp(rone) === 0)
        return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0)
        break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

},{"bn.js":135,"brorand":18}],135:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"buffer":19,"dup":15}],136:[function(require,module,exports){
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],137:[function(require,module,exports){
'use strict';

var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
    return res;
  }
  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0)
      msg = '0' + msg;
    for (var i = 0; i < msg.length; i += 2)
      res.push(parseInt(msg[i] + msg[i + 1], 16));
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi)
        res.push(hi, lo);
      else
        res.push(lo);
    }
  }
  return res;
}
utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
utils.zero2 = zero2;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex')
    return toHex(arr);
  else
    return arr;
};

},{}],138:[function(require,module,exports){
(function (global){(function (){
"use strict";

// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
}

var globalObject = getGlobal();

module.exports = exports = globalObject.fetch;

// Needed for TypeScript and Webpack.
if (globalObject.fetch) {
	exports.default = globalObject.fetch.bind(globalObject);
}

exports.Headers = globalObject.Headers;
exports.Request = globalObject.Request;
exports.Response = globalObject.Response;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],139:[function(require,module,exports){
module.exports={"2.16.840.1.101.3.4.1.1": "aes-128-ecb",
"2.16.840.1.101.3.4.1.2": "aes-128-cbc",
"2.16.840.1.101.3.4.1.3": "aes-128-ofb",
"2.16.840.1.101.3.4.1.4": "aes-128-cfb",
"2.16.840.1.101.3.4.1.21": "aes-192-ecb",
"2.16.840.1.101.3.4.1.22": "aes-192-cbc",
"2.16.840.1.101.3.4.1.23": "aes-192-ofb",
"2.16.840.1.101.3.4.1.24": "aes-192-cfb",
"2.16.840.1.101.3.4.1.41": "aes-256-ecb",
"2.16.840.1.101.3.4.1.42": "aes-256-cbc",
"2.16.840.1.101.3.4.1.43": "aes-256-ofb",
"2.16.840.1.101.3.4.1.44": "aes-256-cfb"
}
},{}],140:[function(require,module,exports){
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict'

var asn1 = require('asn1.js')

exports.certificate = require('./certificate')

var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('modulus').int(),
    this.key('publicExponent').int(),
    this.key('privateExponent').int(),
    this.key('prime1').int(),
    this.key('prime2').int(),
    this.key('exponent1').int(),
    this.key('exponent2').int(),
    this.key('coefficient').int()
  )
})
exports.RSAPrivateKey = RSAPrivateKey

var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(
    this.key('modulus').int(),
    this.key('publicExponent').int()
  )
})
exports.RSAPublicKey = RSAPublicKey

var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})
exports.PublicKey = PublicKey

var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('none').null_().optional(),
    this.key('curve').objid().optional(),
    this.key('params').seq().obj(
      this.key('p').int(),
      this.key('q').int(),
      this.key('g').int()
    ).optional()
  )
})

var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPrivateKey').octstr()
  )
})
exports.PrivateKey = PrivateKeyInfo
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').seq().obj(
      this.key('id').objid(),
      this.key('decrypt').seq().obj(
        this.key('kde').seq().obj(
          this.key('id').objid(),
          this.key('kdeparams').seq().obj(
            this.key('salt').octstr(),
            this.key('iters').int()
          )
        ),
        this.key('cipher').seq().obj(
          this.key('algo').objid(),
          this.key('iv').octstr()
        )
      )
    ),
    this.key('subjectPrivateKey').octstr()
  )
})

exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo

var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('p').int(),
    this.key('q').int(),
    this.key('g').int(),
    this.key('pub_key').int(),
    this.key('priv_key').int()
  )
})
exports.DSAPrivateKey = DSAPrivateKey

exports.DSAparam = asn1.define('DSAparam', function () {
  this.int()
})

var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(
    this.key('version').int(),
    this.key('privateKey').octstr(),
    this.key('parameters').optional().explicit(0).use(ECParameters),
    this.key('publicKey').optional().explicit(1).bitstr()
  )
})
exports.ECPrivateKey = ECPrivateKey

var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  })
})

exports.signature = asn1.define('signature', function () {
  this.seq().obj(
    this.key('r').int(),
    this.key('s').int()
  )
})

},{"./certificate":141,"asn1.js":1}],141:[function(require,module,exports){
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen

'use strict'

var asn = require('asn1.js')

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  })
})

var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(
    this.key('type').objid(),
    this.key('value').any()
  )
})

var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(
    this.key('algorithm').objid(),
    this.key('parameters').optional(),
    this.key('curve').objid().optional()
  )
})

var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(
    this.key('algorithm').use(AlgorithmIdentifier),
    this.key('subjectPublicKey').bitstr()
  )
})

var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue)
})

var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName)
})

var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  })
})

var Validity = asn.define('Validity', function () {
  this.seq().obj(
    this.key('notBefore').use(Time),
    this.key('notAfter').use(Time)
  )
})

var Extension = asn.define('Extension', function () {
  this.seq().obj(
    this.key('extnID').objid(),
    this.key('critical').bool().def(false),
    this.key('extnValue').octstr()
  )
})

var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(
    this.key('version').explicit(0).int().optional(),
    this.key('serialNumber').int(),
    this.key('signature').use(AlgorithmIdentifier),
    this.key('issuer').use(Name),
    this.key('validity').use(Validity),
    this.key('subject').use(Name),
    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),
    this.key('issuerUniqueID').implicit(1).bitstr().optional(),
    this.key('subjectUniqueID').implicit(2).bitstr().optional(),
    this.key('extensions').explicit(3).seqof(Extension).optional()
  )
})

var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(
    this.key('tbsCertificate').use(TBSCertificate),
    this.key('signatureAlgorithm').use(AlgorithmIdentifier),
    this.key('signatureValue').bitstr()
  )
})

module.exports = X509Certificate

},{"asn1.js":1}],142:[function(require,module,exports){
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m
var evp = require('evp_bytestokey')
var ciphers = require('browserify-aes')
var Buffer = require('safe-buffer').Buffer
module.exports = function (okey, password) {
  var key = okey.toString()
  var match = key.match(findProc)
  var decrypted
  if (!match) {
    var match2 = key.match(fullRegex)
    decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64')
  } else {
    var suite = 'aes' + match[1]
    var iv = Buffer.from(match[2], 'hex')
    var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64')
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key
    var out = []
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)
    out.push(cipher.update(cipherText))
    out.push(cipher.final())
    decrypted = Buffer.concat(out)
  }
  var tag = key.match(startRegex)[1]
  return {
    tag: tag,
    data: decrypted
  }
}

},{"browserify-aes":22,"evp_bytestokey":101,"safe-buffer":161}],143:[function(require,module,exports){
var asn1 = require('./asn1')
var aesid = require('./aesid.json')
var fixProc = require('./fixProc')
var ciphers = require('browserify-aes')
var compat = require('pbkdf2')
var Buffer = require('safe-buffer').Buffer
module.exports = parseKeys

function parseKeys (buffer) {
  var password
  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase
    buffer = buffer.key
  }
  if (typeof buffer === 'string') {
    buffer = Buffer.from(buffer)
  }

  var stripped = fixProc(buffer, password)

  var type = stripped.tag
  var data = stripped.data
  var subtype, ndata
  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo
      // falls through
    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der')
      }
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')
        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey
          return {
            type: 'ec',
            data: ndata
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der')
      data = decrypt(data, password)
      // falls through
    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der')
      subtype = ndata.algorithm.algorithm.join('.')
      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')
        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          }
        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          }
        default: throw new Error('unknown key id ' + subtype)
      }
      // throw new Error('unknown key type ' + type)
    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der')
    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der')
    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      }
    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der')
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      }
    default: throw new Error('unknown key type ' + type)
  }
}
parseKeys.signature = asn1.signature
function decrypt (data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]
  var iv = data.algorithm.decrypt.cipher.iv
  var cipherText = data.subjectPrivateKey
  var keylen = parseInt(algo.split('-')[1], 10) / 8
  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')
  var cipher = ciphers.createDecipheriv(algo, key, iv)
  var out = []
  out.push(cipher.update(cipherText))
  out.push(cipher.final())
  return Buffer.concat(out)
}

},{"./aesid.json":139,"./asn1":140,"./fixProc":142,"browserify-aes":22,"pbkdf2":144,"safe-buffer":161}],144:[function(require,module,exports){
exports.pbkdf2 = require('./lib/async')
exports.pbkdf2Sync = require('./lib/sync')

},{"./lib/async":145,"./lib/sync":148}],145:[function(require,module,exports){
(function (global){(function (){
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var sync = require('./sync')
var toBuffer = require('./to-buffer')

var ZERO_BUF
var subtle = global.crypto && global.crypto.subtle
var toBrowser = {
  sha: 'SHA-1',
  'sha-1': 'SHA-1',
  sha1: 'SHA-1',
  sha256: 'SHA-256',
  'sha-256': 'SHA-256',
  sha384: 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  sha512: 'SHA-512'
}
var checks = []
function checkNative (algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false)
  }
  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false)
  }
  if (checks[algo] !== undefined) {
    return checks[algo]
  }
  ZERO_BUF = ZERO_BUF || Buffer.alloc(8)
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo)
    .then(function () {
      return true
    }).catch(function () {
      return false
    })
  checks[algo] = prom
  return prom
}
var nextTick
function getNextTick () {
  if (nextTick) {
    return nextTick
  }
  if (global.process && global.process.nextTick) {
    nextTick = global.process.nextTick
  } else if (global.queueMicrotask) {
    nextTick = global.queueMicrotask
  } else if (global.setImmediate) {
    nextTick = global.setImmediate
  } else {
    nextTick = global.setTimeout
  }
  return nextTick
}
function browserPbkdf2 (password, salt, iterations, length, algo) {
  return subtle.importKey(
    'raw', password, { name: 'PBKDF2' }, false, ['deriveBits']
  ).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3)
  }).then(function (res) {
    return Buffer.from(res)
  })
}

function resolvePromise (promise, callback) {
  promise.then(function (out) {
    getNextTick()(function () {
      callback(null, out)
    })
  }, function (e) {
    getNextTick()(function () {
      callback(e)
    })
  })
}
module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest
    digest = undefined
  }

  digest = digest || 'sha1'
  var algo = toBrowser[digest.toLowerCase()]

  if (!algo || typeof global.Promise !== 'function') {
    getNextTick()(function () {
      var out
      try {
        out = sync(password, salt, iterations, keylen, digest)
      } catch (e) {
        return callback(e)
      }
      callback(null, out)
    })
    return
  }

  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2')

  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo)

    return sync(password, salt, iterations, keylen, digest)
  }), callback)
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./default-encoding":146,"./precondition":147,"./sync":148,"./to-buffer":149,"safe-buffer":161}],146:[function(require,module,exports){
(function (process,global){(function (){
var defaultEncoding
/* istanbul ignore next */
if (global.process && global.process.browser) {
  defaultEncoding = 'utf-8'
} else if (global.process && global.process.version) {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10)

  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary'
} else {
  defaultEncoding = 'utf-8'
}
module.exports = defaultEncoding

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":150}],147:[function(require,module,exports){
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs

module.exports = function (iterations, keylen) {
  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number')
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations')
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number')
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) { /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length')
  }
}

},{}],148:[function(require,module,exports){
var md5 = require('create-hash/md5')
var RIPEMD160 = require('ripemd160')
var sha = require('sha.js')
var Buffer = require('safe-buffer').Buffer

var checkParameters = require('./precondition')
var defaultEncoding = require('./default-encoding')
var toBuffer = require('./to-buffer')

var ZEROS = Buffer.alloc(128)
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
}

function Hmac (alg, key, saltLen) {
  var hash = getDigest(alg)
  var blocksize = (alg === 'sha512' || alg === 'sha384') ? 128 : 64

  if (key.length > blocksize) {
    key = hash(key)
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize)
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg])
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg])
  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36
    opad[i] = key[i] ^ 0x5C
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4)
  ipad.copy(ipad1, 0, 0, blocksize)
  this.ipad1 = ipad1
  this.ipad2 = ipad
  this.opad = opad
  this.alg = alg
  this.blocksize = blocksize
  this.hash = hash
  this.size = sizes[alg]
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize)
  var h = this.hash(ipad)
  h.copy(this.opad, this.blocksize)
  return this.hash(this.opad)
}

function getDigest (alg) {
  function shaFunc (data) {
    return sha(alg).update(data).digest()
  }
  function rmd160Func (data) {
    return new RIPEMD160().update(data).digest()
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func
  if (alg === 'md5') return md5
  return shaFunc
}

function pbkdf2 (password, salt, iterations, keylen, digest) {
  checkParameters(iterations, keylen)
  password = toBuffer(password, defaultEncoding, 'Password')
  salt = toBuffer(salt, defaultEncoding, 'Salt')

  digest = digest || 'sha1'

  var hmac = new Hmac(digest, password, salt.length)

  var DK = Buffer.allocUnsafe(keylen)
  var block1 = Buffer.allocUnsafe(salt.length + 4)
  salt.copy(block1, 0, 0, salt.length)

  var destPos = 0
  var hLen = sizes[digest]
  var l = Math.ceil(keylen / hLen)

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length)

    var T = hmac.run(block1, hmac.ipad1)
    var U = T

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2)
      for (var k = 0; k < hLen; k++) T[k] ^= U[k]
    }

    T.copy(DK, destPos)
    destPos += hLen
  }

  return DK
}

module.exports = pbkdf2

},{"./default-encoding":146,"./precondition":147,"./to-buffer":149,"create-hash/md5":68,"ripemd160":160,"safe-buffer":161,"sha.js":164}],149:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

module.exports = function (thing, encoding, name) {
  if (Buffer.isBuffer(thing)) {
    return thing
  } else if (typeof thing === 'string') {
    return Buffer.from(thing, encoding)
  } else if (ArrayBuffer.isView(thing)) {
    return Buffer.from(thing.buffer)
  } else {
    throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView')
  }
}

},{"safe-buffer":161}],150:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],151:[function(require,module,exports){
exports.publicEncrypt = require('./publicEncrypt')
exports.privateDecrypt = require('./privateDecrypt')

exports.privateEncrypt = function privateEncrypt (key, buf) {
  return exports.publicEncrypt(key, buf, true)
}

exports.publicDecrypt = function publicDecrypt (key, buf) {
  return exports.privateDecrypt(key, buf, true)
}

},{"./privateDecrypt":154,"./publicEncrypt":155}],152:[function(require,module,exports){
var createHash = require('create-hash')
var Buffer = require('safe-buffer').Buffer

module.exports = function (seed, len) {
  var t = Buffer.alloc(0)
  var i = 0
  var c
  while (t.length < len) {
    c = i2ops(i++)
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()])
  }
  return t.slice(0, len)
}

function i2ops (c) {
  var out = Buffer.allocUnsafe(4)
  out.writeUInt32BE(c, 0)
  return out
}

},{"create-hash":67,"safe-buffer":161}],153:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"buffer":19,"dup":15}],154:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var crt = require('browserify-rsa')
var createHash = require('create-hash')
var withPublic = require('./withPublic')
var Buffer = require('safe-buffer').Buffer

module.exports = function privateDecrypt (privateKey, enc, reverse) {
  var padding
  if (privateKey.padding) {
    padding = privateKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }

  var key = parseKeys(privateKey)
  var k = key.modulus.byteLength()
  if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error')
  }
  var msg
  if (reverse) {
    msg = withPublic(new BN(enc), key)
  } else {
    msg = crt(enc, key)
  }
  var zBuffer = Buffer.alloc(k - msg.length)
  msg = Buffer.concat([zBuffer, msg], k)
  if (padding === 4) {
    return oaep(key, msg)
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    return msg
  } else {
    throw new Error('unknown padding')
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  if (msg[0] !== 0) {
    throw new Error('decryption error')
  }
  var maskedSeed = msg.slice(1, hLen + 1)
  var maskedDb = msg.slice(hLen + 1)
  var seed = xor(maskedSeed, mgf(maskedDb, hLen))
  var db = xor(maskedDb, mgf(seed, k - hLen - 1))
  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error')
  }
  var i = hLen
  while (db[i] === 0) {
    i++
  }
  if (db[i++] !== 1) {
    throw new Error('decryption error')
  }
  return db.slice(i)
}

function pkcs1 (key, msg, reverse) {
  var p1 = msg.slice(0, 2)
  var i = 2
  var status = 0
  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++
      break
    }
  }
  var ps = msg.slice(2, i - 1)

  if ((p1.toString('hex') !== '0002' && !reverse) || (p1.toString('hex') !== '0001' && reverse)) {
    status++
  }
  if (ps.length < 8) {
    status++
  }
  if (status) {
    throw new Error('decryption error')
  }
  return msg.slice(i)
}
function compare (a, b) {
  a = Buffer.from(a)
  b = Buffer.from(b)
  var dif = 0
  var len = a.length
  if (a.length !== b.length) {
    dif++
    len = Math.min(a.length, b.length)
  }
  var i = -1
  while (++i < len) {
    dif += (a[i] ^ b[i])
  }
  return dif
}

},{"./mgf":152,"./withPublic":156,"./xor":157,"bn.js":153,"browserify-rsa":40,"create-hash":67,"parse-asn1":143,"safe-buffer":161}],155:[function(require,module,exports){
var parseKeys = require('parse-asn1')
var randomBytes = require('randombytes')
var createHash = require('create-hash')
var mgf = require('./mgf')
var xor = require('./xor')
var BN = require('bn.js')
var withPublic = require('./withPublic')
var crt = require('browserify-rsa')
var Buffer = require('safe-buffer').Buffer

module.exports = function publicEncrypt (publicKey, msg, reverse) {
  var padding
  if (publicKey.padding) {
    padding = publicKey.padding
  } else if (reverse) {
    padding = 1
  } else {
    padding = 4
  }
  var key = parseKeys(publicKey)
  var paddedMsg
  if (padding === 4) {
    paddedMsg = oaep(key, msg)
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse)
  } else if (padding === 3) {
    paddedMsg = new BN(msg)
    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus')
    }
  } else {
    throw new Error('unknown padding')
  }
  if (reverse) {
    return crt(paddedMsg, key)
  } else {
    return withPublic(paddedMsg, key)
  }
}

function oaep (key, msg) {
  var k = key.modulus.byteLength()
  var mLen = msg.length
  var iHash = createHash('sha1').update(Buffer.alloc(0)).digest()
  var hLen = iHash.length
  var hLen2 = 2 * hLen
  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long')
  }
  var ps = Buffer.alloc(k - mLen - hLen2 - 2)
  var dblen = k - hLen - 1
  var seed = randomBytes(hLen)
  var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen))
  var maskedSeed = xor(seed, mgf(maskedDb, hLen))
  return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k))
}
function pkcs1 (key, msg, reverse) {
  var mLen = msg.length
  var k = key.modulus.byteLength()
  if (mLen > k - 11) {
    throw new Error('message too long')
  }
  var ps
  if (reverse) {
    ps = Buffer.alloc(k - mLen - 3, 0xff)
  } else {
    ps = nonZero(k - mLen - 3)
  }
  return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k))
}
function nonZero (len) {
  var out = Buffer.allocUnsafe(len)
  var i = 0
  var cache = randomBytes(len * 2)
  var cur = 0
  var num
  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2)
      cur = 0
    }
    num = cache[cur++]
    if (num) {
      out[i++] = num
    }
  }
  return out
}

},{"./mgf":152,"./withPublic":156,"./xor":157,"bn.js":153,"browserify-rsa":40,"create-hash":67,"parse-asn1":143,"randombytes":158,"safe-buffer":161}],156:[function(require,module,exports){
var BN = require('bn.js')
var Buffer = require('safe-buffer').Buffer

function withPublic (paddedMsg, key) {
  return Buffer.from(paddedMsg
    .toRed(BN.mont(key.modulus))
    .redPow(new BN(key.publicExponent))
    .fromRed()
    .toArray())
}

module.exports = withPublic

},{"bn.js":153,"safe-buffer":161}],157:[function(require,module,exports){
module.exports = function xor (a, b) {
  var len = a.length
  var i = -1
  while (++i < len) {
    a[i] ^= b[i]
  }
  return a
}

},{}],158:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536

// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295

function oldBrowser () {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11')
}

var Buffer = require('safe-buffer').Buffer
var crypto = global.crypto || global.msCrypto

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes
} else {
  module.exports = oldBrowser
}

function randomBytes (size, cb) {
  // phantomjs needs to throw
  if (size > MAX_UINT32) throw new RangeError('requested too many random bytes')

  var bytes = Buffer.allocUnsafe(size)

  if (size > 0) {  // getRandomValues fails on IE if size == 0
    if (size > MAX_BYTES) { // this is the max bytes crypto.getRandomValues
      // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
      for (var generated = 0; generated < size; generated += MAX_BYTES) {
        // buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES))
      }
    } else {
      crypto.getRandomValues(bytes)
    }
  }

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes)
    })
  }

  return bytes
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":150,"safe-buffer":161}],159:[function(require,module,exports){
(function (process,global){(function (){
'use strict'

function oldBrowser () {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11')
}
var safeBuffer = require('safe-buffer')
var randombytes = require('randombytes')
var Buffer = safeBuffer.Buffer
var kBufferMaxLength = safeBuffer.kMaxLength
var crypto = global.crypto || global.msCrypto
var kMaxUint32 = Math.pow(2, 32) - 1
function assertOffset (offset, length) {
  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number')
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32')
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range')
  }
}

function assertSize (size, offset, length) {
  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number')
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32')
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small')
  }
}
if ((crypto && crypto.getRandomValues) || !process.browser) {
  exports.randomFill = randomFill
  exports.randomFillSync = randomFillSync
} else {
  exports.randomFill = oldBrowser
  exports.randomFillSync = oldBrowser
}
function randomFill (buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  if (typeof offset === 'function') {
    cb = offset
    offset = 0
    size = buf.length
  } else if (typeof size === 'function') {
    cb = size
    size = buf.length - offset
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function')
  }
  assertOffset(offset, buf.length)
  assertSize(size, offset, buf.length)
  return actualFill(buf, offset, size, cb)
}

function actualFill (buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer
    var uint = new Uint8Array(ourBuf, offset, size)
    crypto.getRandomValues(uint)
    if (cb) {
      process.nextTick(function () {
        cb(null, buf)
      })
      return
    }
    return buf
  }
  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err)
      }
      bytes.copy(buf, offset)
      cb(null, buf)
    })
    return
  }
  var bytes = randombytes(size)
  bytes.copy(buf, offset)
  return buf
}
function randomFillSync (buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0
  }
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array')
  }

  assertOffset(offset, buf.length)

  if (size === undefined) size = buf.length - offset

  assertSize(size, offset, buf.length)

  return actualFill(buf, offset, size)
}

}).call(this)}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":150,"randombytes":158,"safe-buffer":161}],160:[function(require,module,exports){
'use strict'
var Buffer = require('buffer').Buffer
var inherits = require('inherits')
var HashBase = require('hash-base')

var ARRAY16 = new Array(16)

var zl = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
]

var zr = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
]

var sl = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
]

var sr = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
]

var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e]
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000]

function RIPEMD160 () {
  HashBase.call(this, 64)

  // state
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0
}

inherits(RIPEMD160, HashBase)

RIPEMD160.prototype._update = function () {
  var words = ARRAY16
  for (var j = 0; j < 16; ++j) words[j] = this._block.readInt32LE(j * 4)

  var al = this._a | 0
  var bl = this._b | 0
  var cl = this._c | 0
  var dl = this._d | 0
  var el = this._e | 0

  var ar = this._a | 0
  var br = this._b | 0
  var cr = this._c | 0
  var dr = this._d | 0
  var er = this._e | 0

  // computation
  for (var i = 0; i < 80; i += 1) {
    var tl
    var tr
    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i])
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i])
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i])
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i])
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i])
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i])
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i])
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i])
    } else { // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i])
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i])
    }

    al = el
    el = dl
    dl = rotl(cl, 10)
    cl = bl
    bl = tl

    ar = er
    er = dr
    dr = rotl(cr, 10)
    cr = br
    br = tr
  }

  // update state
  var t = (this._b + cl + dr) | 0
  this._b = (this._c + dl + er) | 0
  this._c = (this._d + el + ar) | 0
  this._d = (this._e + al + br) | 0
  this._e = (this._a + bl + cr) | 0
  this._a = t
}

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80
  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64)
    this._update()
    this._blockOffset = 0
  }

  this._block.fill(0, this._blockOffset, 56)
  this._block.writeUInt32LE(this._length[0], 56)
  this._block.writeUInt32LE(this._length[1], 60)
  this._update()

  // produce result
  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20)
  buffer.writeInt32LE(this._a, 0)
  buffer.writeInt32LE(this._b, 4)
  buffer.writeInt32LE(this._c, 8)
  buffer.writeInt32LE(this._d, 12)
  buffer.writeInt32LE(this._e, 16)
  return buffer
}

function rotl (x, n) {
  return (x << n) | (x >>> (32 - n))
}

function fn1 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ c ^ d) + m + k) | 0, s) + e) | 0
}

function fn2 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & c) | ((~b) & d)) + m + k) | 0, s) + e) | 0
}

function fn3 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b | (~c)) ^ d) + m + k) | 0, s) + e) | 0
}

function fn4 (a, b, c, d, e, m, k, s) {
  return (rotl((a + ((b & d) | (c & (~d))) + m + k) | 0, s) + e) | 0
}

function fn5 (a, b, c, d, e, m, k, s) {
  return (rotl((a + (b ^ (c | (~d))) + m + k) | 0, s) + e) | 0
}

module.exports = RIPEMD160

},{"buffer":63,"hash-base":102,"inherits":132}],161:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":63}],162:[function(require,module,exports){
(function (process){(function (){
/* eslint-disable node/no-deprecated-api */

'use strict'

var buffer = require('buffer')
var Buffer = buffer.Buffer

var safer = {}

var key

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue
  if (key === 'SlowBuffer' || key === 'Buffer') continue
  safer[key] = buffer[key]
}

var Safer = safer.Buffer = {}
for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
  Safer[key] = Buffer[key]
}

safer.Buffer.prototype = Buffer.prototype

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
    }
    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
    }
    return Buffer(value, encodingOrOffset, length)
  }
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
    }
    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
    var buf = Buffer(size)
    if (!fill || fill.length === 0) {
      buf.fill(0)
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
    return buf
  }
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength
  } catch (e) {
    // we can't determine kStringMaxLength in environments where process.binding
    // is unsupported, so let's not set it
  }
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  }
  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength
  }
}

module.exports = safer

}).call(this)}).call(this,require('_process'))
},{"_process":150,"buffer":63}],163:[function(require,module,exports){
var Buffer = require('safe-buffer').Buffer

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash

},{"safe-buffer":161}],164:[function(require,module,exports){
var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = require('./sha')
exports.sha1 = require('./sha1')
exports.sha224 = require('./sha224')
exports.sha256 = require('./sha256')
exports.sha384 = require('./sha384')
exports.sha512 = require('./sha512')

},{"./sha":165,"./sha1":166,"./sha224":167,"./sha256":168,"./sha384":169,"./sha512":170}],165:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha

},{"./hash":163,"inherits":132,"safe-buffer":161}],166:[function(require,module,exports){
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1

},{"./hash":163,"inherits":132,"safe-buffer":161}],167:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Sha256 = require('./sha256')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224

},{"./hash":163,"./sha256":168,"inherits":132,"safe-buffer":161}],168:[function(require,module,exports){
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256

},{"./hash":163,"inherits":132,"safe-buffer":161}],169:[function(require,module,exports){
var inherits = require('inherits')
var SHA512 = require('./sha512')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384

},{"./hash":163,"./sha512":170,"inherits":132,"safe-buffer":161}],170:[function(require,module,exports){
var inherits = require('inherits')
var Hash = require('./hash')
var Buffer = require('safe-buffer').Buffer

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512

},{"./hash":163,"inherits":132,"safe-buffer":161}],171:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js')
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js')

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":100,"inherits":132,"readable-stream/lib/_stream_duplex.js":173,"readable-stream/lib/_stream_passthrough.js":174,"readable-stream/lib/_stream_readable.js":175,"readable-stream/lib/_stream_transform.js":176,"readable-stream/lib/_stream_writable.js":177,"readable-stream/lib/internal/streams/end-of-stream.js":181,"readable-stream/lib/internal/streams/pipeline.js":183}],172:[function(require,module,exports){
arguments[4][47][0].apply(exports,arguments)
},{"dup":47}],173:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"./_stream_readable":175,"./_stream_writable":177,"_process":150,"dup":48,"inherits":132}],174:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_stream_transform":176,"dup":49,"inherits":132}],175:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"../errors":172,"./_stream_duplex":173,"./internal/streams/async_iterator":178,"./internal/streams/buffer_list":179,"./internal/streams/destroy":180,"./internal/streams/from":182,"./internal/streams/state":184,"./internal/streams/stream":185,"_process":150,"buffer":63,"dup":50,"events":100,"inherits":132,"string_decoder/":186,"util":19}],176:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"../errors":172,"./_stream_duplex":173,"dup":51,"inherits":132}],177:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"../errors":172,"./_stream_duplex":173,"./internal/streams/destroy":180,"./internal/streams/state":184,"./internal/streams/stream":185,"_process":150,"buffer":63,"dup":52,"inherits":132,"util-deprecate":187}],178:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./end-of-stream":181,"_process":150,"dup":53}],179:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"buffer":63,"dup":54,"util":19}],180:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"_process":150,"dup":55}],181:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"../../../errors":172,"dup":56}],182:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"dup":57}],183:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"../../../errors":172,"./end-of-stream":181,"dup":58}],184:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"../../../errors":172,"dup":59}],185:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"dup":60,"events":100}],186:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":161}],187:[function(require,module,exports){
(function (global){(function (){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],188:[function(require,module,exports){
module.exports=[{
    "regex": "acceleration",
    "name": "Arcane Acceleration",
    "effect": "On critical hit, 5% / 10% / 15% / 20% chance\nto give 15% / 30% / 45% / 60% Fire Rate to Rifles\nfor 1.5 / 3 / 4.5 / 6 Seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/9/96/Arcane_Acceleration_160.png/revision/latest/scale-to-width-down/75?cb=20150407090527",
    "info": "http://warframe.wikia.com/wiki/Arcane_Acceleration"
  },
  {
    "regex": "aegis",
    "name": "Arcane Aegis",
    "effect": "When DAMAGED 1.5% / 3% / 4.5% / 6% chance\nto give 15 / 30 / 45 / 60 Shield Regen per sec\nfor 5 / 10 / 15 / 20 Seconds",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/b/b6/Arcane_Aegis_160.png/revision/latest/scale-to-width-down/75?cb=20151102021019",
    "info": "http://warframe.wikia.com/wiki/Arcane_Aegis"
  },
  {
    "regex": "agility",
    "name": "Arcane Agility",
    "effect": "When DAMAGED 3% / 6% / 9% / 16% chance \nto give 10% / 20% / 30% / 40% Movement Speed\nfor2 / 4 / 6 / 8 Seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/7/78/Arcane_Agility_160.png/revision/latest/scale-to-width-down/75?cb=20150414195529",
    "info": "http://warframe.wikia.com/wiki/Arcane_Agility"
  },
  {
    "regex": "arachne",
    "name": "Arcane Arachne",
    "effect": "On WALL LATCH, 15% / 30% / 45% / 60% chance \nfor 100% Bonus Damage\n onNext Hit",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/c/c1/Arcane_Arachne_160.png/revision/latest/scale-to-width-down/75?cb=20151101102048",
    "info": "http://warframe.wikia.com/wiki/Arcane_Arachne"
  },
  {
    "regex": "avenger",
    "name": "Arcane Avenger",
    "effect": "When DAMAGED 3.5% / 7% / 10.5% / 14% chance\nfor 7.5% / 15% / 22.5% / 30% Additive Critical Chance\nfor 2 / 4 / 6 / 8 Seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/8/88/Arcane_Avenger_160.png/revision/latest/scale-to-width-down/75?cb=20150508155706",
    "info": "http://warframe.wikia.com/wiki/Arcane_Avenger"
  },
  {
    "regex": "awakening",
    "name": "Arcane Awakening",
    "effect": "On RELOAD 10% / 20% / 30% / 40% chance\nto add 25% / 50% / 75% / 100% Damage to Secondaries\n for 4 / 8 / 12 / 16 Seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/f/fa/Arcane_Awakening_160.png/revision/latest/scale-to-width-down/75?cb=20151031165006",
    "info": "http://warframe.wikia.com/wiki/Arcane_Awakening"
  },
  {
    "regex": "barrier",
    "name": "Arcane Barrier",
    "effect": "When DAMAGED, 1% / 2% / 3% / 4% chance to Full Shield Recovery",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/c/c7/Arcane_Barrier_LQ.png/revision/latest/scale-to-width-down/75?cb=20151031165652",
    "info": "http://warframe.wikia.com/wiki/Arcane_Barrier"
  },
  {
    "regex": "consequence",
    "name": "Arcane Consequence",
    "effect": "On headshot, 25% / 50% / 75% / 100% chance\nto give 10% / 20% / 30% / 40% increased Aim Glide/Wall Latch\n for 3 / 6 / 9 / 12 Seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/8/82/Arcane_Consequence_160.png/revision/latest/scale-to-width-down/75?cb=20151031215624",
    "info": "http://warframe.wikia.com/wiki/Arcane_Consequence"
  },
  {
    "regex": "deflection",
    "name": "Arcane Deflection",
    "effect": "20% / 40% / 60% / 80% chance to Resist Slash proc",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/b/b1/Arcane_Deflection_160.png/revision/latest/scale-to-width-down/75?cb=20150414010409",
    "info": "http://warframe.wikia.com/wiki/Arcane_Deflection"
  },
  {
    "regex": "energize",
    "name": "Arcane Energize",
    "effect": "On energy pickup, 10% / 20% / 30% / 40% chance\nto replenish  25 / 50 / 75 / 100 energy to nearby allies\nwithin 5 / 10 / 15 / 20 Meters",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/e/e3/Arcane_Energize_160.png/revision/latest/scale-to-width-down/75?cb=20151102150026",
    "info": "http://warframe.wikia.com/wiki/Arcane_Energize"
  },
  {
    "regex": "eruption",
    "name": "Arcane Eruption",
    "effect": "On energy pickup, 5% / 10% / 15% / 20% chance\nto Knockdown nearby Enemies\nwithin 5 / 10 / 15 / 20 Meters",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/2/2d/Arcane_Eruption_160.png/revision/latest/scale-to-width-down/75?cb=20150404083642",
    "info": "http://warframe.wikia.com/wiki/Arcane_Eruption"
  },
  {
    "regex": "fury",
    "name": "Arcane Fury",
    "effect": "On critical hit, 10% / 20% / 30% / 40% chance\n to give 30% / 60% / 90% / 120% increased Damage on Melee\n for 3 / 6 / 9 / 12 seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/8/8d/Arcane_Fury_160.png/revision/latest/scale-to-width-down/75?cb=20151102161322",
    "info": "http://warframe.wikia.com/wiki/Arcane_Fury"
  },
  {
    "regex": "grace",
    "name": "Arcane Grace",
    "effect": "When damaged, 1.5% / 3% / 4.5% / 6% chance\nfor 1% / 2% / 3% / 4% Health Regen/sec for 1.5 / 3 / 4.5 / 6 seconds",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/4/44/Arcane_Grace_Icon.png/revision/latest/scale-to-width-down/75?cb=20150420152648",
    "info": "http://warframe.wikia.com/wiki/Arcane_Grace"
  },
  {
    "regex": "guardian",
    "name": "Arcane Guardian",
    "effect": "When damaged, 5% / 10% / 15% / 20% chance\nto give 150 / 300 / 450 / 600 Armor\n for 5 / 10 / 15 / 20 seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette4.wikia.nocookie.net/warframe/images/8/80/Arcane_Guardian_160.png/revision/latest/scale-to-width-down/75?cb=20150413184813",
    "info": "http://warframe.wikia.com/wiki/Arcane_Guardian"
  },
  {
    "regex": "healing",
    "name": "Arcane Healing",
    "effect": "20% / 40% / 60% / 80% chance to resist Radiation proc",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "http://warframe.wikia.com/wiki/Arcane_Healing",
    "info": "http://warframe.wikia.com/wiki/Arcane_Healing"
  },
  {
    "regex": "ice",
    "name": "Arcane Ice",
    "effect": "20% / 40% / 60% / 80% chance to resist Heat proc",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/c/ca/Arcane_Ice_160.png/revision/latest/scale-to-width-down/75?cb=20150407090538",
    "info": "http://warframe.wikia.com/wiki/Arcane_Ice"
  },
  {
    "regex": "momentum",
    "name": "Arcane Momentum",
    "effect": "On critical hit, 10% / 20% / 30% / 40% chance\nto give 25% / 50% / 75% / 100% Fire Rate on Snipers\nfor 2 / 4 / 6 / 8 seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/3/39/Arcane_Momentum_160.png/revision/latest/scale-to-width-down/75?cb=20151101104354",
    "info": "http://warframe.wikia.com/wiki/Arcane_Momentum"
  },
  {
    "regex": "nullifier",
    "name": "Arcane Nullifier",
    "effect": "20% / 40% / 60% / 80% chance to resist Magnetic proc",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/6/6a/Arcane_Nullifier_160.png/revision/latest/scale-to-width-down/75?cb=20150413134726",
    "info": "http://warframe.wikia.com/wiki/Arcane_Nullifier"
  },
  {
    "regex": "phantasm",
    "name": "Arcane Phantasm",
    "effect": "On PARRY 4% / 8% / 12% / 16% chance\nto give 5% / 10% / 15% / 20 increased Movement Speed\nfor 3 / 6 / 9 / 12 seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/e/ed/Arcane_Phantasm_160.png/revision/latest/scale-to-width-down/75?cb=20150415041516",
    "info": "http://warframe.wikia.com/wiki/Arcane_Phantasm"
  },
  {
    "regex": "precision",
    "name": "Arcane Precision",
    "effect": "On headshot, 20% / 40% / 60% / 80% chance\nto give 30% / 60% / 90% / 120% increased damage on secondaries\n for 2 / 4 / 6 / 8 seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/a/a9/Arcane_Precision_160.png/revision/latest/scale-to-width-down/75?cb=20151031073431",
    "info": "http://warframe.wikia.com/wiki/Arcane_Precision"
  },
  {
    "regex": "pulse",
    "name": "Arcane Pulse",
    "effect": "On health pickup, 5% / 10% / 15% / 20% chance\nto heals 25 / 50 / 75 / 100 to nearby Allies\n within 5 / 10 / 15 / 20 meters",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/e/e7/Arcane_Pulse_160.png/revision/latest/scale-to-width-down/75?cb=20150414010427",
    "info": "http://warframe.wikia.com/wiki/Arcane_Pulse"
  },
  {
    "regex": "rage",
    "name": "Arcane Rage",
    "effect": "On headshot, 2.5% / 5% / 7.5% / 10% chance\n to give 30% / 60% / 90% / 120% increased Damage on Primaries\nfor 4 / 8 / 12 / 16 seconds",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/3/3b/Arcane_Rage_160.png/revision/latest/scale-to-width-down/75?cb=20150407090655",
    "info": "http://warframe.wikia.com/wiki/Arcane_Rage"
  },
  {
    "regex": "resistance",
    "name": "Arcane Resistance",
    "effect": "20% / 40% / 60% / 80% chance to resist Electricity proc",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/e/e4/Arcane_Resistance_160.png/revision/latest/scale-to-width-down/75?cb=20150414071159",
    "info": "http://warframe.wikia.com/wiki/Arcane_Resistance"
  },
  {
    "regex": "strike",
    "name": "Arcane Strike",
    "effect": "On HIT 2.5% / 5% / 7.5% / 10% chance\nto give 10% / 20% / 30% / 40% Attack Speed on Melee\nfor3 / 6 / 9 / 12 seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette1.wikia.nocookie.net/warframe/images/a/a0/Arcane_Strike_160.png/revision/latest/scale-to-width-down/75?cb=20150413191053",
    "info": "http://warframe.wikia.com/wiki/Arcane_Strike"
  },
  {
    "regex": "tempo",
    "name": "Arcane Tempo",
    "effect": "On critical hit, 2.5% / 5% / 7.5% / 10% chance\nto give 15% / 30% / 45% / 60% increased Fire Rate on Shotguns\nfor 2 / 4 / 6 / 8 Seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette4.wikia.nocookie.net/warframe/images/a/aa/Arcane_Tempo_160.png/revision/latest/scale-to-width-down/75?cb=20151102162933",
    "info": "http://warframe.wikia.com/wiki/Arcane_Tempo"
  },
  {
    "regex": "trickery",
    "name": "Arcane Trickery",
    "effect": "On finisher, 2.5% / 5% / 7.5% / 10% chance\nto go invisible\nfor 5 / 10 / 15 / 20 seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/7/75/Arcane_Trickery_160.png/revision/latest/scale-to-width-down/75?cb=20150413185559",
    "info": "http://warframe.wikia.com/wiki/Arcane_Trickery"
  },
  {
    "regex": "ultimatum",
    "name": "Arcane Ultimatum",
    "effect": "On finisher, 25% / 50% / 75% / 100% chance\to give 150 / 300 / 450 / 600 Armor\nfor 10 / 20 / 30 / 40 seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/4/48/Arcane_Ultimatum_160.png/revision/latest/scale-to-width-down/75?cb=20151101031844",
    "info": "http://warframe.wikia.com/wiki/Arcane_Ultimatum"
  },
  {
    "regex": "velocity",
    "name": "Arcane Velocity",
    "effect": "On critical hit, 15% / 30% / 45% / 60% chance\nto give 20% / 40% / 60% / 80% increased fire rate on Secondaries\nfor 1.5 / 3 / 4.5 / 6 seconds",
    "rarity": "Common",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette3.wikia.nocookie.net/warframe/images/e/e2/Arcane_Velocity_160.png/revision/latest/scale-to-width-down/75?cb=20151031164830",
    "info": "http://warframe.wikia.com/wiki/Arcane_Velocity"
  },
  {
    "regex": "victory",
    "name": "Arcane Victory",
    "effect": "On headshot, 2% / 4% / 6% / 8% chance\nto give 0.5% / 1.0% / 1.5% / 2.0% Health Regen/sec\nfor 2 / 4 / 6 / 8 seconds",
    "rarity": "Rare",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/2/25/Arcane_Victory_160.png/revision/latest/scale-to-width-down/75?cb=20150414195605",
    "info": "http://warframe.wikia.com/wiki/Arcane_Victory"
  },
  {
    "regex": "warmth",
    "name": "Arcane Warmth",
    "effect": "20% / 40% / 60% / 80% chance to resist Cold proc",
    "rarity": "Uncommon",
    "location": "Changing, check droptable",
    "thumbnail": "https://vignette2.wikia.nocookie.net/warframe/images/2/2a/Arcane_Warmth_160.png/revision/latest/scale-to-width-down/75?cb=20150403122843",
    "info": "http://warframe.wikia.com/wiki/Arcane_Warmth"
  }, {
    "regex": "vigor",
    "name": "Magus Vigor",
    "effect": "50 / 100 / 150 / 200 Increased Health",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f3/MagusVigor.png/revision/latest/scale-to-width-down/350?cb=20171129163026",
    "info": "http://warframe.wikia.com/wiki/Magus_Vigor"
  },
  {
    "regex": "husk",
    "name": "Magus Husk",
    "effect": "25 / 50 / 75 / 100 Increased Armor",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/9/94/MagusHusk.png/revision/latest/scale-to-width-down/350?cb=20171129163018",
    "info": "http://warframe.wikia.com/wiki/Magus_Husk"
  },
  {
    "regex": "cloud",
    "name": "Magus Cloud",
    "effect": "On VOID DASH 25% / 50% / 75% / 100% chance for Immunity to fall damage for 2 / 4 / 6 / 8 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/f/f3/MagusVigor.png/revision/latest/scale-to-width-down/350?cb=20171129163026",
    "info": "http://warframe.wikia.com/wiki/Magus_Cloud"
  },
  {
    "regex": "cadence",
    "name": "Magus Cadence",
    "effect": "On VOID DASH 25% / 50% / 75% / 100% chance for 15% / 30% / 45% / 60% Increased sprint speed for 2 / 4 / 6 / 8 Seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/48/MagusCadence.png/revision/latest/scale-to-width-down/350?cb=20171129163011",
    "info": "http://warframe.wikia.com/wiki/Magus_Cadence"
  },
  {
    "regex": "replenish",
    "name": "Magus Replenish",
    "effect": "On VOID DASH 25% / 50% / 75% / 100% chance to heal 5% / 10% / 15% / 20%",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/b/ba/MagusReplenish.png/revision/latest/scale-to-width-down/350?cb=20171129163024",
    "info": "http://warframe.wikia.com/wiki/Magus_Replenish"
  },
  {
    "regex": "elevate",
    "name": "Magus Elevate",
    "effect": "Upon entering Warframe, 30% / 40% / 50% / 75% chance to heal Warframe for 50 / 100 / 150 / 200",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/dc/MagusElevate.png/revision/latest/scale-to-width-down/350?cb=20171129163015",
    "info": "http://warframe.wikia.com/wiki/Magus_Elevate"
  },
  {
    "regex": "nourish",
    "name": "Magus Nourish",
    "effect": "Upon exiting Warframe, heal Warframe by 10 / 15 / 20 / 25 per second While Transference (Operator Mode) is active.",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c9/MagusNourish.png/revision/latest/scale-to-width-down/350?cb=20171129163020",
    "info": "http://warframe.wikia.com/wiki/Magus_Nourish"
  },
  {
    "regex": "null",
    "name": "Virtuos Null",
    "effect": "On kill, 5% / 10% / 15% / 20% Increased Amp energy regen 1 / 2 / 3 / 4 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/7/73/VirtuosNull.png/revision/latest?cb=20171129163035",
    "info": "http://warframe.wikia.com/wiki/Virtuos_Null"
  },
  {
    "regex": "tempo",
    "name": "Virtuos Tempo",
    "effect": "On kill, 15% / 30% / 45% / 60% chance for 15% / 30% / 45% / 60% Increased fire rate for 2 / 4 / 6 / 8 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/56/VirtuosTempo.png/revision/latest/scale-to-width-down/350?cb=20171129163042",
    "info": "http://warframe.wikia.com/wiki/Virtuos_Tempo"
  },
  {
    "regex": "fury",
    "name": "Virtuos Fury",
    "effect": "On status effect, 5% / 10% / 15% / 20% chance for 7.5% / 15% / 22.5% / 30% Increased Damage for 1 / 2 / 3 / 4 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/3/39/VirtuosFury.png/revision/latest?cb=20171129163029",
    "info": "http://warframe.wikia.com/wiki/Virtuos_Fury"
  },
  {
    "regex": "strike",
    "name": "Virtuos Strike",
    "effect": "On critical, 5% / 10% / 15% / 20% chance for 15% / 30% / 45% / 60% Increased critical damage for 1 / 2 / 3 / 4 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/4/46/VirtuosStrike.png/revision/latest/scale-to-width-down/350?cb=20171129163040",
    "info": "http://warframe.wikia.com/wiki/Virtuos_Tempo"
  },
  {
    "regex": "shadow",
    "name": "Virtuos Shadow",
    "effect": "On headshot, 10% / 20% / 30% / 40% chance for 15% / 30% / 45% / 60% Multiplicative critical chance for 3 / 6 / 9 / 12 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/5/56/VirtuosTempo.png/revision/latest/scale-to-width-down/350?cb=20171129163042",
    "info": "http://warframe.wikia.com/wiki/Virtuos_Shadow"
  },
  {
    "regex": "ghost",
    "name": "Virtuos Ghost",
    "effect": "On headshot, 10% / 20% / 30% / 40% chance for 15% / 30% / 45% / 60% Increased status chance for 3 / 6 / 9 / 12 seconds",
    "rarity": "Uncommon",
    "location": "Quills",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/d/d6/VirtuosGhost.png/revision/latest/scale-to-width-down/350?cb=20171129163032",
    "info": "http://warframe.wikia.com/wiki/Virtuos_Ghost"
  },
  {
    "regex": "brave",
    "name": "Exodia Brave",
    "effect": "On melee channel kill, 100% chance for 1.25 / 2.50 / 3.75 / 5.00 Increased energy regen for 1 / 2 / 3 / 4 seconds",
    "rarity": "Uncommon",
    "location": "Hok's Anvil",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/a/aa/ExodiaBrave.png/revision/latest?cb=20171129162951",
    "info": "http://warframe.wikia.com/wiki/Exodia_Brave"
  },
  {
    "regex": "valor",
    "name": "Exodia Valor",
    "effect": "On critical hit, 5% / 10% / 15% / 20% chance for 50% / 100% / 150% / 200% Increased channeling damage for 3 / 6 / 9 / 12 Seconds",
    "rarity": "Uncommon",
    "location": "Hok's Anvil",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/c/c4/ExodiaValor.png/revision/latest?cb=20171129163009",
    "info": "http://warframe.wikia.com/wiki/Exodia_Valor"
  },
  {
    "regex": "might",
    "name": "Exodia Might",
    "effect": "On finishers, 12.5% / 25% / 37.5% / 50% chance for 7.5% / 15% / 22.5% / 30% Lifesteal for 2 / 4 / 6 / 8 seconds",
    "rarity": "Uncommon",
    "location": "Hok's Anvil",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/12/ExodiaMight.png/revision/latest/scale-to-width-down/350?cb=20171129163004",
    "info": "http://warframe.wikia.com/wiki/Exodia_Might"
  },
  {
    "regex": "triumph",
    "name": "Exodia Triumph",
    "effect": "On status effect, 5% / 10% / 15% / 20% chance for 50% / 100% / 150% / 200% Increased Channeling damage 3 / 6 / 9 / 12 seconds",
    "rarity": "Uncommon",
    "location": "Hok's Anvil",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/00/ExodiaTriumph.png/revision/latest/scale-to-width-down/350?cb=20171129163006",
    "info": "http://warframe.wikia.com/wiki/Exodia_Triumph"
  },
  {
    "regex": "hunt",
    "name": "Exodia Hunt",
    "effect": "On slam attack, 20% / 30% / 40% / 50% chance to pull in nearby enemies within 6m / 8m / 10m / 12m",
    "rarity": "Uncommon",
    "location": "Hok's Anvil",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/0/03/ExodiaHunt.png/revision/latest/scale-to-width-down/350?cb=20171129163001",
    "info": "http://warframe.wikia.com/wiki/Exodia_Hunt"
  },
  {
    "regex": "force",
    "name": "Exodia Force",
    "effect": "On status effect, 5% / 10% / 15% / 20% chance Burst for 80% / 100% / 120% / 150% weapon damage in 5m / 6m / 7m / 8m.",
    "rarity": "Uncommon",
    "location": "Hok's Anvil",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/6/62/ExodiaForce.png/revision/latest/scale-to-width-down/350?cb=20171129162958",
    "info": "http://warframe.wikia.com/wiki/Exodia_Force"
  },
  {
    "regex": "contagion",
    "name": "Exodia Contation",
    "effect": "After a double jump or bullet jump, on air attack, 100% / 200% / 300% / 400% projectile damage after 30m, range determined by gravity",
    "rarity": "Uncommon",
    "location": "Event Syndicate (Plague Star)",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/2/22/ExodiaContagion.png/revision/latest/scale-to-width-down/350?cb=20171129162953",
    "info": "http://warframe.wikia.com/wiki/Exodia_Contagion"
  },
  {
    "regex": "epidemic",
    "name": "Exodia Epidemic",
    "effect": "After a double jump or bullet jump, on slam attack, Projects damaging wave that suspends enemies in the air, dealing Viral damage up to 33m away for 1s / 2s / 3s / 4s",
    "rarity": "Uncommon",
    "location": "Event Syndicate (Plague Star)",
    "thumbnail": "https://vignette.wikia.nocookie.net/warframe/images/1/1d/ExodiaEpidemic.png/revision/latest/scale-to-width-down/350?cb=20171129162956",
    "info": "http://warframe.wikia.com/wiki/Exodia_Epidemic"
  }
]

},{}],189:[function(require,module,exports){
module.exports={
  "modes": {
    "PVPMODE_ALL": {
      "value": "Any Mode"
    },
    "PVPMODE_DEATHMATCH": {
      "value": "Annihilation"
    },
    "PVPMODE_TEAMDEATHMATCH": {
      "value": "Team Annihilation"
    },
    "PVPMODE_NONE": {
      "value": "None"
    },
    "PVPMODE_CAPTURETHEFLAG": {
      "value": "Capture the Cephalon"
    },
    "PVPMODE_SPEEDBALL": {
      "value": "Lunaro"
    }
  },
  "categories": {
    "PVPChallengeTypeCategory_WEEKLY": {
      "value": "week",
      "description": "Weekly"
    },
    "PVPChallengeTypeCategory_WEEKLY_ROOT": {
      "value": "week_root",
      "description": "Weekly Category"
    },
    "PVPChallengeTypeCategory_DAILY": {
      "value": "day",
      "description": "Daily"
    },
    "PVPChallengeTypeCategory_DAILY_ROOT": {
      "value": "day_root",
      "description": "Daily Category"
    },
    "PVPChallengeTypeCategory_MODEAFFECTOR": {
      "value": "modified round",
      "description": "Modified Round"
    }
  },
  "challenges": {
    "PVPTimedChallengeKillsPrimaryEASY": {
      "title": "Primary Target",
      "description": "Kill 1 enemy with your Primary Weapon",
      "standing": 500
    },
    "PVPTimedChallengeKillsPrimaryMEDIUM": {
      "title": "Primary Target",
      "description": "Kill 4 enemies with your Primary Weapon",
      "standing": 1500
    },
    "PVPTimedChallengeKillsPrimaryHARD": {
      "title": "Focused Primary Target",
      "description": "Kill 3 enemies with your Primary Weapon in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsSecondaryEASY": {
      "title": "Secondary Target",
      "description": "Kill 1 enemy with your Secondary Weapon",
      "standing": 500
    },
    "PVPTimedChallengeKillsSecondaryMEDIUM": {
      "title": "Secondary Target",
      "description": "Kill 4 enemies with your Secondary Weapon",
      "standing": 1500
    },
    "PVPTimedChallengeKillsSecondaryHARD": {
      "title": "Focused Secondary Target",
      "description": "Kill 3 enemies with your Secondary Weapon in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsWhileSlidingEASY": {
      "title": "Slide Strike",
      "description": "Kill 1 enemy while Sliding",
      "standing": 500
    },
    "PVPTimedChallengeKillsWhileSlidingMEDIUM": {
      "title": "Slide Strike",
      "description": "Kill 4 enemies while Sliding",
      "standing": 1500
    },
    "PVPTimedChallengeKillsWhileSlidingHARD": {
      "title": "Focused Slide Strike",
      "description": "Kill 3 enemies while Sliding in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsComboEASY": {
      "title": "Dexterity",
      "description": "Kill 1 opponent using two of Melee, Guns, and Abilities",
      "standing": 500
    },
    "PVPTimedChallengeKillsComboMEDIUM": {
      "title": "Dexterity",
      "description": "Kill 4 opponents using two of Melee, Guns, and Abilities",
      "standing": 1500
    },
    "PVPTimedChallengeKillsComboHARD": {
      "title": "Focused Dexterity",
      "description": "Kill 3 opponents using two of Melee, Guns, and Abilities in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsMultiEASY": {
      "title": "Versatility",
      "description": "Kill 1 opponent using Melee, Guns, and Abilities",
      "standing": 500
    },
    "PVPTimedChallengeKillsMultiMEDIUM": {
      "title": "Versatility",
      "description": "Kill 4 opponents using Melee, Guns, and Abilities",
      "standing": 1500
    },
    "PVPTimedChallengeKillsMultiHARD": {
      "title": "Focused Versatility",
      "description": "Kill 3 opponents using Melee, Guns, and Abilities in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsStreakEASY": {
      "title": "Kill Streak",
      "description": "Go on 1 Kill Streak",
      "standing": 500
    },
    "PVPTimedChallengeKillsStreakMEDIUM": {
      "title": "Kill Streak",
      "description": "Go on 3 Kill Streaks",
      "standing": 1500
    },
    "PVPTimedChallengeKillsStreakHARD": {
      "title": "Focused Kill Streak",
      "description": "Go on 2 Kill Streaks in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsStreakStopped_EASY": {
      "title": "Streak Stopped",
      "description": "Kill 1 enemy on a Kill Streak",
      "standing": 500
    },
    "PVPTimedChallengeKillsStreakStoppedEASY": {
      "title": "Streak Stopped",
      "description": "Kill 1 enemy on a Kill Streak",
      "standing": 500
    },
    "PVPTimedChallengeKillsStreakStopped_MEDIUM": {
      "title": "Streak Stopped",
      "description": "Kill 3 enemies on a Kill Streak",
      "standing": 1500
    },
    "PVPTimedChallengeKillsStreakStoppedMEDIUM": {
      "title": "Streak Stopped",
      "description": "Kill 3 enemies on a Kill Streak",
      "standing": 1500
    },
    "PVPTimedChallengeKillsStreakStopped_HARD": {
      "title": "Focused Streak Stopped",
      "description": "Kill 2 enemies on a Kill Streak in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsStreakStoppedHARD": {
      "title": "Focused Streak Stopped",
      "description": "Kill 2 enemies on a Kill Streak in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsTargetInAirEASY": {
      "title": "Anti-air Strike",
      "description": "Kill 1 Airborne enemy",
      "standing": 500
    },
    "PVPTimedChallengeKillsTargetInAirMEDIUM": {
      "title": "Anti-air Strike",
      "description": "Kill 4 Airborne enemies",
      "standing": 1500
    },
    "PVPTimedChallengeKillsTargetInAirHARD": {
      "title": "Focused Anti-air Strike",
      "description": "Kill 3 Airborne enemies in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsWhileInAirEASY": {
      "title": "Air Strike",
      "description": "Kill 1 enemy while Airborne",
      "standing": 500
    },
    "PVPTimedChallengeKillsWhileInAirMEDIUM": {
      "title": "Air Strike",
      "description": "Kill 4 enemies while Airborne",
      "standing": 1500
    },
    "PVPTimedChallengeKillsWhileInAirHARD": {
      "title": "Focused Air Strike",
      "description": "Kill 3 enemies while Airborne in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsMeleeEASY": {
      "title": "Gladiator",
      "description": "Get 1 Melee kill",
      "standing": 500
    },
    "PVPTimedChallengeKillsMeleeMEDIUM": {
      "title": "Gladiator",
      "description": "Get 4 Melee kills",
      "standing": 1500
    },
    "PVPTimedChallengeKillsMeleeHARD": {
      "title": "Focused Gladiator",
      "description": "Get 3 Melee kills in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsPowerEASY": {
      "title": "Void-Painter",
      "description": "Get 1 Warframe Ability kills",
      "standing": 500
    },
    "PVPTimedChallengeKillsPowerMEDIUM": {
      "title": "Void-Painter",
      "description": "Get 4 Warframe Ability kills",
      "standing": 1500
    },
    "PVPTimedChallengeKillsPowerHARD": {
      "title": "Focused Void-Painter",
      "description": "Get 3 Warframe Ability kills in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsHeadShotsEASY": {
      "title": "Shootist",
      "description": "Get 1 Headshot kill",
      "standing": 500
    },
    "PVPTimedChallengeKillsHeadShotsMEDIUM": {
      "title": "Shootist",
      "description": "Get 4 Headshot kills",
      "standing": 1500
    },
    "PVPTimedChallengeKillsHeadShotsHARD": {
      "title": "Focused Shootist",
      "description": "Get 3 Headshot kills in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsStreakDominationEASY": {
      "title": "Domination",
      "description": "Kill 1 enemy without them killing you",
      "standing": 500
    },
    "PVPTimedChallengeKillsStreakDominationMEDIUM": {
      "title": "Domination",
      "description": "Kill 4 enemies without them killing you",
      "standing": 1500
    },
    "PVPTimedChallengeKillsStreakDominationHARD": {
      "title": "Focused Domination",
      "description": "Kill 3 enemies without them killing you in a match",
      "standing": 3000
    },
    "PVPTimedChallengeKillsPaybackEASY": {
      "title": "Revenge",
      "description": "Kill 1 enemy that have killed you",
      "standing": 500
    },
    "PVPTimedChallengeKillsPaybackMEDIUM": {
      "title": "Revenge",
      "description": "Kill 4 enemies that have killed you",
      "standing": 1500
    },
    "PVPTimedChallengeKillsPaybackHARD": {
      "title": "Focused Revenge",
      "description": "Kill 3 enemies that have killed you in a match",
      "standing": 3000
    },
    "PVPTimedChallengeFlagReturnEASY": {
      "title": "Liberator",
      "description": "Return your team's Cephalon 1 time",
      "standing": 500
    },
    "PVPTimedChallengeFlagReturnMEDIUM": {
      "title": "Liberator",
      "description": "Return your team's Cephalon 4 times",
      "standing": 1500
    },
    "PVPTimedChallengeFlagCaptureEASY": {
      "title": "Bandit",
      "description": "Capture 1 Cephalon",
      "standing": 500
    },
    "PVPTimedChallengeFlagCaptureMEDIUM": {
      "title": "Bandit",
      "description": "Capture 4 Cephalons",
      "standing": 1500
    },
    "PVPTimedChallengeSpeedballCatchesEASY": {
      "title": "Heads Up!",
      "description": "Catch 3 Passes from teammates",
      "standing": 1000
    },
    "PVPTimedChallengeSpeedballCatchesMEDIUM": {
      "title": "Heads Up!",
      "description": "Catch 10 Passes from teammates",
      "standing": 3000
    },
    "PVPTimedChallengeSpeedballCatchesHARD": {
      "title": "Focused Heads Up!",
      "description": "Catch 6 Passes from teammates in a match",
      "standing": 6000
    },
    "PVPTimedChallengeSpeedballInterceptionsEASY": {
      "title": "Interception!",
      "description": "Intercept 3 Passes from opponents",
      "standing": 1000
    },
    "PVPTimedChallengeSpeedballInterceptionsMEDIUM": {
      "title": "Interception!",
      "description": "Intercept 6 Passes from opponents",
      "standing": 3000
    },
    "PVPTimedChallengeSpeedballInterceptionsHARD": {
      "title": "Focused Interception!",
      "description": "Intercept 3 Passes from opponents in a match",
      "standing": 6000
    },
    "PVPTimedChallengeSpeedballStealsEASY": {
      "title": "Snatch and Grab",
      "description": "Steal the ball 3 times",
      "standing": 1000
    },
    "PVPTimedChallengeSpeedballStealsMEDIUM": {
      "title": "Snatch and Grab",
      "description": "Steal the ball 6 times",
      "standing": 3000
    },
    "PVPTimedChallengeSpeedballStealsHARD": {
      "title": "Focused Snatch and Grab",
      "description": "Steal the ball 3 times in a match",
      "standing": 3000
    },
    "PVPTimedChallengeSpeedballChecksEASY": {
      "title": "Blockade",
      "description": "Strike opponents carrying the ball 3 times",
      "standing": 1000
    },
    "PVPTimedChallengeSpeedballChecksMEDIUM": {
      "title": "Blockade",
      "description": "Strike opponents carrying the ball 10 times",
      "standing": 3000
    },
    "PVPTimedChallengeSpeedballChecksHARD": {
      "title": "Focused Blockade",
      "description": "Strike opponents carrying the ball 6 times in a match",
      "standing": 6000
    },
    "PVPTimedChallengeSpeedballPassesEASY": {
      "title": "Send It!",
      "description": "Complete 3 Successful Passes to teammates",
      "standing": 1000
    },
    "PVPTimedChallengeSpeedballPassesMEDIUM": {
      "title": "Send It!",
      "description": "Complete 6 Successful Passes to teammates",
      "standing": 3000
    },
    "PVPTimedChallengeSpeedballPassesHARD": {
      "title": "Focused Send It!",
      "description": "Complete 3 Successful Passes to teammates in a match",
      "standing": 6000
    },
    "PVPTimedChallengeSpeedballGoalsEASY": {
      "title": "Goal!",
      "description": "Score 2 Goals",
      "standing": 1000
    },
    "PVPTimedChallengeMatchCompleteEASY": {
      "title": "See it Through",
      "description": "Complete 1 match",
      "standing": 500
    },
    "PVPTimedChallengeMatchCompleteMEDIUM": {
      "title": "See it Through",
      "description": "Complete 4 matches",
      "standing": 1500
    },
    "PVPTimedChallengeWeeklyStandardSet": {
      "title": "Weekly Mission",
      "description": "Weekly Mission",
      "standing": 50000
    },
    "PVPTimedChallengeGameModeWins": {
      "title": "Match Won",
      "description": "Win 6 matches of any Game Type",
      "standing": 0
    },
    "PVPTimedChallengeGameModeComplete": {
      "title": "Match Complete",
      "description": "Complete 20 matches of any Game Type",
      "standing": 0
    },
    "PVPTimedChallengeOtherChallengeCompleteANY": {
      "title": "Conditioning",
      "description": "Complete 10 Daily Challenges",
      "standing": 0
    },
    "PVPTimedChallengeSpeedballGoalsHARD": {
      "title": "Focused Goal!",
      "description": "Score 4 Goals in a match",
      "standing": 6000
    },
    "PVPTimedChallengeKillsPayback_MEDIUM": {
      "title": "Revenge",
      "description": "Kill 3 enemies that have killed you",
      "standing": 1500
    }
  },
  "affectors": {
    "PVPTimedAffectorSuperEnergy": {
      "title": "Energy Surge",
      "description": "Energy Surge - Regain energy at a faster pace"
    },
    "PVPTimedAffectorSuperMeleeDamage": {
      "title": "Extra Melee Damage",
      "description": "Extra Melee Damage - Melee Damage is increased"
    },
    "PVPTimedAffectorSuperEverything": {
      "title": "Extra Damage",
      "description": "Extra Damage - All damage is increased"
    }
  }
}

},{}],190:[function(require,module,exports){
module.exports={
  "tags": {
    "KelaEvent": {
      "value": "Operation: Rathuum"
    },
    "KelaEventB": {
      "value": "Operation: Rathuum pt. 2"
    },
    "KelaEventBonus": {
      "value": "Endless Rathuum"
    }
  },
  "scoreVariables": {
    "KelaEvent": {
      "value": {
        "value": "100 Judgement Points"
      }
    }
  },
  "scoreMaxTags": {
    "KelaEventMax": {
      "value": {
        "value": "100 Judgement Points"
      }
    }
  }
}

},{}],191:[function(require,module,exports){
module.exports={
  "FC_CORPUS": {
    "value": "Corpus"
  },
  "FC_CORRUPTED": {
    "value": "Corrupted"
  },
  "FC_GRINEER": {
    "value": "Grineer"
  },
  "FC_INFESTATION": {
    "value": "Infested"
  },
  "FC_OROKIN": {
    "value": "Orokin"
  },
  "FC_SENTIENT": {
    "value": "Sentient"
  }
}
},{}],192:[function(require,module,exports){
module.exports={
  "VoidT1": {
    "value": "Lith",
    "num": 1
  },
  "VoidT2": {
    "value": "Meso",
    "num": 2
  },
  "VoidT3": {
    "value": "Neo",
    "num": 3
  },
  "VoidT4": {
    "value": "Axi",
    "num": 4
  },
  "VoidT5": {
    "value": "Requiem",
    "num": 5
  }
}

},{}],193:[function(require,module,exports){
module.exports={
  "/ee/types/engine/mover": {
    "value": "Mover"
  },
  "/lotus/characters/sentient/hunhow/hunhowpieces/hunhowhipswreckagequest": {
    "value": "Hunhow Hips Wreckage Quest"
  },
  "/lotus/characters/tenno/accessory/scarves/grnbannerscarf/grnbannerscarfitem": {
    "value": "Vanquished Banner"
  },
  "/lotus/characters/tenno/accessory/scarves/u17intermscarf/u17intermscarfitem": {
    "value": "Udyat Syandana"
  },
  "/lotus/language/alerts/aladcargoevent": {
    "value": "Suspicious Shipment"
  },
  "/lotus/language/alerts/alertrewardcategoryaura": {
    "value": "Aura"
  },
  "/lotus/language/alerts/alertrewardcategoryblueprint": {
    "value": "Blueprint"
  },
  "/lotus/language/alerts/alertrewardcategoryitem": {
    "value": "Item"
  },
  "/lotus/language/alerts/alertrewardcategorymod": {
    "value": "Mod"
  },
  "/lotus/language/alerts/alertrewardcategoryresource": {
    "value": "Resource"
  },
  "/lotus/language/alerts/alertrewardcategorystance": {
    "value": "Stance Mod"
  },
  "/lotus/language/alerts/assassinationdesc1": {
    "value": "Enemy VIP Located"
  },
  "/lotus/language/alerts/assassinationdesc10": {
    "value": "Enemy Intelligence Officer Located"
  },
  "/lotus/language/alerts/assassinationdesc11": {
    "value": "Elite Troop Located"
  },
  "/lotus/language/alerts/assassinationdesc12": {
    "value": "Enemy Ambassador Located"
  },
  "/lotus/language/alerts/assassinationdesc13": {
    "value": "Enemy Robotic Archetype Located"
  },
  "/lotus/language/alerts/assassinationdesc14": {
    "value": "Enemy Officer Located"
  },
  "/lotus/language/alerts/assassinationdesc15": {
    "value": "Enemy Sniper Located"
  },
  "/lotus/language/alerts/assassinationdesc2": {
    "value": "Enemy Ship Commander Located"
  },
  "/lotus/language/alerts/assassinationdesc3": {
    "value": "Enemy Research Scientist Located"
  },
  "/lotus/language/alerts/assassinationdesc4": {
    "value": "Enemy Bureaucrat Located"
  },
  "/lotus/language/alerts/assassinationdesc5": {
    "value": "Enemy Munitions Officer Located"
  },
  "/lotus/language/alerts/assassinationdesc6": {
    "value": "Enemy Diplomat Located"
  },
  "/lotus/language/alerts/assassinationdesc7": {
    "value": "Enemy Spy Located"
  },
  "/lotus/language/alerts/assassinationdesc8": {
    "value": "Enemy Assassin Located"
  },
  "/lotus/language/alerts/assassinationdesc9": {
    "value": "Enemy Operative Located"
  },
  "/lotus/language/alerts/capturedesc1": {
    "value": "Fugitive Located"
  },
  "/lotus/language/alerts/capturedesc10": {
    "value": "Enemy Research Scientist Located"
  },
  "/lotus/language/alerts/capturedesc11": {
    "value": "Enemy Weapons Trader Located"
  },
  "/lotus/language/alerts/capturedesc12": {
    "value": "Enemy Conspirator Located"
  },
  "/lotus/language/alerts/capturedesc13": {
    "value": "Relic Hunter Located"
  },
  "/lotus/language/alerts/capturedesc14": {
    "value": "Enemy Courier Located"
  },
  "/lotus/language/alerts/capturedesc15": {
    "value": "Capture And Interrogate Enemy Operative"
  },
  "/lotus/language/alerts/capturedesc2": {
    "value": "Enemy Operative Located"
  },
  "/lotus/language/alerts/capturedesc3": {
    "value": "Enemy Spy Located"
  },
  "/lotus/language/alerts/capturedesc4": {
    "value": "Enemy Assassin Located"
  },
  "/lotus/language/alerts/capturedesc5": {
    "value": "Enemy Diplomat Located"
  },
  "/lotus/language/alerts/capturedesc6": {
    "value": "Subdue Enemy Ship's Commander"
  },
  "/lotus/language/alerts/capturedesc7": {
    "value": "Subdue Facility Commander"
  },
  "/lotus/language/alerts/capturedesc8": {
    "value": "Blackmarket Trader Located"
  },
  "/lotus/language/alerts/capturedesc9": {
    "value": "Research Facility Director Located"
  },
  "/lotus/language/alerts/corpuslootship": {
    "value": "Corpus Treasury Ship Located"
  },
  "/lotus/language/alerts/counterinteldesc1": {
    "value": "Network Vulnerability Detected"
  },
  "/lotus/language/alerts/counterinteldesc10": {
    "value": "Enemy Comm Satellite Vulnerable"
  },
  "/lotus/language/alerts/counterinteldesc11": {
    "value": "Reconfigure Enemy Ship's Propulsion System"
  },
  "/lotus/language/alerts/counterinteldesc12": {
    "value": "Reconfigure Enemy Ship's Defense System"
  },
  "/lotus/language/alerts/counterinteldesc13": {
    "value": "Reconfigure Enemy Ship's Shields"
  },
  "/lotus/language/alerts/counterinteldesc14": {
    "value": "Contaminate Research Data"
  },
  "/lotus/language/alerts/counterinteldesc15": {
    "value": "Reprogram Turret Targeting"
  },
  "/lotus/language/alerts/counterinteldesc16": {
    "value": "Plant A Bug Inside Research Facility"
  },
  "/lotus/language/alerts/counterinteldesc17": {
    "value": "Plant A Bug On Enemy Vessel"
  },
  "/lotus/language/alerts/counterinteldesc18": {
    "value": "Plant A Bug Inside Enemy Facility"
  },
  "/lotus/language/alerts/counterinteldesc19": {
    "value": "Corrupt The Ship's Network Protocols"
  },
  "/lotus/language/alerts/counterinteldesc2": {
    "value": "Enemy Comm Station Vulnerable"
  },
  "/lotus/language/alerts/counterinteldesc20": {
    "value": "Corrupt The Facility's Network Protocols"
  },
  "/lotus/language/alerts/counterinteldesc21": {
    "value": "Upload Virus To Network"
  },
  "/lotus/language/alerts/counterinteldesc22": {
    "value": "Reprogram Robotic Control Terminals"
  },
  "/lotus/language/alerts/counterinteldesc23": {
    "value": "Bypass Ship's Security Measures"
  },
  "/lotus/language/alerts/counterinteldesc24": {
    "value": "Redirect Enemy Flagship"
  },
  "/lotus/language/alerts/counterinteldesc25": {
    "value": "Corrupt Robotic Archetype Data"
  },
  "/lotus/language/alerts/counterinteldesc3": {
    "value": "Redirect Enemy Vessel"
  },
  "/lotus/language/alerts/counterinteldesc4": {
    "value": "Transmit Corrupt Data To Computer Core"
  },
  "/lotus/language/alerts/counterinteldesc5": {
    "value": "Upload Counter Intel To Enemy Satellites"
  },
  "/lotus/language/alerts/counterinteldesc6": {
    "value": "Reconfigure Enemy Ship's Navigation System"
  },
  "/lotus/language/alerts/counterinteldesc7": {
    "value": "Reconfigure Enemy Ship's Weapons System"
  },
  "/lotus/language/alerts/counterinteldesc8": {
    "value": "Reconfigure Enemy Ship's Targeting System"
  },
  "/lotus/language/alerts/counterinteldesc9": {
    "value": "Reconfigure Enemy Ship's Comm System"
  },
  "/lotus/language/alerts/darvomobiledefensedesc": {
    "value": "After provoking the wrong people, the independent 'merchant' Darvo had to go into hiding. Now he needs your help so that he can get his business back on track."
  },
  "/lotus/language/alerts/darvomobiledefensetitle": {
    "value": "A Favor for Darvo"
  },
  "/lotus/language/alerts/darvorescuetitle": {
    "value": "Ties That Bind"
  },
  "/lotus/language/alerts/defensedesc1": {
    "value": "Freighter Ambush"
  },
  "/lotus/language/alerts/defensedesc10": {
    "value": "Defend Enemy Science Lab"
  },
  "/lotus/language/alerts/defensedesc11": {
    "value": "Secure The Artifacts"
  },
  "/lotus/language/alerts/defensedesc11long": {
    "value": "A rare artifact has been ambushed in transit. Keep it out of enemy hands."
  },
  "/lotus/language/alerts/defensedesc12": {
    "value": "Weapons Cache Compromised"
  },
  "/lotus/language/alerts/defensedesc13": {
    "value": "Secure The Rubedo Mining Outpost"
  },
  "/lotus/language/alerts/defensedesc14": {
    "value": "Secure Derelict Ship"
  },
  "/lotus/language/alerts/defensedesc15": {
    "value": "Repel Enemy Attack"
  },
  "/lotus/language/alerts/defensedesc16": {
    "value": "Protect Research Scientist"
  },
  "/lotus/language/alerts/defensedesc17": {
    "value": "Solar Rail Ambush"
  },
  "/lotus/language/alerts/defensedesc18": {
    "value": "Protect Hostage"
  },
  "/lotus/language/alerts/defensedesc19": {
    "value": "Protect Sensitive Data"
  },
  "/lotus/language/alerts/defensedesc2": {
    "value": "Research Facility Ambush"
  },
  "/lotus/language/alerts/defensedesc20": {
    "value": "Secure The Computer Core"
  },
  "/lotus/language/alerts/defensedesc21": {
    "value": "Research Analysis Compromised"
  },
  "/lotus/language/alerts/defensedesc3": {
    "value": "Mining Facility Ambush"
  },
  "/lotus/language/alerts/defensedesc4": {
    "value": "Defend Data Core During Transmission"
  },
  "/lotus/language/alerts/defensedesc5": {
    "value": "Warframe Compromised"
  },
  "/lotus/language/alerts/defensedesc6": {
    "value": "Enemy Informant Compromised"
  },
  "/lotus/language/alerts/defensedesc7": {
    "value": "Tenno Operative Compromised"
  },
  "/lotus/language/alerts/defensedesc8": {
    "value": "Secure Ship Cargo"
  },
  "/lotus/language/alerts/defensedesc9": {
    "value": "Hold Out For Reinforcements"
  },
  "/lotus/language/alerts/exterminationdesc1": {
    "value": "Tenno Distress Signal"
  },
  "/lotus/language/alerts/exterminationdesc10": {
    "value": "Artifact Recovery Troops Located"
  },
  "/lotus/language/alerts/exterminationdesc11": {
    "value": "Enemy Shock Troops Located"
  },
  "/lotus/language/alerts/exterminationdesc12": {
    "value": "Clear And Secure Enemy Vessel"
  },
  "/lotus/language/alerts/exterminationdesc13": {
    "value": "Defeat Enemy Ambush"
  },
  "/lotus/language/alerts/exterminationdesc14": {
    "value": "Clear Resistance"
  },
  "/lotus/language/alerts/exterminationdesc15": {
    "value": "Secure Excavation Site"
  },
  "/lotus/language/alerts/exterminationdesc2": {
    "value": "Unknown Distress Signal Located"
  },
  "/lotus/language/alerts/exterminationdesc3": {
    "value": "Enemy Security Forces Located"
  },
  "/lotus/language/alerts/exterminationdesc4": {
    "value": "Enemy Support Squadrons Located"
  },
  "/lotus/language/alerts/exterminationdesc5": {
    "value": "Enemy Task Force Located"
  },
  "/lotus/language/alerts/exterminationdesc6": {
    "value": "Elite Troops Located"
  },
  "/lotus/language/alerts/exterminationdesc7": {
    "value": "Defeat Enemy Defense Forces"
  },
  "/lotus/language/alerts/exterminationdesc8": {
    "value": "Enemy Escorts Located"
  },
  "/lotus/language/alerts/exterminationdesc9": {
    "value": "Enemy Recon Unit Located"
  },
  "/lotus/language/alerts/grineerlootship": {
    "value": "Grineer Treasury Ship Located"
  },
  "/lotus/language/alerts/infestedepidemiceventa": {
    "value": "Mutalist Incursion"
  },
  "/lotus/language/alerts/inteldesc1": {
    "value": "Research Facility Discovered"
  },
  "/lotus/language/alerts/inteldesc10": {
    "value": "Acquire Security Logs"
  },
  "/lotus/language/alerts/inteldesc11": {
    "value": "Scan Ship For Suspicious Objects"
  },
  "/lotus/language/alerts/inteldesc12": {
    "value": "Scan Enemy Satellites"
  },
  "/lotus/language/alerts/inteldesc13": {
    "value": "Investigate Ship In Distress"
  },
  "/lotus/language/alerts/inteldesc14": {
    "value": "Scan Ship's Cargo Logs"
  },
  "/lotus/language/alerts/inteldesc15": {
    "value": "Enemy Research Located"
  },
  "/lotus/language/alerts/inteldesc16": {
    "value": "Locate And Scan Cargo Stashes"
  },
  "/lotus/language/alerts/inteldesc17": {
    "value": "Investigate Distress Beacon"
  },
  "/lotus/language/alerts/inteldesc18": {
    "value": "Search Enemy Ship's Databanks"
  },
  "/lotus/language/alerts/inteldesc19": {
    "value": "Investigate The Derelict Ship"
  },
  "/lotus/language/alerts/inteldesc2": {
    "value": "Artifact Research Facility Discovered"
  },
  "/lotus/language/alerts/inteldesc20": {
    "value": "Explore Hidden Base"
  },
  "/lotus/language/alerts/inteldesc21": {
    "value": "Infiltrate Research Station"
  },
  "/lotus/language/alerts/inteldesc22": {
    "value": "Investigate Mining Facility"
  },
  "/lotus/language/alerts/inteldesc23": {
    "value": "Examine Ship's Network Protocols"
  },
  "/lotus/language/alerts/inteldesc24": {
    "value": "Examine Facility Network Protocols"
  },
  "/lotus/language/alerts/inteldesc25": {
    "value": "Locate Security Codes"
  },
  "/lotus/language/alerts/inteldesc26": {
    "value": "Enemy Transmissions Located"
  },
  "/lotus/language/alerts/inteldesc27": {
    "value": "Enemy Freighter Located"
  },
  "/lotus/language/alerts/inteldesc28": {
    "value": "Enemy Cargo Hold Located"
  },
  "/lotus/language/alerts/inteldesc29": {
    "value": "Enemy Base Located"
  },
  "/lotus/language/alerts/inteldesc3": {
    "value": "Weapons Research Facility Discovered"
  },
  "/lotus/language/alerts/inteldesc30": {
    "value": "Enemy Asteroid Facility Located"
  },
  "/lotus/language/alerts/inteldesc31": {
    "value": "Research Station Located"
  },
  "/lotus/language/alerts/inteldesc32": {
    "value": "Distress Call Located"
  },
  "/lotus/language/alerts/inteldesc33": {
    "value": "Disable Security Beacons"
  },
  "/lotus/language/alerts/inteldesc34": {
    "value": "Secret Enemy Facility Located"
  },
  "/lotus/language/alerts/inteldesc35": {
    "value": "Merchant Ship Located"
  },
  "/lotus/language/alerts/inteldesc36": {
    "value": "Enemy Research Analysis Located"
  },
  "/lotus/language/alerts/inteldesc37": {
    "value": "Investigate Enemy Distress Signal"
  },
  "/lotus/language/alerts/inteldesc38": {
    "value": "Collect T-Cyte Reseach Samples"
  },
  "/lotus/language/alerts/inteldesc39": {
    "value": "Enemy Manufacturing Facility Located"
  },
  "/lotus/language/alerts/inteldesc4": {
    "value": "Mining Research Station Discovered"
  },
  "/lotus/language/alerts/inteldesc40": {
    "value": "Cloning Research Facility Located"
  },
  "/lotus/language/alerts/inteldesc41": {
    "value": "Intercept Enemy Ship"
  },
  "/lotus/language/alerts/inteldesc42": {
    "value": "Bypass Data Core Lockout"
  },
  "/lotus/language/alerts/inteldesc43": {
    "value": "Locate And Acquire Robotic Archetype Data"
  },
  "/lotus/language/alerts/inteldesc44": {
    "value": "Investigate Enemy Facility Distress Signal"
  },
  "/lotus/language/alerts/inteldesc45": {
    "value": "Acquire Enemy Vessel Cargo Records"
  },
  "/lotus/language/alerts/inteldesc46": {
    "value": "Investigate Excavation Site"
  },
  "/lotus/language/alerts/inteldesc47": {
    "value": "Investigate Enemy Outpost"
  },
  "/lotus/language/alerts/inteldesc5": {
    "value": "Intelligence Vessel Discovered"
  },
  "/lotus/language/alerts/inteldesc6": {
    "value": "Enemy Ship Located"
  },
  "/lotus/language/alerts/inteldesc7": {
    "value": "Weapon Prototype Located"
  },
  "/lotus/language/alerts/inteldesc8": {
    "value": "Weapons Research Located"
  },
  "/lotus/language/alerts/inteldesc9": {
    "value": "Acquire Ship's Logs"
  },
  "/lotus/language/alerts/lotusgiftdesc": {
    "value": "Gift From The Lotus"
  },
  "/lotus/language/alerts/nightmarealertdesc": {
    "value": "Nightmare Mod Located"
  },
  "/lotus/language/alerts/orokinoverload": {
    "value": "Orokin Overload"
  },
  "/lotus/language/alerts/raiddesc1": {
    "value": "Weapons Depot Discovered"
  },
  "/lotus/language/alerts/raiddesc10": {
    "value": "Merchant Ship Discovered"
  },
  "/lotus/language/alerts/raiddesc11": {
    "value": "Artifact Research Discovered"
  },
  "/lotus/language/alerts/raiddesc12": {
    "value": "Experimental Weapons Cache Discovered"
  },
  "/lotus/language/alerts/raiddesc13": {
    "value": "Orokin Artifacts Discovered"
  },
  "/lotus/language/alerts/raiddesc14": {
    "value": "Warframe Discovered"
  },
  "/lotus/language/alerts/raiddesc15": {
    "value": "Enemy Tech Discovered"
  },
  "/lotus/language/alerts/raiddesc16": {
    "value": "Enemy Flagship Discovered"
  },
  "/lotus/language/alerts/raiddesc17": {
    "value": "Enemy Data Core Discovered"
  },
  "/lotus/language/alerts/raiddesc18": {
    "value": "Armory Depot Discovered"
  },
  "/lotus/language/alerts/raiddesc19": {
    "value": "Hidden Base Discovered"
  },
  "/lotus/language/alerts/raiddesc2": {
    "value": "Artifact Depot Discovered"
  },
  "/lotus/language/alerts/raiddesc20": {
    "value": "Clandestine Asteroid Base Discovered"
  },
  "/lotus/language/alerts/raiddesc21": {
    "value": "Artifact Dig Site Discovered"
  },
  "/lotus/language/alerts/raiddesc22": {
    "value": "Experimental Ballistics Facility Located"
  },
  "/lotus/language/alerts/raiddesc23": {
    "value": "Weapons Testing Facility Discovered"
  },
  "/lotus/language/alerts/raiddesc3": {
    "value": "Rubedo Depot Discovered"
  },
  "/lotus/language/alerts/raiddesc4": {
    "value": "Mining Station Discovered"
  },
  "/lotus/language/alerts/raiddesc5": {
    "value": "Enemy Intelligence Vessel Discovered"
  },
  "/lotus/language/alerts/raiddesc6": {
    "value": "Supply Depot Located"
  },
  "/lotus/language/alerts/raiddesc7": {
    "value": "Armory Depot Discovered"
  },
  "/lotus/language/alerts/raiddesc8": {
    "value": "Enemy Supply Vessel Discovered"
  },
  "/lotus/language/alerts/raiddesc9": {
    "value": "Blackmarket Ship Discovered"
  },
  "/lotus/language/alerts/rescuedesc1": {
    "value": "Hostage Situation"
  },
  "/lotus/language/alerts/rescuedesc10": {
    "value": "Weapons Researcher Located"
  },
  "/lotus/language/alerts/rescuedesc11": {
    "value": "Distress Signal Located"
  },
  "/lotus/language/alerts/rescuedesc12": {
    "value": "Foreign Emissary Located"
  },
  "/lotus/language/alerts/rescuedesc13": {
    "value": "Blackmarket Weapons Dealer Located"
  },
  "/lotus/language/alerts/rescuedesc14": {
    "value": "Abducted Civilian"
  },
  "/lotus/language/alerts/rescuedesc2": {
    "value": "Enemy Informant Located"
  },
  "/lotus/language/alerts/rescuedesc3": {
    "value": "Tenno Operative Located"
  },
  "/lotus/language/alerts/rescuedesc4": {
    "value": "Tenno Sympathizer Located"
  },
  "/lotus/language/alerts/rescuedesc5": {
    "value": "Detained Research Scientist Located"
  },
  "/lotus/language/alerts/rescuedesc6": {
    "value": "Detained Diplomat Located"
  },
  "/lotus/language/alerts/rescuedesc7": {
    "value": "Detained Refugee Located"
  },
  "/lotus/language/alerts/rescuedesc8": {
    "value": "Enemy Turncoat Located"
  },
  "/lotus/language/alerts/rescuedesc9": {
    "value": "Enemy Envoy Located"
  },
  "/lotus/language/alerts/sabotagedesc1": {
    "value": "Enemy Transport Found"
  },
  "/lotus/language/alerts/sabotagedesc10": {
    "value": "Enemy Comm Satellite Located"
  },
  "/lotus/language/alerts/sabotagedesc11": {
    "value": "Deactivate Shields"
  },
  "/lotus/language/alerts/sabotagedesc12": {
    "value": "Shutdown Ship's Fission Core"
  },
  "/lotus/language/alerts/sabotagedesc13": {
    "value": "Disable Enemy Ship's Power Systems"
  },
  "/lotus/language/alerts/sabotagedesc14": {
    "value": "Enemy Munitions Dump Located"
  },
  "/lotus/language/alerts/sabotagedesc15": {
    "value": "Destroy Experimental Weapons"
  },
  "/lotus/language/alerts/sabotagedesc16": {
    "value": "Destroy Research Station's Defenses"
  },
  "/lotus/language/alerts/sabotagedesc17": {
    "value": "Destroy Research Vessel's Defenses"
  },
  "/lotus/language/alerts/sabotagedesc18": {
    "value": "Destroy Enemy Base Defenses"
  },
  "/lotus/language/alerts/sabotagedesc19": {
    "value": "Disable Enemy Satellites"
  },
  "/lotus/language/alerts/sabotagedesc2": {
    "value": "Enemy Facility Found"
  },
  "/lotus/language/alerts/sabotagedesc20": {
    "value": "Disable Navigation Beacon"
  },
  "/lotus/language/alerts/sabotagedesc21": {
    "value": "Destroy Enemy Devices"
  },
  "/lotus/language/alerts/sabotagedesc22": {
    "value": "Override Ship's Security Systems"
  },
  "/lotus/language/alerts/sabotagedesc23": {
    "value": "Override Facility's Security Systems"
  },
  "/lotus/language/alerts/sabotagedesc24": {
    "value": "Deactivate Computer Core Defenses"
  },
  "/lotus/language/alerts/sabotagedesc25": {
    "value": "Disable Ship Artillery Systems"
  },
  "/lotus/language/alerts/sabotagedesc26": {
    "value": "Sabotage Enemy Research Facility"
  },
  "/lotus/language/alerts/sabotagedesc27": {
    "value": "Destroy Munitions Stockpile"
  },
  "/lotus/language/alerts/sabotagedesc28": {
    "value": "Disable Communications Network"
  },
  "/lotus/language/alerts/sabotagedesc29": {
    "value": "Destroy Ammo Cache"
  },
  "/lotus/language/alerts/sabotagedesc3": {
    "value": "Weapons Depot Found"
  },
  "/lotus/language/alerts/sabotagedesc4": {
    "value": "Disable Enemy Warship"
  },
  "/lotus/language/alerts/sabotagedesc5": {
    "value": "Destroy Enemy Transport"
  },
  "/lotus/language/alerts/sabotagedesc6": {
    "value": "Destroy Enemy Facility"
  },
  "/lotus/language/alerts/sabotagedesc7": {
    "value": "Destroy Comm Station"
  },
  "/lotus/language/alerts/sabotagedesc8": {
    "value": "Deactivate Enemy Shields"
  },
  "/lotus/language/alerts/sabotagedesc9": {
    "value": "Deactivate Turrets"
  },
  "/lotus/language/alerts/savedarvotitle": {
    "value": "Corpus Bust"
  },
  "/lotus/language/alerts/survivaldesc1": {
    "value": "Survive or DIE"
  },
  "/lotus/language/alerts/survivaldesc1long": {
    "value": "Replenish your depleting oxygen supply by killing enemies and holding out for supply drops."
  },
  "/lotus/language/alerts/tacalertproxyrebellion": {
    "value": "Tactical Alert: Proxy Rebelllion"
  },
  "/lotus/language/alerts/tacalertwaterfight": {
    "value": "Tactical Alert: Dog Days"
  },
  "/lotus/language/alerts/wolfalert": {
    "value": "Tactical Alert: Wolf Hunt"
  },
  "/lotus/language/bosses/bossthejackal": {
    "value": "Boss The Jackal"
  },
  "/lotus/language/bosses/bosstylregor": {
    "value": "Boss Tyl Regor"
  },
  "/lotus/language/communitymessages/joindiscord": {
    "value": "Join the official Warframe Discord server"
  },
  "/lotus/language/events/amalgameventname": {
    "value": "Operation: Hostile Mergers"
  },
  "/lotus/language/events/amalgameventscoreattackname": {
    "value": "Operation: Hostile Mergers - Endurance"
  },
  "/lotus/language/events/amalgameventscoreattacktooltip": {
    "value": "Operation: Hostile Mergers - Endurance"
  },
  "/lotus/language/events/amalgameventtooltip": {
    "value": "Operation: Hostile Mergers"
  },
  "/lotus/language/events/halloweennaberusdesc": {
    "value": "Visit Daughter for Naberus Treats"
  },
  "/lotus/language/events/halloweennaberusname": {
    "value": "Nights of Naberus"
  },
  "/lotus/language/events/primevaulttrader": {
    "value": "Prime Resurgence"
  },
  "/lotus/language/events/primevaulttraderdesc": {
    "value": "Assemble the Prime Vanguard! For a limited time only, trade Aya with Varzia Dax in exchange for Vault Relics or Regal Aya for instant access to Prime Warframes, Weapons and Gear to reinforce your Arsenal for the coming war."
  },
  "/lotus/language/events/tacalerthalloweenlantern": {
    "value": "Tactical Alert: Hallowed Flame"
  },
  "/lotus/language/events/tacalerthalloweenlanternendless": {
    "value": "Tactical Alert: Hallowed Flame - Endless"
  },
  "/lotus/language/g1quests/anniversary2017missiontitle": {
    "value": "Gifts of the Lotus - Stolen!"
  },
  "/lotus/language/g1quests/deck12eventdesc": {
    "value": "Take on the Exploiter Orb"
  },
  "/lotus/language/g1quests/deck12eventname": {
    "value": "Operation: Buried Debts - Deck 12"
  },
  "/lotus/language/g1quests/deck12glyphhunteventdesc": {
    "value": "Find and scan data-hashes on the Orb Vallis"
  },
  "/lotus/language/g1quests/deck12glyphhunteventname": {
    "value": "Operation: Buried Debts"
  },
  "/lotus/language/g1quests/flotillaoperation": {
    "value": "Scarlet Spear"
  },
  "/lotus/language/g1quests/fomorianrevengebattlename": {
    "value": "Balor Fomorian"
  },
  "/lotus/language/g1quests/heatfissureseventdesc": {
    "value": "Seal fractures across the Orb Vallis"
  },
  "/lotus/language/g1quests/heatfissureseventname": {
    "value": "Thermia Fractures"
  },
  "/lotus/language/g1quests/kelaeventbonustitle": {
    "value": "Endless Rathuum"
  },
  "/lotus/language/g1quests/kelaeventgoala": {
    "value": "Judgement Points Earned"
  },
  "/lotus/language/g1quests/kelaeventgoalb": {
    "value": "Kela Defeated"
  },
  "/lotus/language/g1quests/kelaeventgoalc": {
    "value": "Executioners Defeated"
  },
  "/lotus/language/g1quests/kelaeventtitle": {
    "value": "Operation: Rathuum"
  },
  "/lotus/language/g1quests/kelaeventtitleb": {
    "value": "Kela de Thaym's Court"
  },
  "/lotus/language/g1quests/projectindexendlessgoal": {
    "value": "Index Points"
  },
  "/lotus/language/g1quests/projectindexendlesstitle": {
    "value": "Project Index: Endurance"
  },
  "/lotus/language/g1quests/projectindextitle": {
    "value": "Project Index"
  },
  "/lotus/language/g1quests/projectnightwatchtacalerttitle": {
    "value": "Long Shadow Tactical Alert"
  },
  "/lotus/language/g1quests/tacalerthalloweentitle": {
    "value": "Hallowed Nightmares Tactical Alert"
  },
  "/lotus/language/g1quests/tacalertninjavarianttitle": {
    "value": "Quick Steel"
  },
  "/lotus/language/g1quests/tacalertninjavarianttooltip": {
    "value": "Razor sharp Nikana clash with bullet fast Hikou in this amped-up deathmatch variant. Win (Place in top 3) = 3 Points. Loss = 1 Point."
  },
  "/lotus/language/g1quests/waroncorpusdesc": {
    "value": "Community Goal: Kill Corpus Crewmen of all types to unlock a Double Credits weekend in March!"
  },
  "/lotus/language/g1quests/waroncorpustitle": {
    "value": "War on Corpus"
  },
  "/lotus/language/g1quests/warongrineerdesc": {
    "value": "Community Goal: Kill Grineer Lancers of all types to unlock a Double Affinity weekend in March!"
  },
  "/lotus/language/g1quests/warongrineertitle": {
    "value": "War on Grineer"
  },
  "/lotus/language/g1quests/waroninfesteddesc": {
    "value": "Community Goal: Kill Infested Chargers to unlock a Double Resource weekend in March!"
  },
  "/lotus/language/g1quests/waroninfestedtitle": {
    "value": "War on Infested"
  },
  "/lotus/language/game/areacasteracolyte": {
    "value": "Misery"
  },
  "/lotus/language/game/burstcasteracolyte": {
    "value": "Angst"
  },
  "/lotus/language/game/controlacolyte": {
    "value": "Torment"
  },
  "/lotus/language/game/duellistacolyte": {
    "value": "Violence"
  },
  "/lotus/language/game/heavyacolyte": {
    "value": "Malice"
  },
  "/lotus/language/game/rogueacolyte": {
    "value": "Mania"
  },
  "/lotus/language/gamemodes/recurringghoulalert": {
    "value": "Ghoul Purge"
  },
  "/lotus/language/gamemodes/recurringghoulalertdesc": {
    "value": "Help Konzu rid the plains of Grineer Ghouls"
  },
  "/lotus/language/infestedplainsevent/infestedplainsbountydesc": {
    "value": "Steal Vay Hek's Thrax Toxin, mix it, and poison the Infested Boil growing in the center of the plains."
  },
  "/lotus/language/infestedplainsevent/infestedplainsbountyname": {
    "value": "Plague Star"
  },
  "/lotus/language/items/eventdoubleaffinitydesc": {
    "value": "Doubles the amount you get from pickups and mission rewards."
  },
  "/lotus/language/items/eventdoubleaffinityname": {
    "value": "Event Affinity Booster"
  },
  "/lotus/language/items/eventdoublecreditsdesc": {
    "value": "Doubles the amount you get from pickups and mission rewards."
  },
  "/lotus/language/items/eventdoublecreditsname": {
    "value": "Event Credit Booster"
  },
  "/lotus/language/items/eventdoubleresourcedesc": {
    "value": "Doubles the amount you get from pickups and mission rewards."
  },
  "/lotus/language/items/eventdoubleresourcename": {
    "value": "Event Resource Booster"
  },
  "/lotus/language/items/furaxwraithname": {
    "desc": "These Wraith gauntlets have been augmented for power.",
    "value": "Furax Wraith"
  },
  "/lotus/language/items/kelaeventbadgename": {
    "desc": "Awarded to those who stood against Kela De Thaym and her Executioners.",
    "value": "Rathuum Badge"
  },
  "/lotus/language/items/kelaeventdogtagname": {
    "desc": "To be delivered to Steel Meridian or chosen Syndicate in the relay.",
    "value": "Rathuum Prisoner Coordinates"
  },
  "/lotus/language/items/orokinreactor": {
    "value": "Orokin Reactor"
  },
  "/lotus/language/locations/relaystationtennocon": {
    "value": "TennoCon Relay"
  },
  "/lotus/language/locations/relaystationtennocondesc": {
    "value": "Exclusive Digital ticket holder Relay right this way!"
  },
  "/lotus/language/menu/corpusinvasiongeneric": {
    "value": "Corpus Siege"
  },
  "/lotus/language/menu/corpusrazorbackproject": {
    "value": "Razorback Armada"
  },
  "/lotus/language/menu/grineerinvasiongeneric": {
    "value": "Grineer Offensive"
  },
  "/lotus/language/menu/grineerinvasionleader": {
    "value": "Grineer Faction"
  },
  "/lotus/language/menu/infestedinvasionboss": {
    "value": "Phorid Manifestation"
  },
  "/lotus/language/menu/infestedinvasionending": {
    "value": "Infestation Subsiding"
  },
  "/lotus/language/menu/infestedinvasiongeneric": {
    "value": "Infested Outbreak"
  },
  "/lotus/language/menu/razorbackarmadascorehint": {
    "value": "Razorbacks destroyed"
  },
  "/lotus/language/messages/orbheisteventrewardainboxmessagebody": {
    "value": "You're getting the hang of it. We just wanted to send you a little something by way of encourangement. Don't let up."
  },
  "/lotus/language/messages/orbheisteventrewardainboxmessagetitle": {
    "value": "Vallis Fractures: A Token of Appreciation"
  },
  "/lotus/language/messages/orbheisteventrewardbinboxmessagebody": {
    "value": "You're doing good work, Sparky. At the current rate Smokefinger charts a plateau in seismic activity before long. That's good news for Fortuna. Keep it up."
  },
  "/lotus/language/messages/orbheisteventrewardbinboxmessagetitle": {
    "value": "Vallis Fractures: I Think It's Working"
  },
  "/lotus/language/messages/orbheisteventrewardcinboxmessagebody": {
    "value": "The Vallis is more stable these days, thanks to the work you're doing. But we've still got fractures erupting every day, and until Nef concedes the threat we have to take care of ourselves. Find them. Seal them. We're counting on you."
  },
  "/lotus/language/messages/orbheisteventrewardcinboxmessagetitle": {
    "value": "Vallis Fractures: Looking Good!"
  },
  "/lotus/language/messages/orbheisteventrewarddinboxmessagebody": {
    "value": "I clock 75-plus fractures sealed. I shudder to think what state we'd be in if we didn't have you helping us out like this. Kids are shutting down sound in their racks, knowing you're out there. Thank you."
  },
  "/lotus/language/messages/orbheisteventrewarddinboxmessagetitle": {
    "value": "Vallis Fractures: Real Progress"
  },
  "/lotus/language/sigils/kelaeventsigilname": {
    "desc": "A sigil commemorating the liberation of defectors from the Grineer.",
    "value": "Rathuum Sigil"
  },
  "/lotus/levels/proc/corpus/corpusgascitydisruption": {
    "value": "Gas City Disruption"
  },
  "/lotus/levels/proc/corpus/corpusshiparmoredjackalboss": {
    "value": "Razorback Assassination"
  },
  "/lotus/levels/proc/grineer/grineeroceansurvival": {
    "value": "Sealab Survival"
  },
  "/lotus/objects/crpmegaexplodingbarrel": {
    "value": "Crp Mega Exploding Barrel"
  },
  "/lotus/objects/explodingbarrelfrozen": {
    "value": "Exploding Barrel Frozen"
  },
  "/lotus/objects/gameplay/orofusexadeco": {
    "value": "Oro Fusex A Deco"
  },
  "/lotus/objects/gameplay/orofusexbdeco": {
    "value": "Oro Fusex B Deco"
  },
  "/lotus/objects/grineer/props/computers/grnpanelablackdeco": {
    "value": "Grn Panel A Black Deco"
  },
  "/lotus/objects/grineer/props/computers/grnpanelaraiddeco": {
    "value": "Grn Panel A Raid Deco"
  },
  "/lotus/objects/grnexplodingbarrel": {
    "value": "Grn Exploding Barrel"
  },
  "/lotus/objects/guild/structural/curvedglassinteriordeco": {
    "value": "Curved Glass Interior Deco"
  },
  "/lotus/objects/guild/structural/vents/destroyablevent": {
    "value": "Destroyable Vent"
  },
  "/lotus/objects/orokin/props/collectibleseriesone": {
    "value": "Collectible Series One"
  },
  "/lotus/objects/tenno/props/titaniacodexentrycdeco": {
    "value": "Titania Codex Entry C Deco"
  },
  "/lotus/powersuits/alchemist/alchemist": {
    "value": "Lavos"
  },
  "/lotus/powersuits/antimatter/anti": {
    "value": "Nova"
  },
  "/lotus/powersuits/antimatter/novaprime": {
    "value": "Nova Prime"
  },
  "/lotus/powersuits/archwing/demolitionjetpack/demolitionjetpack": {
    "value": "Elytron"
  },
  "/lotus/powersuits/archwing/primejetpack/primejetpack": {
    "value": "Odonata Prime"
  },
  "/lotus/powersuits/archwing/standardjetpack/standardjetpack": {
    "value": "Odonata"
  },
  "/lotus/powersuits/archwing/stealthjetpack/stealthjetpack": {
    "value": "Itzal"
  },
  "/lotus/powersuits/archwing/supportjetpack/supportjetpack": {
    "value": "Amesha"
  },
  "/lotus/powersuits/banshee/banshee": {
    "value": "Banshee"
  },
  "/lotus/powersuits/banshee/bansheeprime": {
    "value": "Banshee Prime"
  },
  "/lotus/powersuits/bard/bard": {
    "value": "Octavia"
  },
  "/lotus/powersuits/berserker/berserker": {
    "value": "Valkyr"
  },
  "/lotus/powersuits/berserker/valkyrprime": {
    "value": "Valkyr Prime"
  },
  "/lotus/powersuits/brawler/brawler": {
    "value": "Atlas"
  },
  "/lotus/powersuits/brawler/summonavatarhostile": {
    "value": "Summon Avatar Hostile"
  },
  "/lotus/powersuits/cowgirl/cowgirl": {
    "value": "Mesa"
  },
  "/lotus/powersuits/dragon/dragon": {
    "value": "Chroma"
  },
  "/lotus/powersuits/dragon/dragonpeltavatar": {
    "value": "Dragon Pelt Avatar"
  },
  "/lotus/powersuits/ember/ember": {
    "value": "Ember"
  },
  "/lotus/powersuits/ember/emberprime": {
    "value": "Ember Prime"
  },
  "/lotus/powersuits/excalibur/excalibur": {
    "value": "Excalibur"
  },
  "/lotus/powersuits/excalibur/excaliburprime": {
    "value": "Excalibur Prime"
  },
  "/lotus/powersuits/fairy/fairy": {
    "value": "Titania"
  },
  "/lotus/powersuits/frost/frost": {
    "value": "Frost"
  },
  "/lotus/powersuits/frost/frostprime": {
    "value": "Frost Prime"
  },
  "/lotus/powersuits/frost/icespikeaugmentcard": {
    "value": "Ice Spike Augment Card"
  },
  "/lotus/powersuits/glass/glass": {
    "value": "Gara"
  },
  "/lotus/powersuits/harlequin/harlequin": {
    "value": "Mirage"
  },
  "/lotus/powersuits/infestation/infestation": {
    "value": "Nidus"
  },
  "/lotus/powersuits/ironframe/ironframe": {
    "value": "Hildryn"
  },
  "/lotus/powersuits/jade/jade": {
    "value": "Nyx"
  },
  "/lotus/powersuits/jade/nyxprime": {
    "value": "Nyx Prime"
  },
  "/lotus/powersuits/loki/loki": {
    "value": "Loki"
  },
  "/lotus/powersuits/loki/lokiprime": {
    "value": "Loki Prime"
  },
  "/lotus/powersuits/mag/mag": {
    "value": "Mag"
  },
  "/lotus/powersuits/mag/magprime": {
    "value": "Mag Prime"
  },
  "/lotus/powersuits/magician/magician": {
    "value": "Limbo"
  },
  "/lotus/powersuits/monkeyking/monkeyking": {
    "value": "Wukong"
  },
  "/lotus/powersuits/necro/necro": {
    "value": "Nekros"
  },
  "/lotus/powersuits/necro/nekrosprime": {
    "value": "Nekros Prime"
  },
  "/lotus/powersuits/nezha/nezha": {
    "value": "Nezha"
  },
  "/lotus/powersuits/ninja/ashprime": {
    "value": "Ash Prime"
  },
  "/lotus/powersuits/ninja/ninja": {
    "value": "Ash"
  },
  "/Lotus/Powersuits/Odalisk/Odalisk": {
    "value": "Protea"
  },
  "/lotus/powersuits/pacifist/pacifist": {
    "value": "Baruuk"
  },
  "/lotus/powersuits/paladin/paladin": {
    "value": "Oberon"
  },
  "/lotus/powersuits/paladin/paladinprime": {
    "value": "Paladin Prime"
  },
  "/lotus/powersuits/pirate/pirate": {
    "value": "Hydroid"
  },
  "/lotus/powersuits/priest/priest": {
    "value": "Priest"
  },
  "/lotus/powersuits/ranger/ranger": {
    "value": "Ivara"
  },
  "/lotus/powersuits/rhino/rhino": {
    "value": "Rhino"
  },
  "/lotus/powersuits/rhino/rhinoprime": {
    "value": "Rhino Prime"
  },
  "/lotus/powersuits/runner/runner": {
    "value": "Gauss"
  },
  "/lotus/powersuits/sandman/sandman": {
    "value": "Inaros"
  },
  "/lotus/powersuits/saryn/saryn": {
    "value": "Saryn"
  },
  "/lotus/powersuits/saryn/sarynprime": {
    "value": "Saryn Prime"
  },
  "/lotus/powersuits/tengu/tengu": {
    "value": "Zephyr"
  },
  "/lotus/powersuits/trapper/trapper": {
    "value": "Vauban"
  },
  "/lotus/powersuits/trapper/trapperprime": {
    "value": "Vauban Prime"
  },
  "/lotus/powersuits/trinity/trinity": {
    "value": "Trinity"
  },
  "/lotus/powersuits/trinity/trinityprime": {
    "value": "Trinity Prime"
  },
  "/lotus/powersuits/volt/volt": {
    "value": "Volt"
  },
  "/lotus/powersuits/volt/voltprime": {
    "value": "Volt Prime"
  },
  "/lotus/powersuits/wisp/wisp": {
    "value": "Wisp"
  },
  "/lotus/powersuits/yinyang/yinyang": {
    "value": "Equinox"
  },
  "/lotus/pvpchallengetypes/pvptimedaffectorsuperenergy": {
    "value": "Keep your energy at maximum"
  },
  "/lotus/pvpchallengetypes/pvptimedaffectorsupereverything": {
    "value": "Kill enemies while sliding"
  },
  "/lotus/pvpchallengetypes/pvptimedaffectorsupermeleedamage": {
    "value": "Do lots of melee damage"
  },
  "/lotus/pvpchallengetypes/pvptimedaffectorsuperpistoldamage": {
    "value": "Get a pistol damage boost"
  },
  "/lotus/pvpchallengetypes/pvptimedaffectorsuperpowerdamage": {
    "value": "Get a kill with an ability"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeflagcaptureeasy": {
    "value": "Win a match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeflagcapturehard": {
    "value": "Win a match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeflagcapturemedium": {
    "value": "Win a match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeflagreturneasy": {
    "value": "Return the Cephalon"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeflagreturnhard": {
    "value": "Return the Cephalon"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeflagreturnmedium": {
    "value": "Return the Cephalon"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengegamemodecomplete": {
    "value": "Finish a match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengegamemodewins": {
    "value": "Win a timed match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillscomboeasy": {
    "value": "Get an enemy kill combo"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillscombohard": {
    "value": "Get an enemy kill combo"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillscombomedium": {
    "value": "Get an enemy kill combo"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsheadshotseasy": {
    "value": "Kill your enemies with headshots"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsheadshotshard": {
    "value": "Kill your enemies with headshots"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsheadshotsmedium": {
    "value": "Kill your enemies with headshots"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsmeleeeasy": {
    "value": "Kill enemies with melee"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsmeleehard": {
    "value": "Kill enemies with melee"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsmeleemedium": {
    "value": "Kill enemies with melee"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsmultieasy": {
    "value": "Get a multi-enemy killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsmultihard": {
    "value": "Get a multi-enemy killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsmultimedium": {
    "value": "Get a multi-enemy killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspayback_easy": {
    "value": "Get revenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspayback_hard": {
    "value": "Get revenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspayback_medium": {
    "value": "Get revenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspaybackeasy": {
    "value": "Get revenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspaybackhard": {
    "value": "Get revenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspaybackmedium": {
    "value": "Get revenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspowereasy": {
    "value": "Kill enemies fast"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspowerhard": {
    "value": "Kill enemies fast"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillspowermedium": {
    "value": "Kill enemies fast"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsprimaryeasy": {
    "value": "Get kills with your primary"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsprimaryhard": {
    "value": "Get kills with your primary"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsprimarymedium": {
    "value": "Get kills with your primary"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillssecondaryeasy": {
    "value": "Kill enemies with a secondary"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillssecondaryhard": {
    "value": "Kill enemies with a secondary"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillssecondarymedium": {
    "value": "Kill enemies with a secondary"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreak_easy": {
    "value": "Get a killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreak_hard": {
    "value": "Get a killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreak_medium": {
    "value": "Get a killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakdomination_easy": {
    "value": "Dominate with your kill streaks"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakdomination_hard": {
    "value": "Dominate with your kill streaks"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakdomination_medium": {
    "value": "Dominate with your kill streaks"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakdominationeasy": {
    "value": "Get a dominating killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakdominationhard": {
    "value": "Get a dominating killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakdominationmedium": {
    "value": "Get a dominating killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakeasy": {
    "value": "Get a kill streak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakhard": {
    "value": "Get a kill streak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakmedium": {
    "value": "Get a kill streak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakstopped_easy": {
    "value": "Stop a kill Streak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakstopped_hard": {
    "value": "Stop a kill Streak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakstopped_medium": {
    "value": "Stop a kill Streak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakstoppedeasy": {
    "value": "Stop a killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakstoppedhard": {
    "value": "Stop a killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillsstreakstoppedmedium": {
    "value": "Stop a killstreak"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillstargetinaireasy": {
    "value": "Kill enemies in the air"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillstargetinairhard": {
    "value": "Kill enemies in the air"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillstargetinairmedium": {
    "value": "Kill enemies in the air"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillswhileinaireasy": {
    "value": "Kill enemies while in the air"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillswhileinairhard": {
    "value": "Kill enemies while in the air"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillswhileinairmedium": {
    "value": "Kill enemies while in the air"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillswhileslidingeasy": {
    "value": "Kill enemies while sliding"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillswhileslidinghard": {
    "value": "Kill enemies while sliding"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengekillswhileslidingmedium": {
    "value": "Kill enemies while sliding"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengematchcompleteeasy": {
    "value": "Win a timed match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengematchcompletehard": {
    "value": "Win a timed match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengematchcompletemedium": {
    "value": "Win a timed match"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeotherchallengecompleteany": {
    "value": "Finish a challenge"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballcatcheseasy": {
    "value": "Catch the Lunaro"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballcatcheshard": {
    "value": "Catch the Lunaro"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballcatchesmedium": {
    "value": "Catch the Lunaro"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballcheckseasy": {
    "value": "Check another player"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballcheckshard": {
    "value": "Check another player"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballchecksmedium": {
    "value": "Check another player"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballgoalseasy": {
    "value": "Score goals"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballgoalshard": {
    "value": "Score goals"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballgoalsmedium": {
    "value": "Score goals"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballinterceptionseasy": {
    "value": "Intercept passes from an enemy"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballinterceptionshard": {
    "value": "Intercept passes from an enemy"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballinterceptionsmedium": {
    "value": "Intercept passes from an enemy"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballpasseseasy": {
    "value": "Make a successful Lunaro pass"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballpasseshard": {
    "value": "Make a successful Lunaro pass"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballpassesmedium": {
    "value": "Make a successful Lunaro pass"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballstealseasy": {
    "value": "Steal the Lunaro"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballstealshard": {
    "value": "Steal the Lunaro"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengespeedballstealsmedium": {
    "value": "Steal the Lunaro"
  },
  "/lotus/pvpchallengetypes/pvptimedchallengeweeklystandardset": {
    "value": "the standard set of weekly challenges"
  },
  "/lotus/storeitems/animations/flightsuit/testmeleeattacks/testspacesword": {
    "value": "Imspartacus"
  },
  "/lotus/storeitems/levels/minigames/sentinel/enemies/bullethell/heliosbosspowersuit": {
    "value": "Helios"
  },
  "/lotus/storeitems/levels/minigames/sentinel/sentinelgametestsuit": {
    "value": "Wyrm"
  },
  "/lotus/storeitems/levels/minigames/sentinel/spaceinvaders/defenderpowersuiti": {
    "value": "Djinn"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/autoturretweapon": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/autoturretweaponii": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/burstlaseri": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/burstlaserii": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/burstlaseriii": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/burstlaseriv": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/burstlaserv": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/droneriflei": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/dronerifleii": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/dronerifleiii": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/elitespacemanrifle": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/grineermarinerifle": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/grineermarinerocketlauncher": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/heliosbosscrategun": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/heliosbossprojectilewall": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/heliosbosssniper": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/heliosbossspraygun": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/heliosbosstargetergun": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/kubrowminibossballgun": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/kubrowminibossbladegun": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/kubrowminibossrocketlauncher": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/kubrowminibosssniper": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/kubrowminibossspraygun": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/rocketlaseri": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/rocketlaserii": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/rocketlaseriii": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/rocketlauncheri": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/rocketlauncherii": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/rocketlauncheriii": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperlaseri": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperlaserii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperlaseriii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperriflei": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrifleii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrifleiii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrocketi": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrocketii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrocketiii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrocketlaseri": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrocketlaserii": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/sniperrocketlaseriii": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/twodimburstlaseri": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/twodimburstlaserii": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/twodimrocketlauncheri": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/twodimrocketlauncherii": {
    "value": "Any"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/twodimsniperriflei": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/bullethell/twodimsniperrifleii": {
    "value": "Kraken"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/radiosets/twodimradiosetsweapon": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/radiosets/twodimufoweapon": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/radiosets/ufoweaponrandomfire": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/spaceinvaders/bluespaceinvadergun": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/spaceinvaders/defenderweapon": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/spaceinvaders/greenspaceinvadergun": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/spaceinvaders/redspaceinvadergun": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/weapons/spaceinvaders/spaceinvadergun": {
    "value": "Assault Rifle"
  },
  "/lotus/storeitems/levels/minigames/sentinel/wyrmpowersuit": {
    "value": "Wyrm"
  },
  "/lotus/storeitems/levels/sectorwars/placeabledecos/pvpspectrespawnerrecipe": {
    "value": "Specter Transporter"
  },
  "/lotus/storeitems/levels/sectorwars/placeabledecos/pvpturretdecorecipe": {
    "value": "Fu-jin Cannon "
  },
  "/lotus/storeitems/levels/sectorwars/placeabledecos/pvpturretvariantadecorecipe": {
    "value": "Rai-jin Cannon "
  },
  "/lotus/storeitems/levels/sectorwars/placeabledecos/pvpturretvariantbdecorecipe": {
    "value": "Su-jin"
  },
  "/lotus/storeitems/levels/sectorwars/placeabledecos/pvpturretvariantcdecorecipe": {
    "value": "Do-jin"
  },
  "/lotus/storeitems/powersuits/all/carryabilitycard": {
    "value": "Void Carry"
  },
  "/lotus/storeitems/powersuits/all/clothtestsuit": {
    "value": "Mesa"
  },
  "/lotus/storeitems/powersuits/all/lureabilitycard": {
    "value": "Void Lure"
  },
  "/lotus/storeitems/powersuits/all/repelabilitycard": {
    "value": "Repel"
  },
  "/lotus/storeitems/powersuits/all/returnabilitycard": {
    "value": "Deja Vu"
  },
  "/lotus/storeitems/powersuits/all/teaminvisibilityabilitycard": {
    "value": "Invisibility"
  },
  "/lotus/storeitems/powersuits/antimatter/anti": {
    "value": "Nova"
  },
  "/lotus/storeitems/powersuits/antimatter/antimatterdropabilitycard": {
    "value": "Antimatter Drop"
  },
  "/lotus/storeitems/powersuits/antimatter/antimatterdropaugmentcard": {
    "value": "Antimatter Absorb"
  },
  "/lotus/storeitems/powersuits/antimatter/molecularprimeabilitycard": {
    "value": "Molecular Prime"
  },
  "/lotus/storeitems/powersuits/antimatter/novaprime": {
    "value": "Nova Prime"
  },
  "/lotus/storeitems/powersuits/antimatter/nullstarabilitycard": {
    "value": "Null Star"
  },
  "/lotus/storeitems/powersuits/antimatter/nullstaraugmentcard": {
    "value": "Neutron Star"
  },
  "/lotus/storeitems/powersuits/antimatter/wormholeabilitycard": {
    "value": "Worm Hole"
  },
  "/lotus/storeitems/powersuits/antimatter/wormholeaugmentcard": {
    "value": "Escape Velocity"
  },
  "/lotus/storeitems/powersuits/archwing/demolitionjetpack/artillerybarrageabilitycard": {
    "value": "Thumper"
  },
  "/lotus/storeitems/powersuits/archwing/demolitionjetpack/bigboyabilitycard": {
    "value": "Warhead"
  },
  "/lotus/storeitems/powersuits/archwing/demolitionjetpack/demolitionjetpack": {
    "value": "Elytron"
  },
  "/lotus/storeitems/powersuits/archwing/demolitionjetpack/exhausttrailabilitycard": {
    "value": "Core Vent"
  },
  "/lotus/storeitems/powersuits/archwing/demolitionjetpack/tntabilitycard": {
    "value": "Bloomer"
  },
  "/lotus/storeitems/powersuits/archwing/primejetpack/primejetpack": {
    "value": "Odonata Prime"
  },
  "/lotus/storeitems/powersuits/archwing/standardjetpack/emppushabilitycard": {
    "value": "Repel"
  },
  "/lotus/storeitems/powersuits/archwing/standardjetpack/fireshieldabilitycard": {
    "value": "Energy Shell"
  },
  "/lotus/storeitems/powersuits/archwing/standardjetpack/flarecountermeasureabilitycard": {
    "value": "Disarray"
  },
  "/lotus/storeitems/powersuits/archwing/standardjetpack/missilevolleyabilitycard": {
    "value": "Seeking Fire"
  },
  "/lotus/storeitems/powersuits/archwing/standardjetpack/standardjetpack": {
    "value": "Odonata"
  },
  "/lotus/storeitems/powersuits/archwing/stealthjetpack/blinkabilitycard": {
    "value": "Blink"
  },
  "/lotus/storeitems/powersuits/archwing/stealthjetpack/cloakabilitycard": {
    "value": "Penumbra"
  },
  "/lotus/storeitems/powersuits/archwing/stealthjetpack/distractiondronesabilitycard": {
    "value": "Fighter Escort"
  },
  "/lotus/storeitems/powersuits/archwing/stealthjetpack/gravinstabilityabilitycard": {
    "value": "Cosmic Crush"
  },
  "/lotus/storeitems/powersuits/archwing/stealthjetpack/stealthjetpack": {
    "value": "Itzal"
  },
  "/lotus/storeitems/powersuits/banshee/banshee": {
    "value": "Banshee"
  },
  "/lotus/storeitems/powersuits/banshee/pushabilitycard": {
    "value": "Sonic Boom"
  },
  "/lotus/storeitems/powersuits/banshee/pushaugmentcard": {
    "value": "Sonic Fracture"
  },
  "/lotus/storeitems/powersuits/banshee/silenceabilitycard": {
    "value": "Silence"
  },
  "/lotus/storeitems/powersuits/banshee/silenceaugmentcard": {
    "value": "Savage Silence"
  },
  "/lotus/storeitems/powersuits/banshee/sonarabilitycard": {
    "value": "Sonar"
  },
  "/lotus/storeitems/powersuits/banshee/sonaraugmentcard": {
    "value": "Resonance"
  },
  "/lotus/storeitems/powersuits/bard/bard": {
    "value": "Octavia"
  },
  "/lotus/storeitems/powersuits/berserker/berserker": {
    "value": "Valkyr"
  },
  "/lotus/storeitems/powersuits/berserker/grappleabilitycard": {
    "value": "Rip Line"
  },
  "/lotus/storeitems/powersuits/berserker/grappleaugmentcard": {
    "value": "Swing Line"
  },
  "/lotus/storeitems/powersuits/berserker/intimidateabilitycard": {
    "value": "Warcry"
  },
  "/lotus/storeitems/powersuits/berserker/intimidateaugmentcard": {
    "value": "Eternal War"
  },
  "/lotus/storeitems/powersuits/berserker/laststandabilitycard": {
    "value": "Hysteria"
  },
  "/lotus/storeitems/powersuits/berserker/laststandpvpaugmentcard": {
    "value": "Hysterical Fixation"
  },
  "/lotus/storeitems/powersuits/berserker/shieldbashaugmentcard": {
    "value": "Prolonged Paralysis"
  },
  "/lotus/storeitems/powersuits/berserker/shieldblastabilitycard": {
    "value": "Paralysis"
  },
  "/lotus/storeitems/powersuits/cowgirl/ballisticbatteryabilitycard": {
    "value": "Ballistic Battery"
  },
  "/lotus/storeitems/powersuits/cowgirl/ballisticbatteryaugmentcard": {
    "value": "Ballistic Bullseye"
  },
  "/lotus/storeitems/powersuits/cowgirl/cowgirl": {
    "value": "Mesa"
  },
  "/lotus/storeitems/powersuits/cowgirl/cowgirlnpc": {
    "value": "Mesa"
  },
  "/lotus/storeitems/powersuits/cowgirl/gunfuabilitycard": {
    "value": "Peacemaker"
  },
  "/lotus/storeitems/powersuits/cowgirl/ricochetarmourabilitycard": {
    "value": "Shatter Shield"
  },
  "/lotus/storeitems/powersuits/cowgirl/ricochetarmouraugmentcard": {
    "value": "Staggering Shield"
  },
  "/lotus/storeitems/powersuits/cowgirl/russianrouletteabilitycard": {
    "value": "Shooting Gallery"
  },
  "/lotus/storeitems/powersuits/cowgirl/russianrouletteaugmentcard": {
    "value": "Muzzle Flash"
  },
  "/lotus/storeitems/powersuits/dragon/dragon": {
    "value": "Chroma"
  },
  "/lotus/storeitems/powersuits/dragon/dragonbreathaugmentcard": {
    "value": "Afterburn"
  },
  "/lotus/storeitems/powersuits/dragon/dragonluckaugmentcard": {
    "value": "Everlasting Ward"
  },
  "/lotus/storeitems/powersuits/dragon/dragonnpcpowersuit": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/powersuits/dragon/dragonscalesaugmentcard": {
    "value": "Vexing Retaliation"
  },
  "/lotus/storeitems/powersuits/ember/ember": {
    "value": "Ember"
  },
  "/lotus/storeitems/powersuits/ember/emberprime": {
    "value": "Ember Prime"
  },
  "/lotus/storeitems/powersuits/ember/fireballabilitycard": {
    "value": "Fireball"
  },
  "/lotus/storeitems/powersuits/ember/fireballaugmentcard": {
    "value": "Fireball Frenzy"
  },
  "/lotus/storeitems/powersuits/ember/fireblastabilitycard": {
    "value": "Fire Blast"
  },
  "/lotus/storeitems/powersuits/ember/fireblastaugmentcard": {
    "value": "Fire Fright"
  },
  "/lotus/storeitems/powersuits/ember/fireblastpvpaugmentcard": {
    "value": "Purifying Flames"
  },
  "/lotus/storeitems/powersuits/ember/fireskinabilitycard": {
    "value": "Accelerant"
  },
  "/lotus/storeitems/powersuits/ember/worldonfireabilitycard": {
    "value": "World On Fire"
  },
  "/lotus/storeitems/powersuits/ember/worldonfireaugmentcard": {
    "value": "Firequake"
  },
  "/lotus/storeitems/powersuits/excalibur/excalibur": {
    "value": "Excalibur"
  },
  "/lotus/storeitems/powersuits/excalibur/excaliburprime": {
    "value": "Excalibur Prime"
  },
  "/lotus/storeitems/powersuits/excalibur/radialblindabilitycard": {
    "value": "Radial Blind"
  },
  "/lotus/storeitems/powersuits/excalibur/radialblindaugmentcard": {
    "value": "Radiant Finish"
  },
  "/lotus/storeitems/powersuits/excalibur/radialblindpvpaugmentcard": {
    "value": "Signal Flare"
  },
  "/lotus/storeitems/powersuits/excalibur/radialjavelinabilitycard": {
    "value": "Radial Javelin"
  },
  "/lotus/storeitems/powersuits/excalibur/radialjavelinaugmentcard": {
    "value": "Furious Javelin"
  },
  "/lotus/storeitems/powersuits/excalibur/slashdashabilitycard": {
    "value": "Slash Dash"
  },
  "/lotus/storeitems/powersuits/excalibur/slashdashaugmentcard": {
    "value": "Surging Dash"
  },
  "/lotus/storeitems/powersuits/excalibur/slashdashpvpaugmentcard": {
    "value": "Purging Slash"
  },
  "/lotus/storeitems/powersuits/excalibur/superjumpabilitycard": {
    "value": "Super Jump"
  },
  "/lotus/storeitems/powersuits/frost/avalancheabilitycard": {
    "value": "Avalanche"
  },
  "/lotus/storeitems/powersuits/frost/frost": {
    "value": "Frost"
  },
  "/lotus/storeitems/powersuits/frost/frostprime": {
    "value": "Frost Prime"
  },
  "/lotus/storeitems/powersuits/frost/iceshieldabilitycard": {
    "value": "Snow Globe"
  },
  "/lotus/storeitems/powersuits/frost/iceshieldaugmentcard": {
    "value": "Chilling Globe"
  },
  "/lotus/storeitems/powersuits/frost/icespikeabilitycard": {
    "value": "Ice Wave"
  },
  "/lotus/storeitems/powersuits/frost/icespikeaugmentcard": {
    "value": "Ice Wave Impedance"
  },
  "/lotus/storeitems/powersuits/frost/icicleabilitycard": {
    "value": "Freeze"
  },
  "/lotus/storeitems/powersuits/frost/icicleaugmentcard": {
    "value": "Freeze Force"
  },
  "/lotus/storeitems/powersuits/harlequin/harlequin": {
    "value": "Mirage"
  },
  "/lotus/storeitems/powersuits/harlequin/illusionabilitycard": {
    "value": "Hall Of Mirrors"
  },
  "/lotus/storeitems/powersuits/harlequin/illusionaugmentcard": {
    "value": "Hall Of Malevolence"
  },
  "/lotus/storeitems/powersuits/harlequin/lightabilitycard": {
    "value": "Eclipse"
  },
  "/lotus/storeitems/powersuits/harlequin/lightaugmentcard": {
    "value": "Total Eclipse"
  },
  "/lotus/storeitems/powersuits/harlequin/objectchangeabilitycard": {
    "value": "Sleight Of Hand"
  },
  "/lotus/storeitems/powersuits/harlequin/objectchangeaugmentcard": {
    "value": "Explosive Legerdemain"
  },
  "/lotus/storeitems/powersuits/harlequin/prismabilitycard": {
    "value": "Prism"
  },
  "/lotus/storeitems/powersuits/infestation/infestation": {
    "value": "Nidus"
  },
  "/lotus/storeitems/powersuits/jade/chaosabilitycard": {
    "value": "Chaos"
  },
  "/lotus/storeitems/powersuits/jade/chaosaugmentcard": {
    "value": "Chaos Sphere"
  },
  "/lotus/storeitems/powersuits/jade/daggerabilitycard": {
    "value": "Psychic Bolts"
  },
  "/lotus/storeitems/powersuits/jade/daggeraugmentcard": {
    "value": "Pacifying Bolts"
  },
  "/lotus/storeitems/powersuits/jade/jade": {
    "value": "Nyx"
  },
  "/lotus/storeitems/powersuits/jade/mindcontrolabilitycard": {
    "value": "Mind Control"
  },
  "/lotus/storeitems/powersuits/jade/mindcontrolaugmentcard": {
    "value": "Mind Freak"
  },
  "/lotus/storeitems/powersuits/jade/nyxprime": {
    "value": "Nyx Prime"
  },
  "/lotus/storeitems/powersuits/jade/selfbulletattractorabilitycard": {
    "value": "Absorb"
  },
  "/lotus/storeitems/powersuits/jade/selfbulletattractorpvpaugmentcard": {
    "value": "Singularity"
  },
  "/lotus/storeitems/powersuits/loki/decoyabilitycard": {
    "value": "Decoy"
  },
  "/lotus/storeitems/powersuits/loki/disarmabilitycard": {
    "value": "Radial Disarm"
  },
  "/lotus/storeitems/powersuits/loki/disarmaugmentcard": {
    "value": "Irradiating Disarm"
  },
  "/lotus/storeitems/powersuits/loki/invisibilityabilitycard": {
    "value": "Invisibility"
  },
  "/lotus/storeitems/powersuits/loki/invisibilityaugmentcard": {
    "value": "Hushed Invisibility"
  },
  "/lotus/storeitems/powersuits/loki/loki": {
    "value": "Loki"
  },
  "/lotus/storeitems/powersuits/loki/lokiprime": {
    "value": "Loki Prime"
  },
  "/lotus/storeitems/powersuits/loki/switchabilitycard": {
    "value": "Switch Teleport"
  },
  "/lotus/storeitems/powersuits/loki/switchaugmentcard": {
    "value": "Safeguard Switch"
  },
  "/lotus/storeitems/powersuits/mag/bulletattractorabilitycard": {
    "value": "Magnetize"
  },
  "/lotus/storeitems/powersuits/mag/bulletattractoraugmentcard": {
    "value": "[Placeholder] Magnetize Augment"
  },
  "/lotus/storeitems/powersuits/mag/crushabilitycard": {
    "value": "Crush"
  },
  "/lotus/storeitems/powersuits/mag/crushaugmentcard": {
    "value": "Fracturing Crush"
  },
  "/lotus/storeitems/powersuits/mag/mag": {
    "value": "Mag"
  },
  "/lotus/storeitems/powersuits/mag/magprime": {
    "value": "Mag Prime"
  },
  "/lotus/storeitems/powersuits/mag/pullabilitycard": {
    "value": "Pull"
  },
  "/lotus/storeitems/powersuits/mag/pullaugmentcard": {
    "value": "Greedy Pull"
  },
  "/lotus/storeitems/powersuits/mag/pullpvpaugmentcard": {
    "value": "Sapping Reach"
  },
  "/lotus/storeitems/powersuits/mag/shieldregenabilitycard": {
    "value": "Polarize"
  },
  "/lotus/storeitems/powersuits/mag/shieldregenaugmentcard": {
    "value": "Shield Transference"
  },
  "/lotus/storeitems/powersuits/mag/shieldregenpvpaugmentcard": {
    "value": "Shield Overload"
  },
  "/lotus/storeitems/powersuits/magician/banishabilitycard": {
    "value": "Banish"
  },
  "/lotus/storeitems/powersuits/magician/banishaugmentcard": {
    "value": "Haven"
  },
  "/lotus/storeitems/powersuits/magician/magician": {
    "value": "Limbo"
  },
  "/lotus/storeitems/powersuits/magician/riftwalkabilitycard": {
    "value": "Rift Walk"
  },
  "/lotus/storeitems/powersuits/magician/tearinspaceabilitycard": {
    "value": "Cataclysm"
  },
  "/lotus/storeitems/powersuits/magician/tearinspaceaugmentcard": {
    "value": "Cataclysmic Continuum"
  },
  "/lotus/storeitems/powersuits/magician/volatileabilitycard": {
    "value": "Rift Surge"
  },
  "/lotus/storeitems/powersuits/magician/volatileaugmentcard": {
    "value": "Rift Torrent"
  },
  "/lotus/storeitems/powersuits/monkeyking/monkeyking": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/powersuits/necro/clonethedeadabilitycard": {
    "value": "Shadows Of The Dead"
  },
  "/lotus/storeitems/powersuits/necro/clonethedeadaugmentcard": {
    "value": "Shield Of Shadows"
  },
  "/lotus/storeitems/powersuits/necro/necro": {
    "value": "Nekros"
  },
  "/lotus/storeitems/powersuits/necro/searchthedeadabilitycard": {
    "value": "Desecrate"
  },
  "/lotus/storeitems/powersuits/necro/searchthedeadaugmentcard": {
    "value": "Despoil"
  },
  "/lotus/storeitems/powersuits/necro/soulpunchabilitycard": {
    "value": "Soul Punch"
  },
  "/lotus/storeitems/powersuits/necro/soulpunchaugmentcard": {
    "value": "Soul Survivor"
  },
  "/lotus/storeitems/powersuits/necro/terrortotemabilitycard": {
    "value": "Terrify"
  },
  "/lotus/storeitems/powersuits/ninja/ashprime": {
    "value": "Ash Prime"
  },
  "/lotus/storeitems/powersuits/ninja/glaiveabilitycard": {
    "value": "Shuriken"
  },
  "/lotus/storeitems/powersuits/ninja/glaiveaugmentcard": {
    "value": "Seeking Shuriken"
  },
  "/lotus/storeitems/powersuits/ninja/ninja": {
    "value": "Ash"
  },
  "/lotus/storeitems/powersuits/ninja/ninjastormabilitycard": {
    "value": "Blade Storm"
  },
  "/lotus/storeitems/powersuits/ninja/ninjastormaugmentcard": {
    "value": "Rising Storm"
  },
  "/lotus/storeitems/powersuits/ninja/smokescreenabilitycard": {
    "value": "Smoke Screen"
  },
  "/lotus/storeitems/powersuits/ninja/smokescreenaugmentcard": {
    "value": "Smoke Shadow"
  },
  "/lotus/storeitems/powersuits/ninja/smokescreenpvpaugmentcard": {
    "value": "Tear Gas"
  },
  "/lotus/storeitems/powersuits/ninja/telelporttoabilitycard": {
    "value": "Teleport"
  },
  "/lotus/storeitems/powersuits/paladin/paladin": {
    "value": "Oberon"
  },
  "/lotus/storeitems/powersuits/paladin/reckoningabilitycard": {
    "value": "Reckoning"
  },
  "/lotus/storeitems/powersuits/paladin/reckoningaugmentcard": {
    "value": "Hallowed Reckoning"
  },
  "/lotus/storeitems/powersuits/paladin/reckoningpvpaugmentcard": {
    "value": "Defiled Reckoning"
  },
  "/lotus/storeitems/powersuits/paladin/smiteabilitycard": {
    "value": "Smite"
  },
  "/lotus/storeitems/powersuits/paladin/smiteaugmentcard": {
    "value": "Smite Infusion"
  },
  "/lotus/storeitems/powersuits/paladin/stairwaytoheavenabilitycard": {
    "value": "Hallowed Ground"
  },
  "/lotus/storeitems/powersuits/paladin/stairwaytoheavenaugmentcard": {
    "value": "Hallowed Eruption"
  },
  "/lotus/storeitems/powersuits/pirate/cannonbarrageabilitycard": {
    "value": "Tempest Barrage"
  },
  "/lotus/storeitems/powersuits/pirate/krakenabilitycard": {
    "value": "Tentacle Swarm"
  },
  "/lotus/storeitems/powersuits/pirate/krakenaugmentcard": {
    "value": "Pilfering Swarm"
  },
  "/lotus/storeitems/powersuits/pirate/liquifyabilitycard": {
    "value": "Undertow"
  },
  "/lotus/storeitems/powersuits/pirate/liquifyaugmentcard": {
    "value": "Curative Undertow"
  },
  "/lotus/storeitems/powersuits/pirate/pirate": {
    "value": "Hydroid"
  },
  "/lotus/storeitems/powersuits/pirate/tidalwaveabilitycard": {
    "value": "Tidal Surge"
  },
  "/lotus/storeitems/powersuits/pirate/tidalwaveaugmentcard": {
    "value": "Tidal Impunity"
  },
  "/lotus/storeitems/powersuits/powersuitabilities/radialblastabilitycard": {
    "value": "Radial Blast"
  },
  "/lotus/storeitems/powersuits/rhino/ironskinabilitycard": {
    "value": "Iron Skin"
  },
  "/lotus/storeitems/powersuits/rhino/ironskinaugmentcard": {
    "value": "Iron Shrapnel"
  },
  "/lotus/storeitems/powersuits/rhino/radialblastabilitycard": {
    "value": "Roar"
  },
  "/lotus/storeitems/powersuits/rhino/radialblastaugmentcard": {
    "value": "Piercing Roar"
  },
  "/lotus/storeitems/powersuits/rhino/rhino": {
    "value": "Rhino"
  },
  "/lotus/storeitems/powersuits/rhino/rhinochargeabilitycard": {
    "value": "Rhino Charge"
  },
  "/lotus/storeitems/powersuits/rhino/rhinochargeaugmentcard": {
    "value": "Ironclad Charge"
  },
  "/lotus/storeitems/powersuits/rhino/rhinoprime": {
    "value": "Rhino Prime"
  },
  "/lotus/storeitems/powersuits/rhino/rhinostompabilitycard": {
    "value": "Rhino Stomp"
  },
  "/lotus/storeitems/powersuits/sandman/sandman": {
    "value": "Inaros"
  },
  "/lotus/storeitems/powersuits/saryn/explosivedissolveabilitycard": {
    "value": "Miasma"
  },
  "/lotus/storeitems/powersuits/saryn/poisonabilitycard": {
    "value": "Spores"
  },
  "/lotus/storeitems/powersuits/saryn/poisonaugmentcard": {
    "value": "Venom Dose"
  },
  "/lotus/storeitems/powersuits/saryn/saryn": {
    "value": "Saryn"
  },
  "/lotus/storeitems/powersuits/saryn/shedabilitycard": {
    "value": "Molt"
  },
  "/lotus/storeitems/powersuits/saryn/shedaugmentcard": {
    "value": "Regenerative Molt"
  },
  "/lotus/storeitems/powersuits/saryn/weaponpoisonabilitycard": {
    "value": "Toxic Lash"
  },
  "/lotus/storeitems/powersuits/saryn/weaponpoisonaugmentcard": {
    "value": "Contagion Cloud"
  },
  "/lotus/storeitems/powersuits/tengu/divebombabilitycard": {
    "value": "Dive Bomb"
  },
  "/lotus/storeitems/powersuits/tengu/divebombaugmentcard": {
    "value": "Divebomb Vortex"
  },
  "/lotus/storeitems/powersuits/tengu/tailwindabilitycard": {
    "value": "Tail Wind"
  },
  "/lotus/storeitems/powersuits/tengu/tengu": {
    "value": "Zephyr"
  },
  "/lotus/storeitems/powersuits/tengu/tornadoabilitycard": {
    "value": "Tornado"
  },
  "/lotus/storeitems/powersuits/tengu/tornadoaugmentcard": {
    "value": "Funnel Clouds"
  },
  "/lotus/storeitems/powersuits/tengu/turbulenceabilitycard": {
    "value": "Turbulence"
  },
  "/lotus/storeitems/powersuits/tengu/turbulenceaugmentcard": {
    "value": "Jet Stream"
  },
  "/lotus/storeitems/powersuits/trapper/levtrapabilitycard": {
    "value": "Bastille"
  },
  "/lotus/storeitems/powersuits/trapper/levtrapaugmentcard": {
    "value": "Repelling Bastille"
  },
  "/lotus/storeitems/powersuits/trapper/magholeabilitycard": {
    "value": "Vortex"
  },
  "/lotus/storeitems/powersuits/trapper/magholeaugmentcard": {
    "value": "Perpetual Vortex"
  },
  "/lotus/storeitems/powersuits/trapper/trapper": {
    "value": "Vauban"
  },
  "/lotus/storeitems/powersuits/trapper/zaptrapabilitycard": {
    "value": "Tesla"
  },
  "/lotus/storeitems/powersuits/trapper/zaptrapaugmentcard": {
    "value": "Tesla Link"
  },
  "/lotus/storeitems/powersuits/trinity/blessingabilitycard": {
    "value": "Blessing"
  },
  "/lotus/storeitems/powersuits/trinity/energyvampireabilitycard": {
    "value": "Energy Vampire"
  },
  "/lotus/storeitems/powersuits/trinity/energyvampireaugmentcard": {
    "value": "Vampire Leech"
  },
  "/lotus/storeitems/powersuits/trinity/linkabilitycard": {
    "value": "Link"
  },
  "/lotus/storeitems/powersuits/trinity/linkaugmentcard": {
    "value": "Abating Link"
  },
  "/lotus/storeitems/powersuits/trinity/trinity": {
    "value": "Trinity"
  },
  "/lotus/storeitems/powersuits/trinity/welloflifeabilitycard": {
    "value": "Well Of Life"
  },
  "/lotus/storeitems/powersuits/trinity/welloflifeaugmentcard": {
    "value": "Pool Of Life"
  },
  "/lotus/storeitems/powersuits/volt/overloadabilitycard": {
    "value": "Discharge"
  },
  "/lotus/storeitems/powersuits/volt/overloadaugmentcard": {
    "value": "Capacitance"
  },
  "/lotus/storeitems/powersuits/volt/shieldabilitycard": {
    "value": "Electric Shield"
  },
  "/lotus/storeitems/powersuits/volt/shieldpvpaugmentcard": {
    "value": "Recharge Barrier"
  },
  "/lotus/storeitems/powersuits/volt/shockabilitycard": {
    "value": "Shock"
  },
  "/lotus/storeitems/powersuits/volt/shockaugmentcard": {
    "value": "Shock Trooper"
  },
  "/lotus/storeitems/powersuits/volt/speedabilitycard": {
    "value": "Speed"
  },
  "/lotus/storeitems/powersuits/volt/speedaugmentcard": {
    "value": "Shocking Speed"
  },
  "/lotus/storeitems/powersuits/volt/speedpvpaugmentcard": {
    "value": "Kinetic Collision"
  },
  "/lotus/storeitems/powersuits/volt/volt": {
    "value": "Volt"
  },
  "/lotus/storeitems/powersuits/volt/voltprime": {
    "value": "Volt Prime"
  },
  "/lotus/storeitems/quests/theorionblade/orionbladeitem": {
    "value": "Dark Dagger"
  },
  "/lotus/storeitems/types/boosterpacks/commonartifactpack": {
    "value": "Hawk Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/commonfusionpack": {
    "value": "Bronze Fusion Pack"
  },
  "/lotus/storeitems/types/boosterpacks/modfuserresult": {
    "value": "Mod Fuser"
  },
  "/lotus/storeitems/types/boosterpacks/premiumrareartifactpack": {
    "value": "Dragon Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/premiumrarefusionpack": {
    "value": "Gold Fusion Pack"
  },
  "/lotus/storeitems/types/boosterpacks/premiumuncommonartifactpack": {
    "value": "Phoenix Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/premiumuncommonfusionpack": {
    "value": "Silver Fusion Pack"
  },
  "/lotus/storeitems/types/boosterpacks/randomkey": {
    "value": "Void Key Pack"
  },
  "/lotus/storeitems/types/boosterpacks/rareartifactpack": {
    "value": "Eagle Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/rarefusionpack": {
    "value": "Wolf Fusion Pack"
  },
  "/lotus/storeitems/types/boosterpacks/singlecommonartifact": {
    "value": "Eagle Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/singlerareartifact": {
    "value": "Eagle Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/stancemodpack": {
    "value": "Stance Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/syndicaterandomkey": {
    "value": "Void Key Pack"
  },
  "/lotus/storeitems/types/boosterpacks/transmutepack": {
    "value": "Transmute Core Pack"
  },
  "/lotus/storeitems/types/boosterpacks/uncommonartifactpack": {
    "value": "Falcon Mod Pack"
  },
  "/lotus/storeitems/types/boosterpacks/uncommonfusionpack": {
    "value": "Fox Fusion Pack"
  },
  "/lotus/storeitems/types/enemies/corpus/quadrobot/miniboss/miniquadshielddroneauramod": {
    "value": "Shield Disruption"
  },
  "/lotus/storeitems/types/enemies/corpus/vip/infestedaladv/aladvinfquantarifle": {
    "value": "Paracyst"
  },
  "/lotus/storeitems/types/enemies/sector/rifleweapon": {
    "value": "Latron"
  },
  "/lotus/storeitems/types/enemies/tennoreplicants/gunslingerpistolslotusweapon": {
    "value": "Any"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowchargeprecept": {
    "value": "Hunt"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowcloakprecept": {
    "value": "Stalk"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowdigprecept": {
    "value": "Dig"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowfearprecept": {
    "value": "Howl"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowsanctuary": {
    "value": "Shelter"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowshieldprecept": {
    "value": "Protect"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowthiefprecept": {
    "value": "Scavenge"
  },
  "/lotus/storeitems/types/friendly/pets/kubrowpetprecepts/kubrowvipchaseprecept": {
    "value": "Unleashed"
  },
  "/lotus/storeitems/types/game/basecosmeticenhancer": {
    "value": "Arcane"
  },
  "/lotus/storeitems/types/game/catbrowpet/catbrowgeneticsignature": {
    "value": "Kavat Genetic Code"
  },
  "/lotus/storeitems/types/game/kubrowpet/adventurerkubrowpetpowersuit": {
    "value": "Sahasa Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/blanktraitprint": {
    "value": "Genetic Code Template"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormida": {
    "value": "Sedna Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidb": {
    "value": "Derelict Black"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidc": {
    "value": "Mars Red"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidd": {
    "value": "Infested Black"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormiddiamond": {
    "value": "Star White"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormide": {
    "value": "Void Black"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidf": {
    "value": "Darvo Blue"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidg": {
    "value": "Ordis Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidh": {
    "value": "Mercury Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidi": {
    "value": "Eris Black"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidj": {
    "value": "Nova Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidk": {
    "value": "Rhino Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormidliquid": {
    "value": "Fomorian Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanea": {
    "value": "Ash Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundaneb": {
    "value": "Earth Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanec": {
    "value": "Corpus Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundaned": {
    "value": "Hek Green"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanediamond": {
    "value": "Ki'teer Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanee": {
    "value": "Kril Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanef": {
    "value": "Gallium Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundaneg": {
    "value": "Grustrag Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundaneh": {
    "value": "Saturn Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanei": {
    "value": "Arid Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanej": {
    "value": "Forest Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundanek": {
    "value": "Phobos Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolormundaneliquid": {
    "value": "Specter White"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorprimetradermida": {
    "value": "Perrin Blue"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorprimetradermundanea": {
    "value": "Vaykor White"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorprimetradervibranta": {
    "value": "Rakta Red"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibranta": {
    "value": "Anyo Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantb": {
    "value": "Ambulas Black"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantc": {
    "value": "Shadow Grey"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantd": {
    "value": "Sargas Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantdiamond": {
    "value": "Wyrm Blue"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrante": {
    "value": "Jupiter Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantf": {
    "value": "Phorid Red"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantg": {
    "value": "Alad Blue"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibranth": {
    "value": "Venus Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibranti": {
    "value": "Lotus Purple"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantj": {
    "value": "Valkyr Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantk": {
    "value": "Mirage Red"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorvibrantliquid": {
    "value": "Vandal Blue"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorxmasmida": {
    "value": "Lotus White"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorxmasmidb": {
    "value": "Jadeleaf Green"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorxmasmundanea": {
    "value": "Tenno Red"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorxmasmundaneb": {
    "value": "Nova White"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorxmasvibranta": {
    "value": "Brokk Brown"
  },
  "/lotus/storeitems/types/game/kubrowpet/colors/kubrowpetcolorxmasvibrantb": {
    "value": "Trinity Red"
  },
  "/lotus/storeitems/types/game/kubrowpet/egghatcher": {
    "value": "Incubator Power Core"
  },
  "/lotus/storeitems/types/game/kubrowpet/eggs/kubrowegg": {
    "value": "Kubrow Egg"
  },
  "/lotus/storeitems/types/game/kubrowpet/eggs/kubrowpeteggitem": {
    "value": "Kubrow Egg"
  },
  "/lotus/storeitems/types/game/kubrowpet/furtivekubrowpetpowersuit": {
    "value": "Huras Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/guardkubrowpetpowersuit": {
    "value": "Raksa Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/hunterkubrowpetpowersuit": {
    "value": "Sunika Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/kubrowpetcollaritem": {
    "value": "Nai-zhen Kubrow Collar"
  },
  "/lotus/storeitems/types/game/kubrowpet/kubrowpetfood": {
    "value": "Dna Stabilizers"
  },
  "/lotus/storeitems/types/game/kubrowpet/kubrowpetfoodrecipe": {
    "value": "Dna Stabilizers"
  },
  "/lotus/storeitems/types/game/kubrowpet/kubrowpetpowersuit": {
    "value": "Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/kubrowpetrecipe": {
    "value": "Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatterna": {
    "value": "Striped Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternb": {
    "value": "Patchy Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternc": {
    "value": "Hound Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternd": {
    "value": "Domino Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatterndiamond": {
    "value": "Atrox Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatterne": {
    "value": "Merle Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternf": {
    "value": "Lotus Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatterng": {
    "value": "Mottled Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternh": {
    "value": "Brindle Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatterni": {
    "value": "Tigrol Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternliquid": {
    "value": "Arklut Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternprimetradera": {
    "value": "Nexus Fur Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternxmasa": {
    "value": "Nart-deer Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/patterns/kubrowpetpatternxmasb": {
    "value": "Nistlebrush Pattern"
  },
  "/lotus/storeitems/types/game/kubrowpet/petstasisrecoveryrecipe": {
    "value": "Kubrow"
  },
  "/lotus/storeitems/types/game/kubrowpet/releasepetrecipe": {
    "value": "Genetic Code Template"
  },
  "/lotus/storeitems/types/game/lotussuitcustomization": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/types/game/lotusweapon": {
    "value": "Any"
  },
  "/lotus/storeitems/types/game/lotusweapon2d": {
    "value": "Any"
  },
  "/lotus/storeitems/types/game/playerflightjetpackitem": {
    "value": "Archwing"
  },
  "/lotus/storeitems/types/game/playerpowersuit": {
    "value": "Warframe"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionabronze": {
    "value": "Lith S1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionagold": {
    "value": "Lith S1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionaplatinum": {
    "value": "Lith S1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionasilver": {
    "value": "Lith S1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionbbronze": {
    "value": "Lith S2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionbgold": {
    "value": "Lith S2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionbplatinum": {
    "value": "Lith S2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionbsilver": {
    "value": "Lith S2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectioncbronze": {
    "value": "Lith F1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectioncgold": {
    "value": "Lith F1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectioncplatinum": {
    "value": "Lith F1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectioncsilver": {
    "value": "Lith F1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiondbronze": {
    "value": "Lith V1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiondgold": {
    "value": "Lith V1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiondplatinum": {
    "value": "Lith V1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiondsilver": {
    "value": "Lith V1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionebronze": {
    "value": "Lith F2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionegold": {
    "value": "Lith F2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectioneplatinum": {
    "value": "Lith F2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionesilver": {
    "value": "Lith F2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionfbronze": {
    "value": "Lith M1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionfgold": {
    "value": "Lith M1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionfplatinum": {
    "value": "Lith M1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionfsilver": {
    "value": "Lith M1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiongbronze": {
    "value": "Lith A1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionggold": {
    "value": "Lith A1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiongplatinum": {
    "value": "Lith A1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectiongsilver": {
    "value": "Lith A1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionibronze": {
    "value": "Lith S3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionigold": {
    "value": "Lith S3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectioniplatinum": {
    "value": "Lith S3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionisilver": {
    "value": "Lith S3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionjbronze": {
    "value": "Lith C1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionjgold": {
    "value": "Lith C1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionjplatinum": {
    "value": "Lith C1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionjsilver": {
    "value": "Lith C1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionkbronze": {
    "value": "Lith K1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionkgold": {
    "value": "Lith K1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionkplatinum": {
    "value": "Lith K1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionksilver": {
    "value": "Lith K1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionlbronze": {
    "value": "Lith N1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionlgold": {
    "value": "Lith N1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionlplatinum": {
    "value": "Lith N1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionlsilver": {
    "value": "Lith N1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionmbronze": {
    "value": "Lith V2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionmgold": {
    "value": "Lith V2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionmplatinum": {
    "value": "Lith V2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionmsilver": {
    "value": "Lith V2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionnbronze": {
    "value": "Lith S4 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionngold": {
    "value": "Lith S4 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionnplatinum": {
    "value": "Lith S4 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionnsilver": {
    "value": "Lith S4 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionobronze": {
    "value": "Lith S5 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionogold": {
    "value": "Lith S5 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionoplatinum": {
    "value": "Lith S5 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionosilver": {
    "value": "Lith S5 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionqbronze": {
    "value": "Lith G1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionqgold": {
    "value": "Lith G1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionqplatinum": {
    "value": "Lith G1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionqsilver": {
    "value": "Lith G1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionrbronze": {
    "value": "Lith N2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionrgold": {
    "value": "Lith N2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionrplatinum": {
    "value": "Lith N2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionrsilver": {
    "value": "Lith N2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionsbronze": {
    "value": "Lith V3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionsgold": {
    "value": "Lith V3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionsplatinum": {
    "value": "Lith V3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t1voidprojectionssilver": {
    "value": "Lith V3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionabronze": {
    "value": "Meso D1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionagold": {
    "value": "Meso D1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionaplatinum": {
    "value": "Meso D1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionasilver": {
    "value": "Meso D1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionbbronze": {
    "value": "Meso N1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionbgold": {
    "value": "Meso N1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionbplatinum": {
    "value": "Meso N1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionbsilver": {
    "value": "Meso N1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectioncbronze": {
    "value": "Meso C1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectioncgold": {
    "value": "Meso C1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectioncplatinum": {
    "value": "Meso C1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectioncsilver": {
    "value": "Meso C1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiondbronze": {
    "value": "Meso V2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiondgold": {
    "value": "Meso V2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiondplatinum": {
    "value": "Meso V2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiondsilver": {
    "value": "Meso V2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionebronze": {
    "value": "Meso N2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionegold": {
    "value": "Meso N2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectioneplatinum": {
    "value": "Meso N2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionesilver": {
    "value": "Meso N2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionfbronze": {
    "value": "Meso B1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionfgold": {
    "value": "Meso B1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionfplatinum": {
    "value": "Meso B1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionfsilver": {
    "value": "Meso B1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiongbronze": {
    "value": "Meso V1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionggold": {
    "value": "Meso V1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiongplatinum": {
    "value": "Meso V1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiongsilver": {
    "value": "Meso V1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionibronze": {
    "value": "Meso S1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionigold": {
    "value": "Meso S1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectioniplatinum": {
    "value": "Meso S1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionisilver": {
    "value": "Meso S1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionjbronze": {
    "value": "Meso S2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionjgold": {
    "value": "Meso S2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionjplatinum": {
    "value": "Meso S2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionjsilver": {
    "value": "Meso S2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionkbronze": {
    "value": "Meso F1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionkgold": {
    "value": "Meso F1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionkplatinum": {
    "value": "Meso F1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionksilver": {
    "value": "Meso F1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionmbronze": {
    "value": "Meso C2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionmgold": {
    "value": "Meso C2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionmplatinum": {
    "value": "Meso C2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionmsilver": {
    "value": "Meso C2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionnbronze": {
    "value": "Meso V3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionngold": {
    "value": "Meso V3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionnplatinum": {
    "value": "Meso V3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionnsilver": {
    "value": "Meso V3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionobronze": {
    "value": "Meso S3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionogold": {
    "value": "Meso S3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionoplatinum": {
    "value": "Meso S3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionosilver": {
    "value": "Meso S3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionqbronze": {
    "value": "Meso F2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionqgold": {
    "value": "Meso F2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionqplatinum": {
    "value": "Meso F2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionqsilver": {
    "value": "Meso F2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionrbronze": {
    "value": "Meso N3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionrgold": {
    "value": "Meso N3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionrplatinum": {
    "value": "Meso N3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionrsilver": {
    "value": "Meso N3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionsbronze": {
    "value": "Meso S4 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionsgold": {
    "value": "Meso S4 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionsplatinum": {
    "value": "Meso S4 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectionssilver": {
    "value": "Meso S4 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiontbronze": {
    "value": "Meso V4 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiontgold": {
    "value": "Meso V4 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiontplatinum": {
    "value": "Meso V4 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t2voidprojectiontsilver": {
    "value": "Meso V4 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionabronze": {
    "value": "Neo S1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionagold": {
    "value": "Neo S1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionaplatinum": {
    "value": "Neo S1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionasilver": {
    "value": "Neo S1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionbbronze": {
    "value": "Neo S2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionbgold": {
    "value": "Neo S2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionbplatinum": {
    "value": "Neo S2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionbsilver": {
    "value": "Neo S2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectioncbronze": {
    "value": "Neo N1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectioncgold": {
    "value": "Neo N1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectioncplatinum": {
    "value": "Neo N1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectioncsilver": {
    "value": "Neo N1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiondbronze": {
    "value": "Neo N2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiondgold": {
    "value": "Neo N2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiondplatinum": {
    "value": "Neo N2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiondsilver": {
    "value": "Neo N2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionebronze": {
    "value": "Neo V1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionegold": {
    "value": "Neo V1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectioneplatinum": {
    "value": "Neo V1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionesilver": {
    "value": "Neo V1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionfbronze": {
    "value": "Neo D1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionfgold": {
    "value": "Neo D1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionfplatinum": {
    "value": "Neo D1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionfsilver": {
    "value": "Neo D1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiongbronze": {
    "value": "Neo S3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionggold": {
    "value": "Neo S3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiongplatinum": {
    "value": "Neo S3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiongsilver": {
    "value": "Neo S3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionibronze": {
    "value": "Neo N3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionigold": {
    "value": "Neo N3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectioniplatinum": {
    "value": "Neo N3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionisilver": {
    "value": "Neo N3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionjbronze": {
    "value": "Neo V2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionjgold": {
    "value": "Neo V2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionjplatinum": {
    "value": "Neo V2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionjsilver": {
    "value": "Neo V2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionkbronze": {
    "value": "Neo V3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionkgold": {
    "value": "Neo V3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionkplatinum": {
    "value": "Neo V3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionksilver": {
    "value": "Neo V3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionmbronze": {
    "value": "Neo A1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionmgold": {
    "value": "Neo A1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionmplatinum": {
    "value": "Neo A1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionmsilver": {
    "value": "Neo A1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionnbronze": {
    "value": "Neo V4 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionngold": {
    "value": "Neo V4 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionnplatinum": {
    "value": "Neo V4 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionnsilver": {
    "value": "Neo V4 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionobronze": {
    "value": "Neo N4 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionogold": {
    "value": "Neo N4 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionoplatinum": {
    "value": "Neo N4 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionosilver": {
    "value": "Neo N4 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionqbronze": {
    "value": "Neo S5 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionqgold": {
    "value": "Neo S5 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionqplatinum": {
    "value": "Neo S5 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionqsilver": {
    "value": "Neo S5 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionrbronze": {
    "value": "Neo T1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionrgold": {
    "value": "Neo T1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionrplatinum": {
    "value": "Neo T1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionrsilver": {
    "value": "Neo T1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionsbronze": {
    "value": "Neo N5 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionsgold": {
    "value": "Neo N5 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionsplatinum": {
    "value": "Neo N5 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionssilver": {
    "value": "Neo N5 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiontbronze": {
    "value": "Neo B1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiontgold": {
    "value": "Neo B1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiontplatinum": {
    "value": "Neo B1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectiontsilver": {
    "value": "Neo B1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionvoltodonataprimebronze": {
    "value": "Neo O1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionvoltodonataprimegold": {
    "value": "Neo O1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionvoltodonataprimeplatinum": {
    "value": "Neo O1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t3voidprojectionvoltodonataprimesilver": {
    "value": "Neo O1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionabronze": {
    "value": "Axi S1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionagold": {
    "value": "Axi S1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionaplatinum": {
    "value": "Axi S1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionasilver": {
    "value": "Axi S1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionbbronze": {
    "value": "Axi V1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionbgold": {
    "value": "Axi V1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionbplatinum": {
    "value": "Axi V1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionbsilver": {
    "value": "Axi V1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectioncbronze": {
    "value": "Axi K1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectioncgold": {
    "value": "Axi K1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectioncplatinum": {
    "value": "Axi K1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectioncsilver": {
    "value": "Axi K1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiondbronze": {
    "value": "Axi N1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiondgold": {
    "value": "Axi N1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiondplatinum": {
    "value": "Axi N1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiondsilver": {
    "value": "Axi N1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionebronze": {
    "value": "Axi A1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionegold": {
    "value": "Axi A1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectioneplatinum": {
    "value": "Axi A1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionesilver": {
    "value": "Axi A1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionfbronze": {
    "value": "Axi V2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionfgold": {
    "value": "Axi V2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionfplatinum": {
    "value": "Axi V2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionfsilver": {
    "value": "Axi V2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiongbronze": {
    "value": "Axi N2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionggold": {
    "value": "Axi N2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiongplatinum": {
    "value": "Axi N2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiongsilver": {
    "value": "Axi N2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionhbronze": {
    "value": "Axi V3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionhgold": {
    "value": "Axi V3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionhplatinum": {
    "value": "Axi V3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionhsilver": {
    "value": "Axi V3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionibronze": {
    "value": "Axi N3 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionigold": {
    "value": "Axi N3 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectioniplatinum": {
    "value": "Axi N3 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionisilver": {
    "value": "Axi N3 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionjbronze": {
    "value": "Axi T1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionjgold": {
    "value": "Axi T1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionjplatinum": {
    "value": "Axi T1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionjsilver": {
    "value": "Axi T1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionkbronze": {
    "value": "Axi G1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionkgold": {
    "value": "Axi G1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionkplatinum": {
    "value": "Axi G1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionksilver": {
    "value": "Axi G1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionmagnovavaultbbronze": {
    "value": "Axi A5 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionmbronze": {
    "value": "Axi V4 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionmgold": {
    "value": "Axi V4 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionmplatinum": {
    "value": "Axi V4 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionmsilver": {
    "value": "Axi V4 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionnbronze": {
    "value": "Axi V5 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionngold": {
    "value": "Axi V5 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionnplatinum": {
    "value": "Axi V5 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionnsilver": {
    "value": "Axi V5 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionobronze": {
    "value": "Axi C1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionogold": {
    "value": "Axi C1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionoplatinum": {
    "value": "Axi C1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionosilver": {
    "value": "Axi C1 Relic (Exceptional)"
  },
  "/Lotus/StoreItems/Types/Game/Projections/T4VoidProjectionPBronze": {
    "value": "Axi A2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionpgold": {
    "value": "Axi A2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionpplatinum": {
    "value": "Axi A2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionpsilver": {
    "value": "Axi A2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionqbronze": {
    "value": "Axi E1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionqgold": {
    "value": "Axi E1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionqplatinum": {
    "value": "Axi E1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionqsilver": {
    "value": "Axi E1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionrbronze": {
    "value": "Axi B1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionrgold": {
    "value": "Axi B1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionrplatinum": {
    "value": "Axi B1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionrsilver": {
    "value": "Axi B1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionsbronze": {
    "value": "Axi E2 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionsgold": {
    "value": "Axi E2 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionsplatinum": {
    "value": "Axi E2 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionssilver": {
    "value": "Axi E2 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiontbronze": {
    "value": "Axi H1 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiontgold": {
    "value": "Axi H1 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiontplatinum": {
    "value": "Axi H1 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectiontsilver": {
    "value": "Axi H1 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionvoltodonataprimebronze": {
    "value": "Axi V8 Relic (Intact)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionvoltodonataprimegold": {
    "value": "Axi V8 Relic (Flawless)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionvoltodonataprimeplatinum": {
    "value": "Axi V8 Relic (Radiant)"
  },
  "/lotus/storeitems/types/game/projections/t4voidprojectionvoltodonataprimesilver": {
    "value": "Axi V8 Relic (Exceptional)"
  },
  "/lotus/storeitems/types/game/quarterswallpapers/barowallpaper": {
    "value": "Ki'teer Stencil"
  },
  "/lotus/storeitems/types/game/solarrails/basicsolarrail": {
    "value": "Solar Rail - Tower Class"
  },
  "/lotus/storeitems/types/game/spectrearmies/bronzespectrearmy": {
    "value": "Vapor Specter Regiment"
  },
  "/lotus/storeitems/types/game/spectrearmies/goldspectrearmy": {
    "value": "Force Specter Regiment"
  },
  "/lotus/storeitems/types/game/spectrearmies/platinumspectrearmy": {
    "value": "Cosmic Specter Regiment"
  },
  "/lotus/storeitems/types/game/spectrearmies/silverspectrearmy": {
    "value": "Phase Specter Regiment"
  },
  "/lotus/storeitems/types/game/voidkeyitem": {
    "value": "Orokin Void Key"
  },
  "/lotus/storeitems/types/items/emotes/agreeemote": {
    "value": "Agree"
  },
  "/lotus/storeitems/types/items/emotes/baroemote": {
    "value": "Ki'teer Presence"
  },
  "/lotus/storeitems/types/items/emotes/bowemote": {
    "value": "Bow"
  },
  "/lotus/storeitems/types/items/emotes/bragemote": {
    "value": "Boast"
  },
  "/lotus/storeitems/types/items/emotes/clapemote": {
    "value": "Clap"
  },
  "/lotus/storeitems/types/items/emotes/deepbowemote": {
    "value": "Deep Bow"
  },
  "/lotus/storeitems/types/items/emotes/disagreeemote": {
    "value": "Disagree"
  },
  "/lotus/storeitems/types/items/emotes/farewellemote": {
    "value": "Wave"
  },
  "/lotus/storeitems/types/items/emotes/followemote": {
    "value": "Follow"
  },
  "/lotus/storeitems/types/items/emotes/kata2emote": {
    "value": "Aquarid Narta"
  },
  "/lotus/storeitems/types/items/emotes/kata3emote": {
    "value": "Eclipse Narta"
  },
  "/lotus/storeitems/types/items/emotes/kata5emote": {
    "value": "Fathom Narta"
  },
  "/lotus/storeitems/types/items/emotes/kataemote": {
    "value": "Solstice Narta"
  },
  "/lotus/storeitems/types/items/emotes/meditateemote": {
    "value": "Meditate"
  },
  "/lotus/storeitems/types/items/emotes/shrugemote": {
    "value": "Shrug"
  },
  "/lotus/storeitems/types/items/miscitems/alertium": {
    "value": "Nitain Extract"
  },
  "/lotus/storeitems/types/items/miscitems/alloyplate": {
    "value": "Alloy Plate"
  },
  "/lotus/storeitems/types/items/miscitems/alphacorruptorresource": {
    "value": "Alpha Corruptor"
  },
  "/lotus/storeitems/types/items/miscitems/archwingnavcode": {
    "value": "Orokin Archive"
  },
  "/lotus/storeitems/types/items/miscitems/argoncrystal": {
    "value": "Argon Crystal"
  },
  "/lotus/storeitems/types/items/miscitems/beacon": {
    "value": "Proof Fragment"
  },
  "/lotus/storeitems/types/items/miscitems/betacorruptorresource": {
    "value": "Beta Corruptor"
  },
  "/lotus/storeitems/types/items/miscitems/bossnavcode": {
    "value": "Lephantis Nav Coordinate"
  },
  "/lotus/storeitems/types/items/miscitems/circuits": {
    "value": "Circuits"
  },
  "/lotus/storeitems/types/items/miscitems/controlmodule": {
    "value": "Control Module"
  },
  "/lotus/storeitems/types/items/miscitems/cryotic": {
    "value": "Cryotic"
  },
  "/lotus/storeitems/types/items/miscitems/dangerroomkey": {
    "value": "Simulacrum Access Key"
  },
  "/lotus/storeitems/types/items/miscitems/datafragment": {
    "value": "Tethra Data Fragments"
  },
  "/lotus/storeitems/types/items/miscitems/ferrite": {
    "value": "Ferrite"
  },
  "/lotus/storeitems/types/items/miscitems/forma": {
    "value": "Forma"
  },
  "/lotus/storeitems/types/items/miscitems/formaaura": {
    "value": "Aura Forma"
  },
  "/lotus/storeitems/types/items/miscitems/formaumbra": {
    "value": "Umbra Forma"
  },
  "/lotus/storeitems/types/items/miscitems/gallium": {
    "value": "Gallium"
  },
  "/lotus/storeitems/types/items/miscitems/heknavcode": {
    "value": "Vay Hek Nav Coordinate"
  },
  "/lotus/storeitems/types/items/miscitems/infestedaladcoordinate": {
    "value": "Mutalist Alad V Nav Coordinate"
  },
  "/lotus/storeitems/types/items/miscitems/juggernautparta": {
    "value": "Pulsating Tubercles"
  },
  "/lotus/storeitems/types/items/miscitems/juggernautpartb": {
    "value": "Infected Palpators"
  },
  "/lotus/storeitems/types/items/miscitems/juggernautpartc": {
    "value": "Chitinous Husk"
  },
  "/lotus/storeitems/types/items/miscitems/juggernautpartd": {
    "value": "Severed Bile Sac"
  },
  "/lotus/storeitems/types/items/miscitems/libraryscannerdoublescanupgrade": {
    "value": "Cross-matrix Widget"
  },
  "/lotus/storeitems/types/items/miscitems/libraryscannerrechargeupgrade": {
    "value": "Sol-battery Widget"
  },
  "/lotus/storeitems/types/items/miscitems/libraryscannerscanspeedupgrade": {
    "value": "Vector-thread Widget"
  },
  "/lotus/storeitems/types/items/miscitems/miragecode": {
    "value": "Orokin Cipher"
  },
  "/lotus/storeitems/types/items/miscitems/morphic": {
    "value": "Morphics"
  },
  "/lotus/storeitems/types/items/miscitems/nanospores": {
    "value": "Nano Spores"
  },
  "/lotus/storeitems/types/items/miscitems/navcode": {
    "value": "Nav Coordinate"
  },
  "/lotus/storeitems/types/items/miscitems/neuralsensor": {
    "value": "Neural Sensors"
  },
  "/lotus/storeitems/types/items/miscitems/neurode": {
    "value": "Neurodes"
  },
  "/lotus/storeitems/types/items/miscitems/omegaisotope": {
    "value": "Omega Isotope"
  },
  "/lotus/storeitems/types/items/miscitems/orokincatalyst": {
    "value": "Orokin Catalyst"
  },
  "/lotus/storeitems/types/items/miscitems/orokincell": {
    "value": "Orokin Cell"
  },
  "/lotus/storeitems/types/items/miscitems/orokinreactor": {
    "value": "Orokin Reactor"
  },
  "/lotus/storeitems/types/items/miscitems/oxiumalloy": {
    "value": "Oxium"
  },
  "/lotus/storeitems/types/items/miscitems/photoboothtilehydroidrelay": {
    "value": "Hydroid's Relay Scene"
  },
  "/lotus/storeitems/types/items/miscitems/photoboothtileinarostomb": {
    "value": "Inaros Tomb Scene"
  },
  "/lotus/storeitems/types/items/miscitems/photoboothtileorokinextraction": {
    "value": "Orokin Tower Extraction Scene"
  },
  "/lotus/storeitems/types/items/miscitems/plastids": {
    "value": "Plastids"
  },
  "/lotus/storeitems/types/items/miscitems/polymerbundle": {
    "value": "Polymer Bundle"
  },
  "/lotus/storeitems/types/items/miscitems/polymerbundle240tutorialquest": {
    "value": "Polymer Bundle"
  },
  "/lotus/storeitems/types/items/miscitems/polymerbundleraidtutorial": {
    "value": "Polymer Bundle"
  },
  "/lotus/storeitems/types/items/miscitems/primebucks": {
    "value": "Orokin Ducats"
  },
  "/lotus/storeitems/types/items/miscitems/rubedo": {
    "value": "Rubedo"
  },
  "/lotus/storeitems/types/items/miscitems/salvage": {
    "value": "Salvage"
  },
  "/lotus/storeitems/types/items/miscitems/salvage450tutorialquest": {
    "value": "Salvage"
  },
  "/lotus/storeitems/types/items/miscitems/salvageraidtutorial": {
    "value": "Salvage"
  },
  "/lotus/storeitems/types/items/miscitems/stablecorruptorresource": {
    "value": "Stable Corruptor"
  },
  "/lotus/storeitems/types/items/miscitems/tellurium": {
    "value": "Tellurium"
  },
  "/lotus/storeitems/types/items/miscitems/utilityunlocker": {
    "value": "Exilus Adapter"
  },
  "/lotus/storeitems/types/items/miscitems/vayhekcoordinatefragmenta": {
    "value": "Delta Beacon"
  },
  "/lotus/storeitems/types/items/miscitems/vayhekcoordinatefragmentb": {
    "value": "Gamma Beacon"
  },
  "/lotus/storeitems/types/items/miscitems/vayhekcoordinatefragmentc": {
    "value": "Kappa Beacon"
  },
  "/lotus/storeitems/types/items/miscitems/vayhekcoordinatefragmentd": {
    "value": "Omega Beacon"
  },
  "/lotus/storeitems/types/items/plants/miscitems/commondayplantitem": {
    "value": "Sunlight Threshcone Extract"
  },
  "/lotus/storeitems/types/items/plants/miscitems/commonnightplantitem": {
    "value": "Moonlight Threshcone Extract"
  },
  "/lotus/storeitems/types/items/plants/miscitems/raredayplantitem": {
    "value": "Sunlight Jadeleaf Extract"
  },
  "/lotus/storeitems/types/items/plants/miscitems/rarenightplantitem": {
    "value": "Moonlight Jadeleaf Extract"
  },
  "/lotus/storeitems/types/items/plants/miscitems/uncommondayplantitem": {
    "value": "Sunlight Dragonlily Extract"
  },
  "/lotus/storeitems/types/items/plants/miscitems/uncommonnightplantitem": {
    "value": "Moonlight Dragonlily Extract"
  },
  "/lotus/storeitems/types/items/research/biocomponent": {
    "value": "Mutagen Mass"
  },
  "/lotus/storeitems/types/items/research/biofragment": {
    "value": "Mutagen Sample"
  },
  "/lotus/storeitems/types/items/research/chemcomponent": {
    "value": "Detonite Injector"
  },
  "/lotus/storeitems/types/items/research/chemfragment": {
    "value": "Detonite Ampule"
  },
  "/lotus/storeitems/types/items/research/cipherplus": {
    "value": "Corpus Cipher"
  },
  "/lotus/storeitems/types/items/research/datamassplus": {
    "value": "Corpus Datamass"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocoloreartha": {
    "value": "River Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorearthb": {
    "value": "Tree Green"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorearthc": {
    "value": "Sand Yellow"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorearthd": {
    "value": "Oak Brown"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorearthe": {
    "value": "Night Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorfalldojoa": {
    "value": "Leech Green"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorfalldojob": {
    "value": "Moa Green"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorfalldojoc": {
    "value": "Autumn Brown"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorfalldojod": {
    "value": "Leaf Red"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorfalldojoe": {
    "value": "Dust Brown"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocoloriceplaneta": {
    "value": "Glacial Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocoloriceplanetb": {
    "value": "Jackal Yellow"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocoloriceplanetc": {
    "value": "Morning Yellow"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocoloriceplanetd": {
    "value": "Anti Violet"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocoloriceplanete": {
    "value": "Railgun Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorinfesteda": {
    "value": "Boiler Red"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorinfestedb": {
    "value": "Mutalist Red"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorinfestedc": {
    "value": "Crawler Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorinfestedd": {
    "value": "Charger Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolorinfestede": {
    "value": "Nanite Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolormarsattacksa": {
    "value": "Elysium Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolormarsattacksb": {
    "value": "Olympus Blue"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolormarsattacksc": {
    "value": "Syrtis Orange"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolormarsattacksd": {
    "value": "Hesperia Brown"
  },
  "/lotus/storeitems/types/items/research/dojocolors/dojocolormarsattackse": {
    "value": "Tharsis Brown"
  },
  "/lotus/storeitems/types/items/research/energycomponent": {
    "value": "Fieldron"
  },
  "/lotus/storeitems/types/items/research/energyfragment": {
    "value": "Fieldron Sample"
  },
  "/lotus/storeitems/types/items/shipchristmasifier": {
    "value": "Festive Interior Decorations"
  },
  "/lotus/storeitems/types/items/shipdecos/aladvbobblehead": {
    "value": "Noggle Statue - Alad V"
  },
  "/lotus/storeitems/types/items/shipdecos/ashbobblehead": {
    "value": "Noggle Statue - Ash"
  },
  "/lotus/storeitems/types/items/shipdecos/bansheebobblehead": {
    "value": "Noggle Statue - Banshee"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerbobblehead": {
    "value": "Noggle Statue - Baro Ki'teer"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecorationa": {
    "value": "Mahd Luxxum Ornament"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/BaroKiTeerDecorationB": {
    "value": "Akka Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecorationc": {
    "value": "Zag Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecorationd": {
    "value": "Dvad Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecoratione": {
    "value": "Asra Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecorationf": {
    "value": "Puspa Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecorationg": {
    "value": "Sima Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/barokiteerdecorationh": {
    "value": "Vez Luxxum Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/conclaveoroornament": {
    "value": "Oro Ornament"
  },
  "/lotus/storeitems/types/items/shipdecos/emberbobblehead": {
    "value": "Noggle Statue - Ember"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburarchwingbobblehead": {
    "value": "Noggle Statue - Excalibur With Odonata"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburbobblehead": {
    "value": "Noggle Statue - Excalibur"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburjadebobblehead": {
    "value": "Noggle Statue - Jade Excalibur"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburobsidianbobblehead": {
    "value": "Noggle Statue - Obsidian Excalibur"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburprimebobblehead": {
    "value": "Noggle Statue - Excalibur Prime"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburprismabobblehead": {
    "value": "Noggle Statue - Prisma Excalibur"
  },
  "/lotus/storeitems/types/items/shipdecos/excaliburprotobobblehead": {
    "value": "Noggle Statue - Proto-excalibur"
  },
  "/lotus/storeitems/types/items/shipdecos/frostbobblehead": {
    "value": "Noggle Statue - Frost"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/GarvLatroxPoster": {
    "value": "Garv & Latrox Poster"
  },
  "/lotus/storeitems/types/items/shipdecos/grineerexcavationbossbobblehead": {
    "value": "Noggle Statue - Boril"
  },
  "/lotus/storeitems/types/items/shipdecos/grineermarinealt2desertbobblehead": {
    "value": "Noggle Statue - Elite Arid Lancer"
  },
  "/lotus/storeitems/types/items/shipdecos/grineermarinealtarcticbobblehead": {
    "value": "Noggle Statue - Elite Lancer"
  },
  "/lotus/storeitems/types/items/shipdecos/grineermarinealtdesertbobblehead": {
    "value": "Noggle Statue - Arid Seeker"
  },
  "/lotus/storeitems/types/items/shipdecos/grineermarinearcticbobblehead": {
    "value": "Noggle Statue - Arid Lancer"
  },
  "/lotus/storeitems/types/items/shipdecos/grineermarinebobblehead": {
    "value": "Noggle Statue - Lancer"
  },
  "/lotus/storeitems/types/items/shipdecos/grineermarinedesertbobblehead": {
    "value": "Noggle Statue - Arid Lancer"
  },
  "/lotus/storeitems/types/items/shipdecos/huladancingdoll": {
    "value": "Statuette - Dancing Doll"
  },
  "/lotus/storeitems/types/items/shipdecos/hydroidbobblehead": {
    "value": "Noggle Statue - Hydroid"
  },
  "/lotus/storeitems/types/items/shipdecos/kavatbust": {
    "value": "Bronze Kavat Bust"
  },
  "/lotus/storeitems/types/items/shipdecos/kubrowbust": {
    "value": "Bronze Kubrow Bust"
  },
  "/lotus/storeitems/types/items/shipdecos/kubrowkavatlowpolyposter": {
    "value": "Prisma Companion Poster"
  },
  "/lotus/storeitems/types/items/shipdecos/lisetpropcleaningdronebaro": {
    "value": "Ki'teer Domestik Drone"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/LisetPropGrineerFlak": {
    "value": "Flak Fighter Decoration"
  },
  "/lotus/storeitems/types/items/shipdecos/lisetpropostrugbaro": {
    "value": "Tenno Kindred Rug"
  },
  "/lotus/storeitems/types/items/shipdecos/lokibobblehead": {
    "value": "Noggle Statue - Loki"
  },
  "/lotus/storeitems/types/items/shipdecos/magbobblehead": {
    "value": "Noggle Statue - Mag"
  },
  "/lotus/storeitems/types/items/shipdecos/miragebobblehead": {
    "value": "Noggle Statue - Mirage"
  },
  "/lotus/storeitems/types/items/shipdecos/nekrosbobblehead": {
    "value": "Noggle Statue - Nekros"
  },
  "/lotus/storeitems/types/items/shipdecos/novabobblehead": {
    "value": "Noggle Statue - Nova"
  },
  "/lotus/storeitems/types/items/shipdecos/nyxbobblehead": {
    "value": "Noggle Statue - Nyx"
  },
  "/lotus/storeitems/types/items/shipdecos/oberonbobblehead": {
    "value": "Noggle Statue - Oberon"
  },
  "/lotus/storeitems/types/items/shipdecos/orbiterpictureframebaro": {
    "value": "Display - Argyle"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/ParazonPoster": {
    "value": "Parazon Poster"
  },
  "/lotus/storeitems/types/items/shipdecos/pedistalprime": {
    "value": "Pedestal Prime"
  },
  "/lotus/storeitems/types/items/shipdecos/plushies/plushydesertskate": {
    "value": "Desert Skate Floof"
  },
  "/lotus/storeitems/types/items/shipdecos/relayhydroidbobblehead": {
    "value": "Noggle Statue - Hydroid Reprise"
  },
  "/lotus/storeitems/types/items/shipdecos/rhinobobblehead": {
    "value": "Noggle Statue - Rhino"
  },
  "/lotus/storeitems/types/items/shipdecos/sargusrukbobblehead": {
    "value": "Noggle Statue - Sargas Ruk"
  },
  "/lotus/storeitems/types/items/shipdecos/sarynbobblehead": {
    "value": "Noggle Statue - Saryn"
  },
  "/lotus/storeitems/types/items/shipdecos/tarotcardtennoconc": {
    "value": "Deimos Veolicpod Prex"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/TarotCardTennoConF": {
    "value": "Deimos Jugulus Prex"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/TarotCardTennoConG": {
    "value": "Deimos Saxum Prex"
  },
  "/lotus/storeitems/types/items/shipdecos/trinitybobblehead": {
    "value": "Noggle Statue - Trinity"
  },
  "/lotus/storeitems/types/items/shipdecos/valkyrbobblehead": {
    "value": "Noggle Statue - Valkyr"
  },
  "/lotus/storeitems/types/items/shipdecos/vaubanbobblehead": {
    "value": "Noggle Statue - Vauban"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/Vignettes/Warframes/ArchwingAFItem": {
    "value": "Archwing Articula"
  },
  "/lotus/storeitems/types/items/shipdecos/voltbobblehead": {
    "value": "Noggle Statue - Volt"
  },
  "/lotus/storeitems/types/items/shipdecos/vorbobblehead": {
    "value": "Noggle Statue - Vor"
  },
  "/lotus/storeitems/types/items/shipdecos/zephyrbobblehead": {
    "value": "Noggle Statue - Zephyr"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/alertsfeatureitem": {
    "value": "Alerts Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/arsenalfeatureitem": {
    "value": "Arsenal Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/ceresnavigationfeatureitem": {
    "value": "Ceres Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/clanfeatureitem": {
    "value": "Clan Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/earthnavigationfeatureitem": {
    "value": "Earth Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/erisnavigationfeatureitem": {
    "value": "Eris Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/europanavigationfeatureitem": {
    "value": "Europa Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/foundryfeatureitem": {
    "value": "Foundry Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/geneticfoundryfeatureitem": {
    "value": "Incubator Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/jupiternavigationfeatureitem": {
    "value": "Jupiter Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/markettieronefeatureitem": {
    "value": "Market Tier 1 Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/markettiertwofeatureitem": {
    "value": "Market Tier 2 Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/marsnavigationfeatureitem": {
    "value": "Mars Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/mercurynavigationfeatureitem": {
    "value": "Galleon Nav Coordinates"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/modsfeatureitem": {
    "value": "Mods Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/modsfusionfeatureitem": {
    "value": "Mod Fusion Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/modstransmutefeatureitem": {
    "value": "Mod Transmute Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/neptunenavigationfeatureitem": {
    "value": "Neptune Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/phobosnavigationfeatureitem": {
    "value": "Phobos Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/plutonavigationfeatureitem": {
    "value": "Pluto Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/saturnnavigationfeatureitem": {
    "value": "Saturn Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/sednanavigationfeatureitem": {
    "value": "Sedna Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/socialmenufeatureitem": {
    "value": "Comms Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/solarchartfeatureitem": {
    "value": "Solar Chart Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/uranusnavigationfeatureitem": {
    "value": "Uranus Nav Segment"
  },
  "/lotus/storeitems/types/items/shipfeatureitems/venusnavigationfeatureitem": {
    "value": "Venus Nav Segment"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/arbitersdogtag": {
    "value": "Medallion"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/arbitersraredogtag": {
    "value": "Maxim Medallion"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/arbitersuncommondogtag": {
    "value": "Lawful Medallion"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/cephalondogtag": {
    "value": "Datum"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/cephalonraredogtag": {
    "value": "Genius Datum"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/cephalonuncommondogtag": {
    "value": "Intriguing Datum"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/kelaeventdogtag": {
    "value": "Grineer Defector's Location"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/newlokadogtag": {
    "value": "Seed"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/newlokararedogtag": {
    "value": "Flawless Seed"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/newlokauncommondogtag": {
    "value": "Bountiful Seed"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/perrindogtag": {
    "value": "Quittance"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/perrinraredogtag": {
    "value": "Partner Quittance"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/perrinuncommondogtag": {
    "value": "Executive Quittance"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/redveildogtag": {
    "value": "Mark"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/redveilraredogtag": {
    "value": "Exalted Mark"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/redveiluncommondogtag": {
    "value": "Honored Mark"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/steelmeridiandogtag": {
    "value": "Insignia"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/steelmeridianraredogtag": {
    "value": "General Insignia"
  },
  "/lotus/storeitems/types/items/syndicatedogtags/steelmeridianuncommondogtag": {
    "value": "Defender Insignia"
  },
  "/lotus/storeitems/types/keys/archwingquest/archwingquestkeychain": {
    "value": "The Archwing"
  },
  "/lotus/storeitems/types/keys/archwingquest/missionfour": {
    "value": "Find Corpus Intelligence About The Balor Fomorians"
  },
  "/lotus/storeitems/types/keys/archwingquest/missionone": {
    "value": "Recover The Orokin Archive"
  },
  "/lotus/storeitems/types/keys/archwingquest/missionthree": {
    "value": "Find Corpus Intelligence About The Balor Fomorians"
  },
  "/lotus/storeitems/types/keys/archwingquest/missiontwo": {
    "value": "Extract The Odonata Archwing Wings Blueprint"
  },
  "/lotus/storeitems/types/keys/corpuscapturekey": {
    "value": "Corpus Void Key"
  },
  "/lotus/storeitems/types/keys/derelictcapturekey": {
    "value": "Orokin Derelict Capture"
  },
  "/lotus/storeitems/types/keys/derelictdefensekey": {
    "value": "Orokin Derelict Defense"
  },
  "/lotus/storeitems/types/keys/derelictexterminatekey": {
    "value": "Orokin Derelict Exterminate"
  },
  "/lotus/storeitems/types/keys/derelictgolemkey": {
    "value": "Orokin Derelict Assassinate"
  },
  "/lotus/storeitems/types/keys/derelictsabotagekey": {
    "value": "Orokin Derelict Sabotage"
  },
  "/lotus/storeitems/types/keys/derelictsurvivalkey": {
    "value": "Orokin Derelict Survival"
  },
  "/lotus/storeitems/types/keys/dojokey": {
    "value": "Clan Key"
  },
  "/lotus/storeitems/types/keys/dragonquest/dragonquestkeychain": {
    "value": "The New Strange"
  },
  "/lotus/storeitems/types/keys/dragonquest/dragonquestmissionfour": {
    "value": "Defeat Chroma"
  },
  "/lotus/storeitems/types/keys/dragonquest/dragonquestmissionone": {
    "value": "Find Cephalon Simaris' Missing Sentinels"
  },
  "/lotus/storeitems/types/keys/dragonquest/dragonquestmissionthree": {
    "value": "Revisit The Derelict"
  },
  "/lotus/storeitems/types/keys/dragonquest/dragonquestmissiontwo": {
    "value": "Investigate The Source Of The Transmission"
  },
  "/lotus/storeitems/types/keys/infestedaladvquest/assassinateinfestedaladvkey": {
    "value": "Mutalist Alad V Assassinate"
  },
  "/lotus/storeitems/types/keys/infestedaladvquest/infestedaladvquestkeychain": {
    "value": "Patient Zero"
  },
  "/lotus/storeitems/types/keys/infestedaladvquest/missionone": {
    "value": "Find Out What The Corpus Know About Alad V"
  },
  "/lotus/storeitems/types/keys/infestedaladvquest/missionthree": {
    "value": "Destroy Alad V's Laboratory Ship"
  },
  "/lotus/storeitems/types/keys/infestedaladvquest/missiontwoa": {
    "value": "Sabotage Alads Infested Ship At Brugia"
  },
  "/lotus/storeitems/types/keys/infestedcorpushiveeventkey": {
    "value": "Breeding Grounds"
  },
  "/lotus/storeitems/types/keys/infestedintroquest/infestedintroquestkeychain": {
    "value": "Once Awake"
  },
  "/lotus/storeitems/types/keys/infestedintroquest/missionone": {
    "value": "Investigate The Bio Weapon"
  },
  "/lotus/storeitems/types/keys/infestedintroquest/missionthree": {
    "value": "Defend The Bomb"
  },
  "/lotus/storeitems/types/keys/infestedintroquest/missiontwo": {
    "value": "Exterminate An Infestation"
  },
  "/lotus/storeitems/types/keys/kubrowquest/kubrowquestkeychain": {
    "value": "Howl Of The Kubrow"
  },
  "/lotus/storeitems/types/keys/kubrowquest/missionone": {
    "value": "Acquire The Incubator Segment"
  },
  "/lotus/storeitems/types/keys/kubrowquest/missionthree": {
    "value": "Defend Your Kubrow In Combat"
  },
  "/lotus/storeitems/types/keys/kubrowquest/missiontwo": {
    "value": "Find A Kubrow Egg In Feral Kubrow Dens"
  },
  "/lotus/storeitems/types/keys/limboquest/limbobeaconkey": {
    "value": "Limbo Theorem"
  },
  "/lotus/storeitems/types/keys/limboquest/limbochassiskey": {
    "value": "Limbo Chassis Theorem"
  },
  "/lotus/storeitems/types/keys/limboquest/limbohelmetkey": {
    "value": "Limbo Neuroptics Theorem"
  },
  "/lotus/storeitems/types/keys/limboquest/limboquestkeychain": {
    "value": "The Limbo Theorem"
  },
  "/lotus/storeitems/types/keys/limboquest/limbosystemskey": {
    "value": "Limbo Systems Theorem"
  },
  "/lotus/storeitems/types/keys/miragequest/miragequestkeychain": {
    "value": "Hidden Messages"
  },
  "/lotus/storeitems/types/keys/miragequest/missionone": {
    "value": "Solve The Riddle From The Inbox Message"
  },
  "/lotus/storeitems/types/keys/miragequest/missionthree": {
    "value": "Solve The Riddle From The Inbox Message"
  },
  "/lotus/storeitems/types/keys/miragequest/missiontwo": {
    "value": "Solve The Riddle From The Inbox Message"
  },
  "/lotus/storeitems/types/keys/mummyquestkeyblueprint": {
    "value": "Sands Of Inaros Blueprint"
  },
  "/lotus/storeitems/types/keys/nightmarekeyshipyardsretrieval": {
    "value": "Tethra Shield Cipher"
  },
  "/lotus/storeitems/types/keys/orokincapturekeya": {
    "value": "Tower I Capture"
  },
  "/lotus/storeitems/types/keys/orokincapturekeyb": {
    "value": "Tower II Capture"
  },
  "/lotus/storeitems/types/keys/orokincapturekeyc": {
    "value": "Tower III Capture"
  },
  "/lotus/storeitems/types/keys/orokindefensekeya": {
    "value": "Tower I Defense"
  },
  "/lotus/storeitems/types/keys/orokindefensekeyb": {
    "value": "Tower II Defense"
  },
  "/lotus/storeitems/types/keys/orokindefensekeyc": {
    "value": "Tower Iii Defense"
  },
  "/lotus/storeitems/types/keys/orokinkeya": {
    "value": "Tower I Exterminate"
  },
  "/lotus/storeitems/types/keys/orokinkeyb": {
    "value": "Tower I Survival"
  },
  "/lotus/storeitems/types/keys/orokinkeyc": {
    "value": "Tower II Exterminate"
  },
  "/lotus/storeitems/types/keys/orokinkeyd": {
    "value": "Tower Ii Survival"
  },
  "/lotus/storeitems/types/keys/orokinkeye": {
    "value": "Tower Iii Exterminate"
  },
  "/lotus/storeitems/types/keys/orokinmobiledefensekeya": {
    "value": "Tower I Mobile Defense"
  },
  "/lotus/storeitems/types/keys/orokinmobiledefensekeyb": {
    "value": "Tower Ii Mobile Defense"
  },
  "/lotus/storeitems/types/keys/orokinmobiledefensekeyc": {
    "value": "Tower Iii Mobile Defense"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowercapturetier4key": {
    "value": "Tower Iv Capture"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowerdefensetier4key": {
    "value": "Tower Iv Defense"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowerexterminatetier4key": {
    "value": "Tower Iv Exterminate"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowerinterceptiontier4key": {
    "value": "Tower Iv Interception"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowermobiledefensetier4key": {
    "value": "Tower Iv Mobile Defense"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowersabotagetier1key": {
    "value": "Tower I Sabotage"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowersabotagetier2key": {
    "value": "Tower Ii Sabotage"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowersabotagetier3key": {
    "value": "Tower Iii Sabotage"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowersabotagetier4key": {
    "value": "Tower Iv Sabotage"
  },
  "/lotus/storeitems/types/keys/orokintowerkeys/orokintowersurvivaltier4key": {
    "value": "Tower Iv Survival"
  },
  "/lotus/storeitems/types/keys/orokintowersurvivalt3key": {
    "value": "Tower Iii Survival"
  },
  "/lotus/storeitems/types/keys/raidkeys/raid01stage01keyitem": {
    "value": "The Law Of Retribution"
  },
  "/lotus/storeitems/types/keys/raidkeys/raid01stage01nightmarekeyitem": {
    "value": "The Law Of Retribution (Nightmare)"
  },
  "/lotus/storeitems/types/keys/raidkeys/raid01stage02keyitem": {
    "value": "The Law Of Retribution"
  },
  "/lotus/storeitems/types/keys/raidkeys/raid01stage02nightmarekeyitem": {
    "value": "The Law Of Retribution (Nightmare)"
  },
  "/lotus/storeitems/types/keys/raidkeys/raid01stage03keyitem": {
    "value": "The Law Of Retribution"
  },
  "/lotus/storeitems/types/keys/raidkeys/raid01stage03nightmarekeyitem": {
    "value": "The Law Of Retribution (Nightmare)"
  },
  "/lotus/storeitems/types/keys/settlementtestkey": {
    "value": "Tower I Exterminate"
  },
  "/lotus/storeitems/types/keys/spyquestkeychain/spyquestfinalkey": {
    "value": "Find The Arcane Machine"
  },
  "/lotus/storeitems/types/keys/spyquestkeychain/spyquestintrokey": {
    "value": "Capture Maroo"
  },
  "/lotus/storeitems/types/keys/spyquestkeychain/spyquestkeya": {
    "value": "Take An Arcane Codex"
  },
  "/lotus/storeitems/types/keys/spyquestkeychain/spyquestkeyb": {
    "value": "Take The Grineer Arcane Codices"
  },
  "/lotus/storeitems/types/keys/spyquestkeychain/spyquestkeyc": {
    "value": "Take The Corpus Arcane Codices"
  },
  "/lotus/storeitems/types/keys/spyquestkeychain/spyquestkeychain": {
    "value": "Stolen Dreams"
  },
  "/lotus/storeitems/types/keys/testkeyforestevent": {
    "value": "Cicero Injector"
  },
  "/lotus/storeitems/types/keys/testkeyinfestedcorpushive": {
    "value": "Breeding Grounds"
  },
  "/lotus/storeitems/types/keys/testkeyoutposthijack": {
    "value": "Tethra Cipher"
  },
  "/lotus/storeitems/types/keys/testkeyshipyardsinterception": {
    "value": "Tethras Doom"
  },
  "/lotus/storeitems/types/keys/testkeyshipyardsretrieval": {
    "value": "Tethra Cipher"
  },
  "/lotus/storeitems/types/keys/veyhekkey": {
    "value": "Vay Hek Frequency Triangulator"
  },
  "/lotus/storeitems/types/keys/vorsprize/missionfive": {
    "value": "Obtain The Nav Segment"
  },
  "/lotus/storeitems/types/keys/vorsprize/missionfour": {
    "value": "Raid The Corpus Resource Caches"
  },
  "/lotus/storeitems/types/keys/vorsprize/missionone": {
    "value": "Restore Ship Comms"
  },
  "/lotus/storeitems/types/keys/vorsprize/missionsix": {
    "value": "Confront Captain Vor"
  },
  "/lotus/storeitems/types/keys/vorsprize/missionthree": {
    "value": "Locate The Foundry Segment"
  },
  "/lotus/storeitems/types/keys/vorsprize/missiontwo": {
    "value": "Liberate The Imprisoned Arms Dealer"
  },
  "/lotus/storeitems/types/keys/vorsprize/vorsprizequestkeychain": {
    "value": "Vors Prize"
  },
  "/lotus/storeitems/types/pickups/credits/1000credits": {
    "value": "1000 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/1500credits": {
    "value": "1500 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/2000credits": {
    "value": "2000 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/2500credits": {
    "value": "2500 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/3000credits": {
    "value": "3000 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/4000credits": {
    "value": "4000 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/5000credits": {
    "value": "5000 Credits Cache"
  },
  "/lotus/storeitems/types/pickups/credits/500credits": {
    "value": "500 Credits Cache"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/demolitionarchwing/demolitionarchwingchassiscomponent": {
    "value": "Elytron Harness"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/demolitionarchwing/demolitionarchwingsystemscomponent": {
    "value": "Elytron Systems"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/demolitionarchwing/demolitionarchwingwingscomponent": {
    "value": "Elytron Wings"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/primearchwing/primearchwingchassiscomponent": {
    "value": "Odonata Prime Harness"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/primearchwing/primearchwingsystemscomponent": {
    "value": "Odonata Prime Systems"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/primearchwing/primearchwingwingscomponent": {
    "value": "Odonata Prime Wings"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/standardarchwing/standardarchwingchassiscomponent": {
    "value": "Odonata Harness"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/standardarchwing/standardarchwingsystemscomponent": {
    "value": "Odonata Systems"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/standardarchwing/standardarchwingwingscomponent": {
    "value": "Odonata Wings"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/stealtharchwing/stealtharchwingchassiscomponent": {
    "value": "Itzal Harness"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/stealtharchwing/stealtharchwingsystemscomponent": {
    "value": "Itzal Systems"
  },
  "/lotus/storeitems/types/recipes/archwingrecipes/stealtharchwing/stealtharchwingwingscomponent": {
    "value": "Itzal Wings"
  },
  "/lotus/storeitems/types/recipes/components/brandremovalfakeitem": {
    "value": "Grustrag Bolt Release"
  },
  "/lotus/storeitems/types/recipes/components/corruptedbombardballblueprint": {
    "value": "Corrupted Bombard Specter Blueprint"
  },
  "/lotus/storeitems/types/recipes/components/formaaurablueprint": {
    "value": "Aura Forma Blueprint"
  },
  "/lotus/storeitems/types/recipes/components/formablueprint": {
    "value": "Forma Blueprint"
  },
  "/lotus/storeitems/types/recipes/components/formaumbrablueprint": {
    "value": "Umbra Forma Blueprint"
  },
  "/lotus/storeitems/types/recipes/components/orokincatalystblueprint": {
    "value": "Orokin Catalyst Blueprint"
  },
  "/lotus/storeitems/types/recipes/components/orokinreactorblueprint": {
    "value": "Orokin Reactor Blueprint"
  },
  "/lotus/storeitems/types/recipes/components/vorboltremoverfakeitem": {
    "value": "Ascaris Negator"
  },
  "/lotus/storeitems/types/recipes/components/weaponutilityunlockerblueprint": {
    "value": "Exilus Weapon Adapter Blueprint"
  },
  "/lotus/storeitems/types/recipes/cosmeticenhancerblueprint": {
    "value": "Arcane"
  },
  "/lotus/storeitems/types/recipes/cosmeticenhancerfakeitem": {
    "value": "Arcane"
  },
  "/lotus/storeitems/types/recipes/darkswordblueprint": {
    "value": "Dark Sword Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/animaalthelmetblueprint": {
    "value": "Equinox Solstice Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/bardalthelmetblueprint": {
    "value": "Octavia Cadenza Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/brawleralthelmetblueprint": {
    "value": "Atlas Tartarus Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/brawleralttwohelmetblueprint": {
    "value": "Atlas Shikoro Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/chromaaltbhelmetblueprint": {
    "value": "Chroma Amaru Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/cowgirlalthelmetblueprint": {
    "value": "Mesa Longhorn Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/dragonalthelmetblueprint": {
    "value": "Chroma Drac Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/excaliburmordredhelmetblueprint": {
    "value": "Excalibur Mordred Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/fairyalthelmetblueprint": {
    "value": "Titania Aurai Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/fairyalttwohelmetblueprint": {
    "value": "Titania Mab Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/garudaalthelmetblueprint": {
    "value": "Garuda Bathory Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/glassalthelmetblueprint": {
    "value": "Gara Virago Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/harlequinalthelmetblueprint": {
    "value": "Mirage Harlequin Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/hildrynalthelmetblueprint": {
    "value": "Hildryn Asuron Helmet"
  },
  "/lotus/storeitems/types/recipes/helmets/khoraalthelmetblueprint": {
    "value": "Khora Delphi Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/limboaltbhelmetblueprint": {
    "value": "Limbo Magrite Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/limboaristeashelmetblueprint": {
    "value": "Limbo Aristeas Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/lokienigmahelmetblueprint": {
    "value": "Loki Enigma Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/mesaaltbhelmetblueprint": {
    "value": "Mesa Ovis Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/miragealtbhelmetblueprint": {
    "value": "Mirage Trivelin Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/monkeykingaltbhelmetblueprint": {
    "value": "Wukong Macak Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/nekrosaraknidhelmetblueprint": {
    "value": "Nekros Raknis Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/nekrosshroudhelmetblueprint": {
    "value": "Nekros Shroud Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/nezhaalt2helmetblueprint": {
    "value": "Nezha Jinza Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/nezhaalthelmetblueprint": {
    "value": "Nezha Circa Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/nidusalthelmetblueprint": {
    "value": "Nidus Prion Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/nidusalttwohelmetblueprint": {
    "value": "Nidus Myxini Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/novaquantumhelmetblueprint": {
    "value": "Nova Quantum Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/novaslipstreamhelmetblueprint": {
    "value": "Nova Slipstream Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/oberonaltbhelmetblueprint": {
    "value": "Oberon Markhor Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/oberonalthelmetblueprint": {
    "value": "Oberon Oryx Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/pacifistalthelmetblueprint": {
    "value": "Baruuk Meroe Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/piratealtbhelmetblueprint": {
    "value": "Hydroid Ketos Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/piratealthelmetblueprint": {
    "value": "Hydroid Triton Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/priestalthelmetblueprint": {
    "value": "Harrow Suffragan Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/rangeraltbhelmetblueprint": {
    "value": "Ivara Zirastra Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/rangeralthelmetblueprint": {
    "value": "Ivara Loxley Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/revenantalthelmetblueprint": {
    "value": "Revenant Vania Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/sandmanaltbhelmetblueprint": {
    "value": "Inaros Canopic Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/sandmanalthelmetblueprint": {
    "value": "Inaros Anubis Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessashalthelmetblueprint": {
    "value": "Ash Scorpion Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessbansheealthelmetblueprint": {
    "value": "Banshee Reverb Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessemberalthelmetblueprint": {
    "value": "Ember Phoenix Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessexcaliburalthelmetblueprint": {
    "value": "Excalibur Avalon Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessfrostalthelmetblueprint": {
    "value": "Frost Aurora Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlesslokialthelmetblueprint": {
    "value": "Loki Essence Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessmagalthelmetblueprint": {
    "value": "Mag Coil Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessnovaalthelmetblueprint": {
    "value": "Nova Flux Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessnyxalthelmetblueprint": {
    "value": "Nyx Menticide Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessrhinoalthelmetblueprint": {
    "value": "Rhino Thrak Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlesssarynalthelmetblueprint": {
    "value": "Saryn Hemlock Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlesstrinityalthelmetblueprint": {
    "value": "Trinity Aura Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2ashalthelmetblueprint": {
    "value": "Ash Locust Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2bansheealthelmetblueprint": {
    "value": "Banshee Chorus Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2emberalthelmetblueprint": {
    "value": "Ember Backdraft Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2excaliburalthelmetblueprint": {
    "value": "Excalibur Pendragon Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2frostalthelmetblueprint": {
    "value": "Frost Squall Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2lokialthelmetblueprint": {
    "value": "Loki Swindle Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2magalthelmetblueprint": {
    "value": "Mag Gauss Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2nyxalthelmetblueprint": {
    "value": "Nyx Vespa Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2rhinoalthelmetblueprint": {
    "value": "Rhino Vanguard Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2sarynalthelmetblueprint": {
    "value": "Saryn Chlora Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2trinityalthelmetblueprint": {
    "value": "Trinity Meridian Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2vaubanalthelmetblueprint": {
    "value": "Vauban Gambit Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessv2voltalthelmetblueprint": {
    "value": "Volt Pulse Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessvaubanalthelmetblueprint": {
    "value": "Vauban Esprit Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/statlessvoltalthelmetblueprint": {
    "value": "Volt Storm Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/v2animaalthelmetblueprint": {
    "value": "Equinox Clisthert Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/valkyraltbhelmetblueprint": {
    "value": "Valkyr Kara Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/valkyrbastethelmetblueprint": {
    "value": "Valkyr Bastet Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/vaubanhelmetsoldierblueprint": {
    "value": "Vauban Armistice Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/wukongalthelmetblueprint": {
    "value": "Wukong Dasheng Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/zephyrcierzohelmetblueprint": {
    "value": "Zephyr Cierzo Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/helmets/zephyrtenguhelmetblueprint": {
    "value": "Zephyr Tengu Helmet Blueprint"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/ashchassiscomponent": {
    "value": "Ash Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/ashhelmetcomponent": {
    "value": "Ash Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/ashprimechassiscomponent": {
    "value": "Ash Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/ashprimehelmetcomponent": {
    "value": "Ash Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/ashprimesystemscomponent": {
    "value": "Ash Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/ashsystemscomponent": {
    "value": "Ash Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/bansheechassiscomponent": {
    "value": "Banshee Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/bansheehelmetcomponent": {
    "value": "Banshee Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/bansheesystemscomponent": {
    "value": "Banshee Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/berserkerchassiscomponent": {
    "value": "Valkyr Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/berserkerhelmetcomponent": {
    "value": "Valkyr Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/berserkersystemscomponent": {
    "value": "Valkyr Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/chromachassiscomponent": {
    "value": "Chroma Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/chromahelmetcomponent": {
    "value": "Chroma Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/chromasystemscomponent": {
    "value": "Chroma Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/emberchassiscomponent": {
    "value": "Ember Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/emberhelmetcomponent": {
    "value": "Ember Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/emberprimechassiscomponent": {
    "value": "Ember Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/emberprimehelmetcomponent": {
    "value": "Ember Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/emberprimesystemscomponent": {
    "value": "Ember Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/embersystemscomponent": {
    "value": "Ember Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/excaliburchassiscomponent": {
    "value": "Excalibur Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/excaliburhelmetcomponent": {
    "value": "Excalibur Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/excalibursystemscomponent": {
    "value": "Excalibur Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/frostchassiscomponent": {
    "value": "Frost Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/frosthelmetcomponent": {
    "value": "Frost Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/frostprimechassiscomponent": {
    "value": "Frost Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/frostprimehelmetcomponent": {
    "value": "Frost Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/frostprimesystemscomponent": {
    "value": "Frost Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/frostsystemscomponent": {
    "value": "Frost Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/gunslingerchassiscomponent": {
    "value": "Mesa Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/gunslingerhelmetcomponent": {
    "value": "Mesa Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/gunslingersystemscomponent": {
    "value": "Mesa Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/harlequinchassiscomponent": {
    "value": "Mirage Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/harlequinhelmetcomponent": {
    "value": "Mirage Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/harlequinsystemscomponent": {
    "value": "Mirage Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/hydroidchassiscomponent": {
    "value": "Hydroid Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/hydroidhelmetcomponent": {
    "value": "Hydroid Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/hydroidsystemscomponent": {
    "value": "Hydroid Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/lokichassiscomponent": {
    "value": "Loki Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/lokihelmetcomponent": {
    "value": "Loki Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/lokiprimechassiscomponent": {
    "value": "Loki Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/lokiprimehelmetcomponent": {
    "value": "Loki Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/lokiprimesystemscomponent": {
    "value": "Loki Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/lokisystemscomponent": {
    "value": "Loki Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magchassiscomponent": {
    "value": "Mag Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/maghelmetcomponent": {
    "value": "Mag Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magicianchassiscomponent": {
    "value": "Limbo Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magicianhelmetcomponent": {
    "value": "Limbo Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magiciansystemscomponent": {
    "value": "Limbo Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magprimechassiscomponent": {
    "value": "Mag Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magprimehelmetcomponent": {
    "value": "Mag Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magprimesystemscomponent": {
    "value": "Mag Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/magsystemscomponent": {
    "value": "Mag Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/necrochassiscomponent": {
    "value": "Nekros Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/necrohelmetcomponent": {
    "value": "Nekros Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/necrosystemscomponent": {
    "value": "Nekros Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/novachassiscomponent": {
    "value": "Nova Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/novahelmetcomponent": {
    "value": "Nova Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/novaprimechassiscomponent": {
    "value": "Nova Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/novaprimehelmetcomponent": {
    "value": "Nova Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/novaprimesystemscomponent": {
    "value": "Nova Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/novasystemscomponent": {
    "value": "Nova Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/nyxchassiscomponent": {
    "value": "Nyx Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/nyxhelmetcomponent": {
    "value": "Nyx Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/nyxprimechassiscomponent": {
    "value": "Nyx Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/nyxprimehelmetcomponent": {
    "value": "Nyx Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/nyxprimesystemscomponent": {
    "value": "Nyx Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/nyxsystemscomponent": {
    "value": "Nyx Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/paladinchassiscomponent": {
    "value": "Oberon Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/paladinhelmetcomponent": {
    "value": "Oberon Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/paladinsystemscomponent": {
    "value": "Oberon Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/rhinochassiscomponent": {
    "value": "Rhino Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/rhinohelmetcomponent": {
    "value": "Rhino Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/rhinoprimechassiscomponent": {
    "value": "Rhino Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/rhinoprimehelmetcomponent": {
    "value": "Rhino Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/rhinoprimesystemscomponent": {
    "value": "Rhino Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/rhinosystemscomponent": {
    "value": "Rhino Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/sarynchassiscomponent": {
    "value": "Saryn Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/sarynhelmetcomponent": {
    "value": "Saryn Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/sarynsystemscomponent": {
    "value": "Saryn Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/tenguchassiscomponent": {
    "value": "Zephyr Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/tenguhelmetcomponent": {
    "value": "Zephyr Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/tengusystemscomponent": {
    "value": "Zephyr Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trapperchassisblueprint": {
    "value": "Vauban Chassis Blueprint"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trapperchassiscomponent": {
    "value": "Vauban Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trapperhelmetblueprint": {
    "value": "Vauban Neuroptics Blueprint"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trapperhelmetcomponent": {
    "value": "Vauban Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trappersystemsblueprint": {
    "value": "Vauban Systems Blueprint"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trappersystemscomponent": {
    "value": "Vauban Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trinitychassiscomponent": {
    "value": "Trinity Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trinityhelmetcomponent": {
    "value": "Trinity Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/trinitysystemscomponent": {
    "value": "Trinity Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/voltchassiscomponent": {
    "value": "Volt Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/volthelmetcomponent": {
    "value": "Volt Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/voltprimechassiscomponent": {
    "value": "Volt Prime Chassis"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/voltprimehelmetcomponent": {
    "value": "Volt Prime Neuroptics"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/voltprimesystemscomponent": {
    "value": "Volt Prime Systems"
  },
  "/lotus/storeitems/types/recipes/warframerecipes/voltsystemscomponent": {
    "value": "Volt Systems"
  },
  "/lotus/storeitems/types/recipes/weapons/ceramicdaggerblueprint": {
    "value": "Ceramic Dagger Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/darkdaggerblueprint": {
    "value": "Dark Dagger Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/glaiveblueprint": {
    "value": "Glaive Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/heatdaggerblueprint": {
    "value": "Heat Dagger Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/heatswordblueprint": {
    "value": "Heat Sword Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/jawblueprint": {
    "value": "Jaw Sword Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/pangolinswordblueprint": {
    "value": "Pangolin Sword Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/plasmaswordblueprint": {
    "value": "Plasma Sword Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/skins/daggeraxeblueprint": {
    "value": "Dagger Axe Scindo Skin"
  },
  "/lotus/storeitems/types/recipes/weapons/skins/dualdaggeraxeblueprint": {
    "value": "Dagger Zoren Skin Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/skins/grnaxeblueprint": {
    "value": "Scindo Manticore Axe Skin Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/skins/grnhammerblueprint": {
    "value": "Brokk Hammer Skin Blueprint"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/akbroncoprimelink": {
    "value": "Akbronco Prime Link"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/ankyrosprimeblade": {
    "value": "Ankyros Prime Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/ankyrosprimegauntlet": {
    "value": "Ankyros Prime Gauntlet"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archaxeblade": {
    "value": "Onorix Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archaxehandle": {
    "value": "Onorix Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archcannonbarrel": {
    "value": "Corvas Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archcannonreceiver": {
    "value": "Corvas Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archcannonstock": {
    "value": "Corvas Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archhammerhandle": {
    "value": "Rathbone Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archhammerhead": {
    "value": "Rathbone Head"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archheavypistolsbarrel": {
    "value": "Decurion Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archheavypistolsreceiver": {
    "value": "Decurion Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archrailgunbarrel": {
    "value": "Velocitus Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archrailgunreceiver": {
    "value": "Velocitus Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archrailgunstock": {
    "value": "Velocitus Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archrocketcrossbowbarrel": {
    "value": "Fluctus Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archrocketcrossbowreceiver": {
    "value": "Fluctus Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archrocketcrossbowstock": {
    "value": "Fluctus Limbs"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archswordshieldaegis": {
    "value": "Centaur Aegis"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/archswordshieldblade": {
    "value": "Centaur Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/boarprimebarrel": {
    "value": "Boar Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/boarprimereceiver": {
    "value": "Boar Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/boarprimestock": {
    "value": "Boar Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/boltorprimebarrel": {
    "value": "Boltor Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/boltorprimereceiver": {
    "value": "Boltor Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/boltorprimestock": {
    "value": "Boltor Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/brakkbarrel": {
    "value": "Brakk Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/brakkreceiver": {
    "value": "Brakk Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/bratonprimebarrel": {
    "value": "Braton Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/bratonprimereceiver": {
    "value": "Braton Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/bratonprimestock": {
    "value": "Braton Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/broncoprimebarrel": {
    "value": "Bronco Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/broncoprimereceiver": {
    "value": "Bronco Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/burstonprimebarrel": {
    "value": "Burston Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/burstonprimereceiver": {
    "value": "Burston Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/burstonprimestock": {
    "value": "Burston Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/detronbarrel": {
    "value": "Detron Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/detronreceiver": {
    "value": "Detron Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/glaiveprimeblade": {
    "value": "Glaive Prime Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/glaiveprimedisc": {
    "value": "Glaive Prime Disc"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/latronprimebarrel": {
    "value": "Latron Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/latronprimereceiver": {
    "value": "Latron Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/latronprimestock": {
    "value": "Latron Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/lexprimebarrel": {
    "value": "Lex Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/lexprimereceiver": {
    "value": "Lex Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/miterbarrel": {
    "value": "Miter Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/miterblade": {
    "value": "Miter Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/miterchassis": {
    "value": "Miter Chassis"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/miterhandle": {
    "value": "Miter Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primebohandle": {
    "value": "Bo Prime Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primeboornament": {
    "value": "Bo Prime Ornament"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primebowgrip": {
    "value": "Paris Prime Grip"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primebowlowerlimb": {
    "value": "Paris Prime Lower Limb"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primebowstring": {
    "value": "Paris Prime String"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primebowupperlimb": {
    "value": "Paris Prime Upper Limb"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primecarriercarapace": {
    "value": "Carrier Prime Carapace"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primecarriercerebrum": {
    "value": "Carrier Prime Cerebrum"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primecarriersystems": {
    "value": "Carrier Prime Systems"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primecronuslongswordblade": {
    "value": "Dakra Prime Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primecronuslongswordhandle": {
    "value": "Dakra Prime Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primefangblade": {
    "value": "Fang Prime Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primefanghandle": {
    "value": "Fang Prime Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primehikouholster": {
    "value": "Hikou Prime Pouch"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primehikoustars": {
    "value": "Hikou Prime Stars"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primepolearmblade": {
    "value": "Orthos Prime Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primepolearmhandle": {
    "value": "Orthos Prime Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primescindoblade": {
    "value": "Scindo Prime Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primescindohandle": {
    "value": "Scindo Prime Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primescytheblade": {
    "value": "Reaper Blade"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primescythehandle": {
    "value": "Reaper Handle"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primewyrmcarapace": {
    "value": "Wyrm Prime Carapace"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primewyrmcerebrum": {
    "value": "Wyrm Prime Cerebrum"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/primewyrmsystems": {
    "value": "Wyrm Prime Systems"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/sicarusprimebarrel": {
    "value": "Sicarus Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/sicarusprimereceiver": {
    "value": "Sicarus Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/somaprimebarrel": {
    "value": "Soma Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/somaprimereceiver": {
    "value": "Soma Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/somaprimestock": {
    "value": "Soma Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vastoprimebarrel": {
    "value": "Vasto Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vastoprimereceiver": {
    "value": "Vasto Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vectisprimebarrel": {
    "value": "Vectis Prime Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vectisprimereceiver": {
    "value": "Vectis Prime Receiver"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vectisprimestock": {
    "value": "Vectis Prime Stock"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vorspistolbarrel": {
    "value": "Seer Pistol Barrel"
  },
  "/lotus/storeitems/types/recipes/weapons/weaponparts/vorspistolreceiver": {
    "value": "Seer Pistol Receiver"
  },
  "/lotus/storeitems/types/restoratives/cipher": {
    "value": "Cipher"
  },
  "/lotus/storeitems/types/restoratives/clanteamammototem": {
    "value": "Medium Team Ammo Restore"
  },
  "/lotus/storeitems/types/restoratives/clanteamenergytotem": {
    "value": "Medium Team Energy Restore"
  },
  "/lotus/storeitems/types/restoratives/clanteamhealtotem": {
    "value": "Medium Team Health Restore"
  },
  "/lotus/storeitems/types/restoratives/clanteamshieldtotem": {
    "value": "Medium Team Shield Restore"
  },
  "/lotus/storeitems/types/restoratives/consumable/alphacorruptor": {
    "value": "Alpha Corruptor"
  },
  "/lotus/storeitems/types/restoratives/consumable/ancienthealerball": {
    "value": "Ancient Healer Specter"
  },
  "/Lotus/StoreItems/Types/Restoratives/Consumable/AssassinBait": {
    "value": "Stalker Beacon"
  },
  "/Lotus/StoreItems/Types/Restoratives/Consumable/AssassinBaitB": {
    "value": "Zanuka Hunter Beacon"
  },
  "/Lotus/StoreItems/Types/Restoratives/Consumable/AssassinBaitC": {
    "value": "Grustrag Three Beacon"
  },
  "/lotus/storeitems/types/restoratives/consumable/barofireworkscrate": {
    "value": "10x Ki'teer Fireworks"
  },
  "/lotus/storeitems/types/restoratives/consumable/betacorruptor": {
    "value": "Beta Corruptor"
  },
  "/lotus/storeitems/types/restoratives/consumable/bronzespectre": {
    "value": "Vapor Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/chargerball": {
    "value": "Charger Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/corruptedheavygunnerball": {
    "value": "5x Corrupted Heavy Gunner Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/corruptedlancerball": {
    "value": "Corrupted Lancer Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/creditchiplarge": {
    "value": "Passionate Void Offering"
  },
  "/lotus/storeitems/types/restoratives/consumable/creditchipmedium": {
    "value": "Faithful Void Offering"
  },
  "/lotus/storeitems/types/restoratives/consumable/creditchipsmall": {
    "value": "Humble Void Offering"
  },
  "/lotus/storeitems/types/restoratives/consumable/fireworkscrate": {
    "value": "Grand Finale"
  },
  "/lotus/storeitems/types/restoratives/consumable/fireworkssingle": {
    "value": "Starburst"
  },
  "/lotus/storeitems/types/restoratives/consumable/fomoriannegator": {
    "value": "Fomorian Disruptor"
  },
  "/lotus/storeitems/types/restoratives/consumable/fomoriannegatorbeta": {
    "value": "[Placeholder] Fomorian Negator Beta"
  },
  "/lotus/storeitems/types/restoratives/consumable/goldspectre": {
    "value": "Force Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/huntertool": {
    "value": "Kinetic Siphon Trap"
  },
  "/lotus/storeitems/types/restoratives/consumable/infestedbaitball": {
    "value": "Pherliac Pods"
  },
  "/lotus/storeitems/types/restoratives/consumable/libraryscanner": {
    "value": "Synthesis Scanner"
  },
  "/lotus/storeitems/types/restoratives/consumable/machetewomanball": {
    "value": "Scorpion Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/moaball": {
    "value": "Moa Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/platinumspectre": {
    "value": "Cosmic Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/prismaarrowbundle": {
    "value": "Prisma Arrows"
  },
  "/lotus/storeitems/types/restoratives/consumable/rollerball": {
    "value": "Roller Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/scanner": {
    "value": "Codex Scanner"
  },
  "/lotus/storeitems/types/restoratives/consumable/shielddroneball": {
    "value": "Shield Osprey Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/silverspectre": {
    "value": "Phase Specter"
  },
  "/lotus/storeitems/types/restoratives/consumable/stablecorruptor": {
    "value": "Stable Corruptor"
  },
  "/lotus/storeitems/types/restoratives/consumable/toxins/daycommonantitoxin": {
    "value": "Beryl Antitoxin"
  },
  "/lotus/storeitems/types/restoratives/consumable/toxins/dayuncommonantitoxin": {
    "value": "Citrine Antitoxin"
  },
  "/lotus/storeitems/types/restoratives/consumable/toxins/nightcommonantitoxin": {
    "value": "Amethyst Antitoxin"
  },
  "/lotus/storeitems/types/restoratives/consumable/toxins/nightuncommonantitoxin": {
    "value": "Topaz Antitoxin"
  },
  "/lotus/storeitems/types/restoratives/consumable/toxins/rareantitoxin": {
    "value": "Lapis Antitoxin"
  },
  "/lotus/storeitems/types/restoratives/consumable/toxins/solorareantitoxin": {
    "value": "Vermillion Antitoxin"
  },
  "/lotus/storeitems/types/restoratives/consumable/valentinesarrowbundle": {
    "value": "Eros Arrow Skin"
  },
  "/lotus/storeitems/types/restoratives/selfheallarge": {
    "value": "Health Restore"
  },
  "/lotus/storeitems/types/restoratives/selfhealsmall": {
    "value": "Small Health Restore"
  },
  "/lotus/storeitems/types/restoratives/selfomniammo": {
    "value": "Omni Ammo Box"
  },
  "/lotus/storeitems/types/restoratives/selfpistolammo": {
    "value": "Pistol Ammo Box"
  },
  "/lotus/storeitems/types/restoratives/selfrespawn": {
    "value": "Revive Unit Refill"
  },
  "/lotus/storeitems/types/restoratives/selfrevive": {
    "value": "Revive"
  },
  "/lotus/storeitems/types/restoratives/selfrifleammo": {
    "value": "Rifle Ammo Box"
  },
  "/lotus/storeitems/types/restoratives/selfshieldheal": {
    "value": "Shield Restore"
  },
  "/lotus/storeitems/types/restoratives/selfshotgunammo": {
    "value": "Shotgun Ammo Box"
  },
  "/lotus/storeitems/types/restoratives/selfsniperammo": {
    "value": "Sniper Ammo Box"
  },
  "/lotus/storeitems/types/restoratives/syndicateteamammototem": {
    "value": "Large Team Ammo Restore"
  },
  "/lotus/storeitems/types/restoratives/syndicateteamenergytotem": {
    "value": "Large Team Energy Restore"
  },
  "/lotus/storeitems/types/restoratives/syndicateteamhealtotem": {
    "value": "Large Team Health Restore"
  },
  "/lotus/storeitems/types/restoratives/syndicateteamshieldtotem": {
    "value": "Large Team Shield Restore"
  },
  "/lotus/storeitems/types/restoratives/teamammototem": {
    "value": "Team Ammo Restore"
  },
  "/lotus/storeitems/types/restoratives/teamenergytotem": {
    "value": "Team Energy Restore"
  },
  "/lotus/storeitems/types/restoratives/teamheal": {
    "value": "Team Health Restore"
  },
  "/lotus/storeitems/types/restoratives/teamhealtotem": {
    "value": "Team Health Restore"
  },
  "/lotus/storeitems/types/restoratives/teamshieldtotem": {
    "value": "Team Shield Restore"
  },
  "/lotus/storeitems/types/restoratives/upgraded/damagedebuffkey": {
    "value": "Extinguished Dragon Key"
  },
  "/lotus/storeitems/types/restoratives/upgraded/healthdebuffkey": {
    "value": "Bleeding Dragon Key"
  },
  "/lotus/storeitems/types/restoratives/upgraded/shielddebuffkey": {
    "value": "Decaying Dragon Key"
  },
  "/lotus/storeitems/types/restoratives/upgraded/speeddebuffkey": {
    "value": "Hobbled Dragon Key"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/carrierpowersuit": {
    "value": "Carrier"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/dethcubepowersuit": {
    "value": "Dethcube"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/gubberpowersuit": {
    "value": "Djinn"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/meleepetpowersuit": {
    "value": "Helios"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/primecarrierpowersuit": {
    "value": "Carrier Prime"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/primewyrmpowersuit": {
    "value": "Wyrm Prime"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/prismashadepowersuit": {
    "value": "Prisma Shade"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/shadepowersuit": {
    "value": "Shade"
  },
  "/lotus/storeitems/types/sentinels/sentinelpowersuits/wyrmpowersuit": {
    "value": "Wyrm"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/bait": {
    "value": "Fatal Attraction"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/boomstick": {
    "value": "Striker"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/codexscannerprecept": {
    "value": "Investigator"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/coolantleak": {
    "value": "Coolant Leak"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/crowddispersion": {
    "value": "Crowd Dispersion"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/ghost": {
    "value": "Ghost"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/guardian": {
    "value": "Guardian"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/itemvacum": {
    "value": "Vacuum"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/looter": {
    "value": "Looter"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/primedregen": {
    "value": "Primed Regen"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/regen": {
    "value": "Regen"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/revenge": {
    "value": "Revenge"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/reviveplayer": {
    "value": "Sacrifice"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/sanctuary": {
    "value": "Sanctuary"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/swiftdeth": {
    "value": "Swift Deth"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/throwglaiveprecept": {
    "value": "Targeting Receptor"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/thumper": {
    "value": "Thumper"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/vaporize": {
    "value": "Vaporize"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/warrior": {
    "value": "Warrior"
  },
  "/lotus/storeitems/types/sentinels/sentinelprecepts/weaknessscanprecept": {
    "value": "Detect Vulnerability"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/burstlaserpistol": {
    "value": "Burst Laser"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/dethmachinerifle": {
    "value": "Deth Machine Rifle"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/laserrifle": {
    "value": "Laser Rifle"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/primelaserrifle": {
    "value": "Prime Laser Rifle"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/primesentshotgun": {
    "value": "Sweeper Prime"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/sentbioweapon": {
    "value": "Stinger"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/sentglaiveweapon": {
    "value": "Deconstructor"
  },
  "/lotus/storeitems/types/sentinels/sentinelweapons/sentshotgun": {
    "value": "Sweeper"
  },
  "/lotus/storeitems/types/ship/advancedresourcedrone": {
    "value": "Titan Extractor Prime"
  },
  "/lotus/storeitems/types/ship/advanceducresourcedrone": {
    "value": "Distilling Extractor Prime"
  },
  "/lotus/storeitems/types/ship/basicresourcedrone": {
    "value": "Titan Extractor"
  },
  "/lotus/storeitems/types/ship/basicucresourcedrone": {
    "value": "Distilling Extractor"
  },
  "/lotus/storeitems/types/ship/voidtraderresourcedrone": {
    "value": "Prisma Niroda Extractor"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimagebaroicon": {
    "value": "Ki'teer Tribute Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimagebarotwoicon": {
    "value": "Prisma Lotus Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem1": {
    "value": "Excalibur Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem2": {
    "value": "Volt Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem3": {
    "value": "Trinity Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem4": {
    "value": "Rhino Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem5": {
    "value": "Mag Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem6": {
    "value": "Ash Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem7": {
    "value": "Ember Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitem8": {
    "value": "Loki Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageitemfrostprime": {
    "value": "Loki Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimagelowpolykavat": {
    "value": "Prisma Kavat Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimagelowpolykubrow": {
    "value": "Prisma Kubrow Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimageproteaaction": {
    "value": "Protea In Action Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/avatarimagexakuaction": {
    "value": "Xaku In Action Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/chinesenewyear2021glyph": {
    "value": "Feasting Hamster Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashbright": {
    "value": "Ash Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashdark": {
    "value": "Ash Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashlocustbright": {
    "value": "Ash Locust Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashlocustdark": {
    "value": "Ash Locust Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashprimebright": {
    "value": "Ash Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashprimedark": {
    "value": "Ash Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashscorpionbright": {
    "value": "Ash Scorpion Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageashscorpiondark": {
    "value": "Ash Scorpion Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagebansheebright": {
    "value": "Banshee Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagebansheechorusbright": {
    "value": "Banshee Chorus Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagebansheechorusdark": {
    "value": "Banshee Chorus Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagebansheedark": {
    "value": "Banshee Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagebansheereverbbright": {
    "value": "Banshee Reverb Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagebansheereverbdark": {
    "value": "Banshee Reverb Profile Icon"
  },
  "/Lotus/StoreItems/Types/StoreItems/AvatarImages/ImageBaroKiteer": {
    "value": "Baro Ki'teer Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagechromaamarubright": {
    "value": "Chroma Amaru Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagechromaamarudark": {
    "value": "Chroma Amaru Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagechromabright": {
    "value": "Chroma Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagechromadark": {
    "value": "Chroma Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagechromadracbright": {
    "value": "Chroma Drac Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagechromadracdark": {
    "value": "Chroma Drac Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberbackdraftbright": {
    "value": "Ember Backdraft Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberbackdraftdark": {
    "value": "Ember Backdraft Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberbright": {
    "value": "Ember Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberdark": {
    "value": "Ember Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberpheonixbright": {
    "value": "Phoenix Ember Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberpheonixdark": {
    "value": "Phoenix Ember Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberprimebright": {
    "value": "Ember Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageemberprimedark": {
    "value": "Ember Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburavalonbright": {
    "value": "Excalibur Avalon Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburavalondark": {
    "value": "Excalibur Avalon Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburbright": {
    "value": "Excalibur Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburdark": {
    "value": "Excalibur Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburmordredbright": {
    "value": "Excalibur Mordred Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburmordreddark": {
    "value": "Excalibur Mordred Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburpendragonbright": {
    "value": "Excalibur Pendragon Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburpendragondark": {
    "value": "Excalibur Pendragon Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburprimebright": {
    "value": "Excalibur Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburprimedark": {
    "value": "Excalibur Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageexcaliburproto": {
    "value": "Excalibur Proto-suit Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostaurorabright": {
    "value": "Frost Aurora Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostauroradark": {
    "value": "Frost Aurora Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostbright": {
    "value": "Frost Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostdark": {
    "value": "Frost Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostprimebright": {
    "value": "Frost Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostprimedark": {
    "value": "Frost Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostsquallbright": {
    "value": "Frost Squall Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagefrostsqualldark": {
    "value": "Frost Squall Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegaussved": {
    "value": "Gauss In Action Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegraeaelimbobright": {
    "value": "Limbo Magrite Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegraeaelimbodark": {
    "value": "Limbo Magrite Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrendelved": {
    "value": "Grendel In Action Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrineerballista": {
    "value": "Grineer Ballista Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrineercaptainvor": {
    "value": "Captain Vor Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrineerkeladethaym": {
    "value": "Kela De Thaym Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrineerlancer": {
    "value": "Grineer Lancer Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrineerroller": {
    "value": "Grineer Roller Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegrineersargusruk": {
    "value": "Sargas Ruk Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegunslingeraltbright": {
    "value": "Mesa Longhorn Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegunslingeraltdark": {
    "value": "Mesa Longhorn Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegunslingerbright": {
    "value": "Mesa Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagegunslingerdark": {
    "value": "Mesa Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelimboaristeasbright": {
    "value": "Limbo Aristeas Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelimboaristeasdark": {
    "value": "Limbo Aristeas Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelimbobright": {
    "value": "Limbo Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelimbodark": {
    "value": "Limbo Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokibright": {
    "value": "Loki Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokidark": {
    "value": "Loki Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokienigmabright": {
    "value": "Loki Enigma Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokienigmadark": {
    "value": "Loki Enigma Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokiessencebright": {
    "value": "Loki Essence Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokiessencedark": {
    "value": "Loki Essence Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokiprimebright": {
    "value": "Loki Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokiprimedark": {
    "value": "Loki Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokiswindlebright": {
    "value": "Loki Swindle Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagelokiswindledark": {
    "value": "Loki Swindle Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemagbright": {
    "value": "Mag Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemagcoilbright": {
    "value": "Mag Coil Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemagcoildark": {
    "value": "Mag Coil Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemagdark": {
    "value": "Mag Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemaggaussbright": {
    "value": "Mag Gauss Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemaggaussdark": {
    "value": "Mag Gauss Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemagprimebright": {
    "value": "Mag Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemagprimedark": {
    "value": "Mag Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemesacortesbright": {
    "value": "Mesa Ovis Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemesacortesdark": {
    "value": "Mesa Ovis Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemiragebright": {
    "value": "Mirage Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemiragedark": {
    "value": "Mirage Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemirageharlequinbright": {
    "value": "Mirage Harlequin Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagemirageharlequindark": {
    "value": "Mirage Harlequin Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenekrosaraknidbright": {
    "value": "Nekros Raknis Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenekrosarakniddark": {
    "value": "Nekros Raknis Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenekrosbright": {
    "value": "Nekros Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenekrosdark": {
    "value": "Nekros Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenekrosshroudbright": {
    "value": "Nekros Shroud Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenekrosshrouddark": {
    "value": "Nekros Shroud Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaaltbright": {
    "value": "Nova Flux Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaaltdark": {
    "value": "Nova Flux Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovabright": {
    "value": "Nova Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovadark": {
    "value": "Nova Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaprimebright": {
    "value": "Nova Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaprimedark": {
    "value": "Nova Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaquantumbright": {
    "value": "Nova Quantum Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaquantumdark": {
    "value": "Nova Quantum Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaslipstreambright": {
    "value": "Nova Slipstream Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenovaslipstreamdark": {
    "value": "Nova Slipstream Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxbright": {
    "value": "Nyx Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxdark": {
    "value": "Nyx Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxmenticidebright": {
    "value": "Nyx Menticide Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxmenticidedark": {
    "value": "Nyx Menticide Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxprimebright": {
    "value": "Nyx Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxprimedark": {
    "value": "Nyx Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxvespabright": {
    "value": "Nyx Vespa Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagenyxvespadark": {
    "value": "Nyx Vespa Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageoberonaltbright": {
    "value": "Oberon Oryx Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageoberonaltdark": {
    "value": "Oberon Oryx Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageoberonbright": {
    "value": "Oberon Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageoberondark": {
    "value": "Oberon Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageoberonmarkhorbright": {
    "value": "Oberon Markhor Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imageoberonmarkhordark": {
    "value": "Oberon Markhor Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepiratebright": {
    "value": "Hydroid Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepiratedark": {
    "value": "Hydroid Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepirateketosbright": {
    "value": "Hydroid Ketos Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepirateketosdark": {
    "value": "Hydroid Ketos Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepiratetritonbright": {
    "value": "Hydroid Triton Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepiratetritondark": {
    "value": "Hydroid Triton Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagepopsiclegrineerpurple": {
    "value": "Dog Days Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinobright": {
    "value": "Rhino Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinodark": {
    "value": "Rhino Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinoprimebright": {
    "value": "Rhino Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinoprimedark": {
    "value": "Rhino Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinothrakbright": {
    "value": "Rhino Thrak Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinothrakdark": {
    "value": "Rhino Thrak Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinovanguardbright": {
    "value": "Rhino Vanguard Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagerhinovanguarddark": {
    "value": "Rhino Vanguard Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesarynbright": {
    "value": "Saryn Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesarynchlorabright": {
    "value": "Saryn Chlora Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesarynchloradark": {
    "value": "Saryn Chlora Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesaryndark": {
    "value": "Saryn Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesarynhemlockbright": {
    "value": "Saryn Hemlock Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesarynhemlockdark": {
    "value": "Saryn Hemlock Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesyndicateah": {
    "value": "Arbiters Of Hexis Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesyndicatecs": {
    "value": "Cephalon Suda Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesyndicatenl": {
    "value": "New Loka Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesyndicateps": {
    "value": "Perrin Sequence Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesyndicaterv": {
    "value": "Red Veil Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagesyndicatesm": {
    "value": "Steel Meridian Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrapperaltbright": {
    "value": "Vauban Esprit Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrapperaltdark": {
    "value": "Vauban Esprit Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrapperbright": {
    "value": "Vauban Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrapperdark": {
    "value": "Vauban Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrappergambitbright": {
    "value": "Vauban Gambit Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrappergambitdark": {
    "value": "Vauban Gambit Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrappersoldierbright": {
    "value": "Vauban Armistice Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrappersoldierdark": {
    "value": "Vauban Armistice Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetravelinmiragebright": {
    "value": "Mirage Trivelin Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetravelinmiragedark": {
    "value": "Mirage Trivelin Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrinityaurabright": {
    "value": "Trinity Aura Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrinityauradark": {
    "value": "Trinity Aura Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrinitybright": {
    "value": "Trinity Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrinitydark": {
    "value": "Trinity Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrinitymeridianbright": {
    "value": "Trinity Meridian Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagetrinitymeridiandark": {
    "value": "Trinity Meridian Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevalkyrbastetbright": {
    "value": "Valkyr Bastet Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevalkyrbastetdark": {
    "value": "Valkyr Bastet Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevalkyrbright": {
    "value": "Valkyr Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevalkyrdark": {
    "value": "Valkyr Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevalkyrkarabright": {
    "value": "Valkyr Kara Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevalkyrkaradark": {
    "value": "Valkyr Kara Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltbright": {
    "value": "Volt Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltdark": {
    "value": "Volt Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltprimebright": {
    "value": "Volt Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltprimedark": {
    "value": "Volt Prime Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltpulsebright": {
    "value": "Volt Pulse Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltpulsedark": {
    "value": "Volt Pulse Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltstormbright": {
    "value": "Volt Storm Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagevoltstormdark": {
    "value": "Volt Storm Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagezephyrbright": {
    "value": "Zephyr Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagezephyrcierzobright": {
    "value": "Zephyr Cierzo Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagezephyrcierzodark": {
    "value": "Zephyr Cierzo Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagezephyrdark": {
    "value": "Zephyr Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagezephyrtengubright": {
    "value": "Zephyr Tengu Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/imagezephyrtengudark": {
    "value": "Zephyr Tengu Profile Icon"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/seasonal/avatarimageglyphcookiekavat": {
    "value": "Cookie Kavat Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/seasonal/avatarimageglyphcookiekubrow": {
    "value": "Cookie Kubrow Glyph"
  },
  "/lotus/storeitems/types/storeitems/avatarimages/seasonal/halloween2019grendeltreat": {
    "value": "In Mah Belly Glyph"
  },
  "/lotus/storeitems/types/storeitems/consumables/restoratives/creditchiplargeblueprint": {
    "value": "Passionate Void Offering"
  },
  "/lotus/storeitems/types/storeitems/consumables/restoratives/creditchipmediumblueprint": {
    "value": "Faithful Void Offering"
  },
  "/lotus/storeitems/types/storeitems/creditbundles/creditbundlea": {
    "value": "Frugal Credit Bundle"
  },
  "/lotus/storeitems/types/storeitems/creditbundles/creditbundleb": {
    "value": "Prodigal Credit Bundle"
  },
  "/lotus/storeitems/types/storeitems/creditbundles/creditbundlec": {
    "value": "High Roller Credit Bundle"
  },
  "/lotus/storeitems/types/storeitems/slotitems/kubrowslotitem": {
    "value": "Stasis Slot"
  },
  "/lotus/storeitems/types/storeitems/slotitems/suitslotitem": {
    "value": "Warframe Slot"
  },
  "/lotus/storeitems/types/storeitems/slotitems/weaponslotitem": {
    "value": "Weapon Slot"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerbastilleitem": {
    "value": "Bastille"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerdaybreakitema": {
    "value": "Daybreak"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerdefaultsitema": {
    "value": "Tenno"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickereasteritema": {
    "value": "Easter"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickereximus": {
    "value": "Eximus"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerfireitema": {
    "value": "Fire"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickergammaitema": {
    "value": "Gamma"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickergrineeritema": {
    "value": "Grineer"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerhalloweenitema": {
    "value": "Halloween"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickericeitema": {
    "value": "Ice"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerinfesteditema": {
    "value": "Infested"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickeritem": {
    "value": "Classic"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickeritemb": {
    "value": "Classic Saturated"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickeritemc": {
    "value": "Storm"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickeritemd": {
    "value": "Color Picker D"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerkiteeritema": {
    "value": "Baro Ki'teer Colors"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerlotus": {
    "value": "Lotus"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerorokin": {
    "value": "Orokin"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerps4itema": {
    "value": "Psiv"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickerrwbitem": {
    "value": "Red/white/blue"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickershamrockitem": {
    "value": "Shamrock"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickertwilightitema": {
    "value": "Twilight"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickertwitchbitema": {
    "value": "Eminence"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/colourpickervalitema": {
    "value": "Valentine"
  },
  "/lotus/storeitems/types/storeitems/suitcustomizations/ninjacolourpickeritem": {
    "value": "Smoke Colors"
  },
  "/lotus/storeitems/types/weapon/lotuscustomaimweapon": {
    "value": "Any"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/armourondamage": {
    "value": "Arcane Guardian"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/corrosiveprocresist": {
    "value": "Arcane Protection"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/critchanceondamage": {
    "value": "Arcane Avenger"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/electricityprocresist": {
    "value": "Arcane Resistance"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/explosionprocresist": {
    "value": "Arcane Support"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/fireprocresist": {
    "value": "Arcane Ice"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/freezeprocresist": {
    "value": "Arcane Warmth"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/gasprocresist": {
    "value": "Arcane Liquid"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/healthregenondamage": {
    "value": "Arcane Grace"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/impactprocresist": {
    "value": "Arcane Shield"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/instantshieldondamage": {
    "value": "Arcane Barrier"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/magneticprocresist": {
    "value": "Arcane Nullifier"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/poisonprocresist": {
    "value": "Arcane Detoxifier"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/punctureprocresist": {
    "value": "Arcane Defense"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/radiationprocresist": {
    "value": "Arcane Healing"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/reflectdamageonparry": {
    "value": "Arcane Vengeance"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/slashprocresist": {
    "value": "Arcane Deflection"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/speedondamage": {
    "value": "Arcane Agility"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/speedonparry": {
    "value": "Arcane Phantasm"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/defensive/viralprocresist": {
    "value": "Arcane Purity"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/offensive/guaranteedcritonmeleechannelkill": {
    "value": "Arcane Mercy"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/offensive/healthregenonheadshot": {
    "value": "Arcane Victory"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/offensive/invisibilityonfinisher": {
    "value": "Arcane Trickery"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/offensive/longgundamageonheadshot": {
    "value": "Arcane Rage"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/offensive/longgunspeedoncrit": {
    "value": "Arcane Acceleration"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/offensive/meleespeedonhit": {
    "value": "Arcane Strike"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/abilitydurationoncast": {
    "value": "Arcane Focus"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/abilityrangeoncast": {
    "value": "Arcane Emergence"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/abilitystrengthoncast": {
    "value": "Arcane Guide"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/damagereductionduringrevive": {
    "value": "Arcane Temperance"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/pistoldamageonreload": {
    "value": "Arcane Awakening"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/radialhealonhealthpickup": {
    "value": "Arcane Pulse"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/radialknockdownonenergypickup": {
    "value": "Arcane Eruption"
  },
  "/lotus/storeitems/upgrades/cosmeticenhancers/utility/slowerbleedoutonpredeath": {
    "value": "Arcane Survival"
  },
  "/lotus/storeitems/upgrades/focus/attacklens": {
    "value": "Madurai Lens"
  },
  "/lotus/storeitems/upgrades/focus/attacklensgreater": {
    "value": "Greater Madurai Lens"
  },
  "/lotus/storeitems/upgrades/focus/defenselens": {
    "value": "Vazarin Lens"
  },
  "/lotus/storeitems/upgrades/focus/defenselensgreater": {
    "value": "Greater Vazarin Lens"
  },
  "/lotus/storeitems/upgrades/focus/guardian/armorincreasefocus": {
    "value": "Thick Skin"
  },
  "/lotus/storeitems/upgrades/focus/guardian/healreceivebufffocus": {
    "value": "Swift Wounds"
  },
  "/lotus/storeitems/upgrades/focus/guardian/instantmaxenergyfocus": {
    "value": "Energy Drink"
  },
  "/lotus/storeitems/upgrades/focus/guardian/instantmaxhealthfocus": {
    "value": "Healthy Attitude"
  },
  "/lotus/storeitems/upgrades/focus/guardian/instantmaxshieldfocus": {
    "value": "Insta Shield"
  },
  "/lotus/storeitems/upgrades/focus/guardian/instantmaxstaminafocus": {
    "value": "Insta-mina"
  },
  "/lotus/storeitems/upgrades/focus/powerlens": {
    "value": "Zenurik Lens"
  },
  "/lotus/storeitems/upgrades/focus/powerlensgreater": {
    "value": "Greater Zenurik Lens"
  },
  "/lotus/storeitems/upgrades/focus/tactician/alliesonfirefocus": {
    "value": "Abyssal"
  },
  "/lotus/storeitems/upgrades/focus/tacticlens": {
    "value": "Naramon Lens"
  },
  "/lotus/storeitems/upgrades/focus/tacticlensgreater": {
    "value": "Greater Naramon Lens"
  },
  "/lotus/storeitems/upgrades/focus/void/energyefficiencyfocus": {
    "value": "Channeling"
  },
  "/lotus/storeitems/upgrades/focus/ward/damagehealsteamfocus": {
    "value": "Martyr"
  },
  "/lotus/storeitems/upgrades/focus/ward/enemyarmorreductionfocus": {
    "value": "Rust"
  },
  "/lotus/storeitems/upgrades/focus/ward/enemyshieldreductionfocus": {
    "value": "Faulty Battery"
  },
  "/lotus/storeitems/upgrades/focus/ward/healthincreaselinkfocus": {
    "value": "Linked Fate"
  },
  "/lotus/storeitems/upgrades/focus/ward/instantreviverfocus": {
    "value": "Lucky Medic"
  },
  "/lotus/storeitems/upgrades/focus/ward/regenweakerteammatesfocus": {
    "value": "Empathy"
  },
  "/lotus/storeitems/upgrades/focus/ward/reviveteamsentinelsfocus": {
    "value": "Sentinel Rebirth"
  },
  "/lotus/storeitems/upgrades/focus/wardlens": {
    "value": "Unairu Lens"
  },
  "/lotus/storeitems/upgrades/focus/wardlensgreater": {
    "value": "Greater Unairu Lens"
  },
  "/lotus/storeitems/upgrades/focus/warrior/killerfocussource": {
    "value": "Killer Generator"
  },
  "/lotus/storeitems/upgrades/focus/warrior/meleebuffgreatswordsfocus": {
    "value": "Great Sword Master"
  },
  "/lotus/storeitems/upgrades/focus/warrior/meleebuffhammersandaxesfocus": {
    "value": "Hammer And Axe Time"
  },
  "/lotus/storeitems/upgrades/focus/warrior/meleebuffswordsfocus": {
    "value": "Sword Master"
  },
  "/lotus/storeitems/upgrades/focus/warrior/npcaimreductionfocus": {
    "value": "Evasion"
  },
  "/lotus/storeitems/upgrades/focus/warrior/playerthreatincreasefocus": {
    "value": "Taunt"
  },
  "/lotus/storeitems/upgrades/focus/warrior/weaponaimbonuspistolfocus": {
    "value": "Pistol Master"
  },
  "/lotus/storeitems/upgrades/focus/warrior/weaponaimbonusriflefocus": {
    "value": "Rifle Master"
  },
  "/lotus/storeitems/upgrades/focus/warrior/weaponaimbonusshotgunfocus": {
    "value": "Shotgun Master"
  },
  "/lotus/storeitems/upgrades/mods/archwing/expert/archwingsuitabilitystrengthmodexpert": {
    "value": "Primed Morphic Transformer"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingeventfirestatusmeleemod": {
    "value": "Searing Steel"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingmeleecritchancemod": {
    "value": "Tempered Blade"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingmeleecritdamagemod": {
    "value": "Bleeding Edge"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingmeleedamagemod": {
    "value": "Cutting Edge"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingmeleefireratemod": {
    "value": "Furor"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingmeleerangeincmod": {
    "value": "Extend"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingmeleestatuschancemod": {
    "value": "Sudden Impact"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingweaponelectricitydamagemod": {
    "value": "Galvanized Blade"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingweaponfiredamagemod": {
    "value": "Blazing Steel"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingweaponfreezedamagemod": {
    "value": "Glacial Edge"
  },
  "/lotus/storeitems/upgrades/mods/archwing/melee/archwingweapontoxindamagemod": {
    "value": "Poisonous Sting"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingeventfirestatusriflemod": {
    "value": "Magma Chamber"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingrifleammomaxmod": {
    "value": "Ammo Chain"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflechargespeedmod": {
    "value": "Shell Rush"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingrifleclipmaxmod": {
    "value": "Magazine Extension"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflecritchancemod": {
    "value": "Parallax Scope"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflecritdamagemod": {
    "value": "Hollowed Bullets"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingrifledamageamountmod": {
    "value": "Rubedo-lined Barrel"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflefireiterationsmod": {
    "value": "Dual Rounds"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflefireratemod": {
    "value": "Automatic Trigger"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflerangemod": {
    "value": "Ballista Measure"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflereloadspeedmod": {
    "value": "Quick Reload"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingriflestatuschancemod": {
    "value": "Modified Munitions"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingweaponelectricitydamagemod": {
    "value": "Electrified Barrel"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingweaponfiredamagemod": {
    "value": "Combustion Rounds"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingweaponfreezedamagemod": {
    "value": "Polar Magazine"
  },
  "/lotus/storeitems/upgrades/mods/archwing/rifle/archwingweapontoxindamagemod": {
    "value": "Venomous Clip"
  },
  "/Lotus/StoreItems/Upgrades/Mods/Archwing/Rifle/Expert/ArchwingRifleDamageAmountModExpert": {
    "value": "Primed Rubedo-Lined Barrel"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitabilitydurationmod": {
    "value": "Efficient Transferral"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitabilityefficiencymod": {
    "value": "System Reroute"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitabilityrangemod": {
    "value": "Energy Amplifier"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitabilitystrengthmod": {
    "value": "Morphic Transformer"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitarmourmod": {
    "value": "Argon Plating"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuithealthmaxmod": {
    "value": "Enhanced Durability"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitpowermaxmod": {
    "value": "Auxiliary Power"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitshieldmaxmod": {
    "value": "Energy Inversion"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitshieldrechargeratemod": {
    "value": "Superior Defenses"
  },
  "/lotus/storeitems/upgrades/mods/archwing/suit/archwingsuitsprintspeedmod": {
    "value": "Hyperion Thrusters"
  },
  "/lotus/storeitems/upgrades/mods/aura/enemyarmorreductionauramod": {
    "value": "Corrosive Projection"
  },
  "/lotus/storeitems/upgrades/mods/aura/enemyshielddroneauramod": {
    "value": "Shield Disruption"
  },
  "/lotus/storeitems/upgrades/mods/aura/enemyshieldreductionauramod": {
    "value": "Shield Disruption"
  },
  "/lotus/storeitems/upgrades/mods/aura/infestationspeedreductionauramod": {
    "value": "Infested Impedance"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerelectricityimmunityauramod": {
    "value": "Electrical Resistance"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerenemyradarauramod": {
    "value": "Enemy Radar"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerenergyregenauramod": {
    "value": "Energy Siphon"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerfireimmunityauramod": {
    "value": "Heat Resistance"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerfreezeimmunityauramod": {
    "value": "Frost Insulation"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerhealthauramod": {
    "value": "Physique"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerhealthregenauramod": {
    "value": "Rejuvenation"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerholsterspeedauramod": {
    "value": "Speed Holster"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerinfiniteclipauramod": {
    "value": "Team Armory"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerlaserimmunityauramod": {
    "value": "Laser Deflection"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerlootradarauramod": {
    "value": "Loot Detector"
  },
  "/lotus/storeitems/upgrades/mods/aura/playermeleeauramod": {
    "value": "Steel Charge"
  },
  "/lotus/storeitems/upgrades/mods/aura/playermeleeelectricitydamageauramod": {
    "value": "Lightning Blades"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerpistolammoauramod": {
    "value": "Pistol Scavenger"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerpistoldamageauramod": {
    "value": "Pistol Amp"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerpoisonimmunityauramod": {
    "value": "Toxin Resistance"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerrifleammoauramod": {
    "value": "Rifle Scavenger"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerrifledamageauramod": {
    "value": "Rifle Amp"
  },
  "/lotus/storeitems/upgrades/mods/aura/playershellammoauramod": {
    "value": "Shotgun Scavenger"
  },
  "/lotus/storeitems/upgrades/mods/aura/playershelldamageauramod": {
    "value": "Shotgun Amp"
  },
  "/lotus/storeitems/upgrades/mods/aura/playersniperammoauramod": {
    "value": "Sniper Scavenger"
  },
  "/lotus/storeitems/upgrades/mods/aura/playersniperdamageauramod": {
    "value": "Dead Eye"
  },
  "/lotus/storeitems/upgrades/mods/aura/playersprintauramod": {
    "value": "Sprint Boost"
  },
  "/lotus/storeitems/upgrades/mods/aura/playerxpauramod": {
    "value": "Affinity Amp"
  },
  "/lotus/storeitems/upgrades/mods/aura/robotpooraimauramod": {
    "value": "EMP Aura"
  },
  "/lotus/storeitems/upgrades/mods/directormods/bossdropreductionaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/corrosivedamageenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/electricdamageenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/energydraincapturetargetaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/energylimitaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/fastenemylevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/halfshieldslevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/highdamageenemylevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/hivedoubledamageenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/hiveextradamageenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/icedamageenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/iceprocenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/juggernautwarninglevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/kubrowintensifieraura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/npcdropreductionaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/perftestextrahealthenemylevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/poisondamageenemyaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/portaleventaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/projectmutalistbonuslevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/projectmutalistlevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/pvpmeleechannelinglevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/raidenemydamageresistlevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/shipyardsinterceptionlevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/slashprocreductionaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/directormods/weakenemylevelaura": {
    "value": "Unfused Artifact"
  },
  "/lotus/storeitems/upgrades/mods/dualsource/melee/critdamagechargespeedmod": {
    "value": "Amalgam Organ Shatter"
  },
  "/lotus/storeitems/upgrades/mods/dualsource/pistol/multishotdodgemod": {
    "value": "Amalgam Barrel Diffusion"
  },
  "/lotus/storeitems/upgrades/mods/dualsource/rifle/serratedrushmod": {
    "value": "Amalgam Serration"
  },
  "/lotus/storeitems/upgrades/mods/dualsource/shotgun/shotgunmedicmod": {
    "value": "Amalgam Shotgun Spazz"
  },
  "/lotus/storeitems/upgrades/mods/fusers/commonlvl1modfuser": {
    "value": "C1 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/commonlvl2modfuser": {
    "value": "C2 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/commonlvl3modfuser": {
    "value": "C1 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/commonmodfuser": {
    "value": "Common Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl10modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl1modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl2modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl3modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl4modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl5modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl6modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl7modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl8modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonlvl9modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacycommonmodfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl10modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl1modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl2modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl3modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl4modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl5modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl6modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl7modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl8modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyrarelvl9modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyraremodfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl10modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl1modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl2modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl3modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl4modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl5modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl6modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl7modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl8modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonlvl9modfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legacyuncommonmodfuser": {
    "value": "Ancient Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/legendarymodfuser": {
    "value": "Legendary Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/rarelvl1modfuser": {
    "value": "R1 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/rarelvl2modfuser": {
    "value": "R2 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/rarelvl3modfuser": {
    "value": "R3 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/rarelvl4modfuser": {
    "value": "R4 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/rarelvl5modfuser": {
    "value": "R5 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/raremodfuser": {
    "value": "Rare Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/uncommonlvl1modfuser": {
    "value": "U1 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/uncommonlvl2modfuser": {
    "value": "U2 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/uncommonlvl3modfuser": {
    "value": "U3 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/uncommonlvl4modfuser": {
    "value": "U4 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/uncommonlvl5modfuser": {
    "value": "U5 Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusers/uncommonmodfuser": {
    "value": "Uncommon Fusion Core"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/alertfusionbundlelarge": {
    "value": "150 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/alertfusionbundlemedium": {
    "value": "100 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/alertfusionbundlesmall": {
    "value": "80 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/rarefusionbundle": {
    "value": "80 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/rarelvl1fusionbundle": {
    "value": "30 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/rarelvl2fusionbundle": {
    "value": "40 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/rarelvl3fusionbundle": {
    "value": "55 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/rarelvl4fusionbundle": {
    "value": "65 Endo"
  },
  "/lotus/storeitems/upgrades/mods/fusionbundles/rarelvl5fusionbundle": {
    "value": "80 Endo"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponarmorpiercingdamagemodbeginner": {
    "value": "Sundering Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponcritchancemodbeginner": {
    "value": "True Steel"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponcritdamagemodbeginner": {
    "value": "Organ Shatter"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponcritfireratebonusmodbeginner": {
    "value": "Berserker"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponelectricitydamagemodbeginner": {
    "value": "Shocking Touch"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponfiredamagemodbeginner": {
    "value": "Molten Impact"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponfireratemodbeginner": {
    "value": "Fury"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponfreezedamagemodbeginner": {
    "value": "North Wind"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponglaivepowerthrowmodbeginner": {
    "value": "Power Throw"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponglaivespeedmodbeginner": {
    "value": "Whirlwind"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponimpactdamagemodbeginner": {
    "value": "Heavy Trauma"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponmeleechannelingefficiencymodbeginner": {
    "value": "Reflex Coil"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponmeleedamagemodbeginner": {
    "value": "Pressure Point"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponmeleefactiondamagecorpusbeginner": {
    "value": "Smite Corpus"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponmeleefactiondamagegrineerbeginner": {
    "value": "Smite Grineer"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponmeleefactiondamageinfestedbeginner": {
    "value": "Smite Infested"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponslashdamagemodbeginner": {
    "value": "Jagged Edge"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weaponstunchancemodbeginner": {
    "value": "Melee Prowess"
  },
  "/lotus/storeitems/upgrades/mods/melee/beginner/weapontoxindamagemodbeginner": {
    "value": "Fever Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/channel/channelcritsmod": {
    "value": "True Punishment"
  },
  "/lotus/storeitems/upgrades/mods/melee/channel/channelfireratemod": {
    "value": "Quickening"
  },
  "/lotus/storeitems/upgrades/mods/melee/channel/channelparrystaminaredmod": {
    "value": "Warriors Grip"
  },
  "/lotus/storeitems/upgrades/mods/melee/channel/channelstatusmod": {
    "value": "Enduring Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/channel/channelvampiremod": {
    "value": "Life Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/combotimestatuschancemod": {
    "value": "Drifting Contact"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/corrupteddamagespeedmod": {
    "value": "Spoiled Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/corruptedheavydamagechargespeedmod": {
    "value": "Corrupt Charge"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/electeventmeleemod": {
    "value": "Voltaic Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/fireeventmeleemod": {
    "value": "Volcanic Edge"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/focusenergymod": {
    "value": "Focus Energy"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/iceeventmeleemod": {
    "value": "Vicious Frost"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/poisoneventmeleemod": {
    "value": "Virulent Scourge"
  },
  "/lotus/storeitems/upgrades/mods/melee/dualstat/rendingstrikemod": {
    "value": "Rending Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponarmorpiercingdamagemodexpert": {
    "value": "Primed Sundering Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponcritchancemodexpert": {
    "value": "Primed True Steel"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponcritdamagemodexpert": {
    "value": "Primed Organ Shatter"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponcritfireratebonusmodexpert": {
    "value": "Primed Berserker"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponelectricitydamagemodexpert": {
    "value": "Primed Shocking Touch"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponfiredamagemodexpert": {
    "value": "Primed Molten Impact"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponfireratemodexpert": {
    "value": "Primed Fury"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponfreezedamagemodexpert": {
    "value": "Primed North Wind"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponglaivepowerthrowmodexpert": {
    "value": "Primed Power Throw"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponglaivereflectiondecreasemodexpert": {
    "value": "Primed Quick Return"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponglaivereflectionincreasemodexpert": {
    "value": "Primed Rebound"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponglaivespeedmodexpert": {
    "value": "Primed Whirlwind"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponimpactdamagemodexpert": {
    "value": "Primed Heavy Trauma"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleechannelingefficiencymodexpert": {
    "value": "Primed Reflex Coil"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleedamagemodexpert": {
    "value": "Primed Pressure Point"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleefactiondamagecorpusexpert": {
    "value": "Primed Smite Corpus"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleefactiondamagecorruptedexpert": {
    "value": "Primed Smite Corrupted"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleefactiondamagegrineerexpert": {
    "value": "Primed Smite Grineer"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleefactiondamageinfestedexpert": {
    "value": "Primed Smite Infested"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleefinisherdamagemodexpert": {
    "value": "Primed Finishing Touch"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponmeleerangeincmodexpert": {
    "value": "Primed Reach"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponpowerdamagemodexpert": {
    "value": "Primed Energy Channel"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponslashdamagemodexpert": {
    "value": "Primed Jagged Edge"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weaponstunchancemodexpert": {
    "value": "Primed Melee Prowess"
  },
  "/lotus/storeitems/upgrades/mods/melee/expert/weapontoxindamagemodexpert": {
    "value": "Primed Fever Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponglaivereflectiondecreasemodintermediate": {
    "value": "Quick Return"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponglaivereflectionincreasemodintermediate": {
    "value": "Rebound"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponmeleechannelingefficiencyemodintermediate": {
    "value": "Reflex Coil"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponmeleefinisherdamagemodintermediate": {
    "value": "Finishing Touch"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponmeleerangeincmodintermediate": {
    "value": "Reach"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponpowerdamagemodintermediate": {
    "value": "Energy Channel"
  },
  "/lotus/storeitems/upgrades/mods/melee/intermediate/weaponstunchancemodintermediate": {
    "value": "Melee Prowess"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponarmorpiercingdamagemod": {
    "value": "Sundering Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponcritchancemod": {
    "value": "True Steel"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponcritdamagemod": {
    "value": "Organ Shatter"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponcritfireratebonusmod": {
    "value": "Berserker"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponelectricitydamagemod": {
    "value": "Shocking Touch"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponeventmeleeimpactdamagemod": {
    "value": "Collision Force"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponeventpuncturedamagemod": {
    "value": "Auger Strike"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponeventslashdamagemod": {
    "value": "Buzz Kill"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponfiredamagemod": {
    "value": "Molten Impact"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponfireratemod": {
    "value": "Fury"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponfreezedamagemod": {
    "value": "North Wind"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponglaivepowerthrowmod": {
    "value": "Power Throw"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponglaivereflectiondecreasemod": {
    "value": "Quick Return"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponglaivereflectionincreasemod": {
    "value": "Rebound"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponglaivespeedmod": {
    "value": "Whirlwind"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponimpactdamagemod": {
    "value": "Heavy Trauma"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleechargeratemod": {
    "value": "Reflex Coil"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleedamagemod": {
    "value": "Pressure Point"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleefactiondamagecorpus": {
    "value": "Smite Corpus"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleefactiondamagegrineer": {
    "value": "Smite Grineer"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleefactiondamageinfested": {
    "value": "Smite Infested"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleefinisherdamagemod": {
    "value": "Finishing Touch"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleeheavydamagemod": {
    "value": "Killing Blow"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponmeleerangeincmod": {
    "value": "Reach"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponpowerdamagemod": {
    "value": "Energy Channel"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponproctimemod": {
    "value": "Lasting Sting"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponslashdamagemod": {
    "value": "Jagged Edge"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponstaminabonusmod": {
    "value": "Second Wind"
  },
  "/lotus/storeitems/upgrades/mods/melee/weaponstunchancemod": {
    "value": "Melee Prowess"
  },
  "/lotus/storeitems/upgrades/mods/melee/weapontoxindamagemod": {
    "value": "Fever Strike"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponammomaxmodbeginner": {
    "value": "Trick Mag"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponarmorpiercingdamagemodbeginner": {
    "value": "No Return"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponclipmaxmodbeginner": {
    "value": "Slip Magazine"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponcritchancemodbeginner": {
    "value": "Pistol Gambit"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponcritdamagemodbeginner": {
    "value": "Target Cracker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weapondamageamountmodbeginner": {
    "value": "Hornet Strike"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponelectricitydamagemodbeginner": {
    "value": "Convulsion"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponfiredamagemodbeginner": {
    "value": "Heated Charge"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponfireiterationsmodbeginner": {
    "value": "Barrel Diffusion"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponfireratemodbeginner": {
    "value": "Gunslinger"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponfreezedamagemodbeginner": {
    "value": "Deep Freeze"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponimpactdamagemodbeginner": {
    "value": "Concussion Rounds"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponpistolfactiondamagecorpusbeginner": {
    "value": "Expel Corpus"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponpistolfactiondamagegrineerbeginner": {
    "value": "Expel Grineer"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponpistolfactiondamageinfestedbeginner": {
    "value": "Expel Infested"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponpuncturedepthmodbeginner": {
    "value": "Seeker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponreloadspeedmodbeginner": {
    "value": "Quickdraw"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponslashdamagemodbeginner": {
    "value": "Razor Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weaponstatuschancemodbeginner": {
    "value": "Sure Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/beginner/weapontoxindamagemodbeginner": {
    "value": "Pathogen Rounds"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/corruptedcritchancefireratepistol": {
    "value": "Creeping Bullseye"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/corruptedcritdamagepistol": {
    "value": "Hollow Point"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/corrupteddamagerecoilpistol": {
    "value": "Magnum Force"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/corruptedfireratedamagepistol": {
    "value": "Anemic Agility"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/corruptedmaxclipreloadspeedpistol": {
    "value": "Tainted Clip"
  },
  "/Lotus/StoreItems/Upgrades/Mods/Pistol/DualStat/ElectEventPistolMod": {
    "value": "Jolt"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/fireeventpistolmod": {
    "value": "Scorch"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/grindermod": {
    "value": "Lethal Torrent"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/iceeventpistolmod": {
    "value": "Frostbite"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/icestormmod": {
    "value": "Ice Storm"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/poisoneventpistolmod": {
    "value": "Pistol Pestilence"
  },
  "/lotus/storeitems/upgrades/mods/pistol/dualstat/stunningspeedmod": {
    "value": "Stunning Speed"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/primedweaponcritdamagemod": {
    "value": "Primed Target Cracker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/event/ambulasevent/expert/secondaryexplosionradiusmodexpert": {
    "value": "Prime Fulmination"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponammomaxmodexpert": {
    "value": "Trick Mag"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponarmorpiercingdamagemodexpert": {
    "value": "No Return"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponclipmaxmodexpert": {
    "value": "Primed Slip Magazine"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponcritchancemodbeginnerexpert": {
    "value": "Primed Pistol Gambit"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponcritdamagemodexpert": {
    "value": "Target Cracker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponelectricitydamagemodexpert": {
    "value": "Convulsion"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponfiredamagemodexpert": {
    "value": "Primed Heated Charge"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponfireiterationsmodexpert": {
    "value": "Barrel Diffusion"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponfireratemodexpert": {
    "value": "Primed Gunslinger"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponfreezedamagemodexpert": {
    "value": "Primed Deep Freeze"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponimpactdamagemodexpert": {
    "value": "Primed Concussion Rounds"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponnoisereductionmodexpert": {
    "value": "Primed Suppress"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponpistolconvertammomodexpert": {
    "value": "Primed Pistol Ammo Mutation"
  },
  "/Lotus/StoreItems/Upgrades/Mods/Pistol/Expert/WeaponPistolFactionDamageCorpusExpert": {
    "value": "Primed Expel Corpus"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponpistolfactiondamagecorruptedexpert": {
    "value": "Primed Expel Corrupted"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponpistolfactiondamagegrineerexpert": {
    "value": "Primed Expel Grineer"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponpistolfactiondamageinfestedexpert": {
    "value": "Primed Expel Infested"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponpistolzoomfovmodexpert": {
    "value": "Primed Hawk Eye"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponpuncturedepthmodexpert": {
    "value": "Primed Seeker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponrecoilreductionmodexpert": {
    "value": "Primed Steady Hands"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponreloadspeedmodexpert": {
    "value": "Primed Quickdraw"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponslashdamagemodexpert": {
    "value": "Primed Razor Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weaponstatuschancemodexpert": {
    "value": "Primed Sure Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/expert/weapontoxindamagemodexpert": {
    "value": "Primed Pathogen Rounds"
  },
  "/lotus/storeitems/upgrades/mods/pistol/intermediate/weapondamageamountmodintermediate": {
    "value": "Hornet Strike"
  },
  "/lotus/storeitems/upgrades/mods/pistol/intermediate/weaponnoisereductionmodintermediate": {
    "value": "Suppress"
  },
  "/lotus/storeitems/upgrades/mods/pistol/intermediate/weaponpistolconvertammomodintermediate": {
    "value": "Pistol Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/pistol/intermediate/weaponpistolzoomfovmodintermediate": {
    "value": "Hawk Eye"
  },
  "/lotus/storeitems/upgrades/mods/pistol/intermediate/weaponrecoilreductionmodintermediate": {
    "value": "Steady Hands"
  },
  "/lotus/storeitems/upgrades/mods/pistol/intermediate/weaponstatuschancemodintermediate": {
    "value": "Sure Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponammomaxmod": {
    "value": "Trick Mag"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponarmorpiercingdamagemod": {
    "value": "No Return"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponbeamdistancemod": {
    "value": "Ruinous Extension"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponclipmaxmod": {
    "value": "Slip Magazine"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponcritchancemod": {
    "value": "Pistol Gambit"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponcritdamagemod": {
    "value": "Target Cracker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weapondamageamountmod": {
    "value": "Hornet Strike"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponelectricitydamagemod": {
    "value": "Convulsion"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponeventpistolimpactdamagemod": {
    "value": "Pummel"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponeventpuncturedamagemod": {
    "value": "Bore"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponeventslashdamagemod": {
    "value": "Maim"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponfiredamagemod": {
    "value": "Heated Charge"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponfireiterationsmod": {
    "value": "Barrel Diffusion"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponfireratemod": {
    "value": "Gunslinger"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponfreezedamagemod": {
    "value": "Deep Freeze"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponimpactdamagemod": {
    "value": "Concussion Rounds"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponnoisereductionmod": {
    "value": "Suppress"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponpistolconvertammomod": {
    "value": "Pistol Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponpistolfactiondamagecorpus": {
    "value": "Expel Corpus"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponpistolfactiondamagegrineer": {
    "value": "Expel Grineer"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponpistolfactiondamageinfested": {
    "value": "Expel Infested"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponpistolzoomfovmod": {
    "value": "Hawk Eye"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponproctimemod": {
    "value": "Perpetual Agony"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponprojectilespeedmod": {
    "value": "Lethal Momentum"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponpuncturedepthmod": {
    "value": "Seeker"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponrecoilreductionmod": {
    "value": "Steady Hands"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponreloadspeedmod": {
    "value": "Quickdraw"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponslashdamagemod": {
    "value": "Razor Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weaponstunchancemod": {
    "value": "Sure Shot"
  },
  "/lotus/storeitems/upgrades/mods/pistol/weapontoxindamagemod": {
    "value": "Pathogen Rounds"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/melee/abilitydamageblockmod": {
    "value": "Stand Ground"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/melee/explodeonmeleedeath": {
    "value": "Explosive Demise"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/melee/meleeautotargetbonus": {
    "value": "Martial Fury"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/melee/meleestaminadamagebonus": {
    "value": "[Placeholder] Stamina Damage"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/melee/meleevictimstaminadrain": {
    "value": "Relentless Assault"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/fasterreloadmorerecoilpistolmod": {
    "value": "Loose Magazine"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/highervelocitylessaccuratepistolmod": {
    "value": "Blind Shot"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/holsterspeedbonusmod": {
    "value": "Reflex Draw"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/largermaglongerreloadpistolmod": {
    "value": "Full Capacity"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/lessrecoilsmallermagpistolmod": {
    "value": "Hydraulic Barrel"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/marktargetadddamagemod": {
    "value": "Tactical Espionage"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/marktargetpistolmod": {
    "value": "Night Stalker"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/passivereloadmod": {
    "value": "Eject Magazine"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/restorehealthonkillmod": {
    "value": "Recuperate"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/pistol/restoreshieldsonkillmod": {
    "value": "Calculated Victory"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/fasterreloadmorerecoilriflemod": {
    "value": "Loose Hatch"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/highervelocitylessaccurateriflemod": {
    "value": "Lucky Shot"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/holsterspeedbonusmod": {
    "value": "Twitch"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/largermaglongerreloadriflemod": {
    "value": "Maximum Capacity"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/lessrecoilsmallermagriflemod": {
    "value": "Hydraulic Gauge"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/marktargetadddamagemod": {
    "value": "Strategic Pursuit"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/marktargetriflemod": {
    "value": "Apex Predator"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/passivereloadmod": {
    "value": "Tactical Reload"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/restorehealthonkillmod": {
    "value": "Recover"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/rifle/restoreshieldsonkillmod": {
    "value": "Vanquished Prey"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/fasterreloadmorerecoilshotgunmod": {
    "value": "Loose Chamber"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/holsterspeedbonusmod": {
    "value": "Soft Hands"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/largermaglongerreloadshotgunmod": {
    "value": "Loaded Capacity"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/lessrecoilsmallermagshotgunmod": {
    "value": "Hydraulic Chamber"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/marktargetadddamagemod": {
    "value": "Focused Assault"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/marktargetshotgunmod": {
    "value": "Bounty Hunter"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/passivereloadmod": {
    "value": "Lock And Load"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/restorehealthonkillmod": {
    "value": "Momentary Pause"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/shotgun/restoreshieldsonkillmod": {
    "value": "Prize Kill"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/abilitycastingdamageresistance": {
    "value": "Perseverance"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/avatarspawnenergymod": {
    "value": "Competitive Advantage"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/effectonfullenergymod": {
    "value": "Overcharge Detectors"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/energyonfullshieldregenmod": {
    "value": "Surplus Diverters"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/energyonkill": {
    "value": "Follow Through"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/reduceshieldrechargedelaywarframe": {
    "value": "Quick Charge"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/staminaslide": {
    "value": "Zero Friction"
  },
  "/lotus/storeitems/upgrades/mods/pvpmods/warframe/wallclingmod": {
    "value": "Covert Recon"
  },
  "/lotus/storeitems/upgrades/mods/randomized/lotusmeleerandommodrare": {
    "value": "Melee Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/lotusmodularmeleerandommodrare": {
    "value": "Zaw Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/lotusmodularpistolrandommodrare": {
    "value": "Kitgun Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/lotuspistolrandommodrare": {
    "value": "Pistol Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/lotusriflerandommodrare": {
    "value": "Rifle Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/lotusshotgunrandommodrare": {
    "value": "Shotgun Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/playermeleeweaponrandommodrare": {
    "value": "Veiled Melee Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/playerpistolweaponrandommodrare": {
    "value": "Veiled Pistol Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/playerrifleweaponrandommodrare": {
    "value": "Veiled Rifle Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/randomized/playershotgunweaponrandommodrare": {
    "value": "Veiled Shotgun Riven Mod"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponammomaxmodbeginner": {
    "value": "Ammo Drum"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponarmorpiercingdamagemodbeginner": {
    "value": "Piercing Hit"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponclipmaxmodbeginner": {
    "value": "Magazine Warp"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponcritchancemodbeginner": {
    "value": "Point Strike"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponcritdamagemodbeginner": {
    "value": "Vital Sense"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weapondamageamountmodbeginner": {
    "value": "Serration"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponelectricitydamagemodbeginner": {
    "value": "Stormbringer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfactiondamagecorpusbeginner": {
    "value": "Bane Of Corpus"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfactiondamagegrineerbeginner": {
    "value": "Bane Of Grineer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfactiondamageinfestedbeginner": {
    "value": "Bane Of Infested"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfiredamagemodbeginner": {
    "value": "Hellfire"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfireiterationsmodbeginner": {
    "value": "Split Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfireratemodbeginner": {
    "value": "Speed Trigger"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponfreezedamagemodbeginner": {
    "value": "Cryo Rounds"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponimpactdamagemodbeginner": {
    "value": "Rupture"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponpuncturedepthmodbeginner": {
    "value": "Metal Auger"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponreloadspeedmodbeginner": {
    "value": "Fast Hands"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponslashdamagemodbeginner": {
    "value": "Sawtooth Clip"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weaponstatuschancemodbeginner": {
    "value": "Rifle Aptitude"
  },
  "/lotus/storeitems/upgrades/mods/rifle/beginner/weapontoxindamagemodbeginner": {
    "value": "Infected Clip"
  },
  "/lotus/storeitems/upgrades/mods/rifle/bowexplosionchancemod": {
    "value": "Thunderbolt"
  },
  "/lotus/storeitems/upgrades/mods/rifle/bowmultishotonhitmod": {
    "value": "Split Flights"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/corruptedcritratefireraterifle": {
    "value": "Critical Delay"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/corrupteddamagerecoilrifle": {
    "value": "Heavy Caliber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/corruptedfireratedamagerifle": {
    "value": "Vile Acceleration"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/corruptedmaxclipreloadspeedrifle": {
    "value": "Tainted Mag"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/corruptedrecoilfireraterifle": {
    "value": "Vile Precision"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/electeventriflemod": {
    "value": "High Voltage"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/fireeventriflemod": {
    "value": "Thermite Rounds"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/hammershotmod": {
    "value": "Hammer Shot"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/iceeventriflemod": {
    "value": "Rime Rounds"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/poisoneventriflemod": {
    "value": "Malignant Force"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/shredmod": {
    "value": "Shred"
  },
  "/lotus/storeitems/upgrades/mods/rifle/dualstat/wildfiremod": {
    "value": "Wildfire"
  },
  "/lotus/storeitems/upgrades/mods/rifle/eventsniperreloaddamagemod": {
    "value": "Primed Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/bowexplosionchancemodexpert": {
    "value": "Primed Thunderbolt"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/primedweaponfactiondamagecorpus": {
    "value": "Primed Bane of Corpus"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/primedweaponfactiondamagecorrupted": {
    "value": "Primed Bane of Corrupted"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/primedweaponfactiondamagegrineer": {
    "value": "Primed Bane of Grineer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/primedweaponfactiondamageinfested": {
    "value": "Primed Bane of Infested"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/sniperreloaddamagemodexpert": {
    "value": "Primed Charged Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponammomaxmodexpert": {
    "value": "Primed Ammo Drum"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponarmorpiercingdamagemodexpert": {
    "value": "Primed Piercing Hit"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponbowconvertammomodexpert": {
    "value": "Primed Arrow Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponclipmaxmodexpert": {
    "value": "Primed Magazine Warp"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponcritchancemodexpert": {
    "value": "Primed Point Strike"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponcritdamagemodexpert": {
    "value": "Primed Vital Sense"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponelectricitydamagemodexpert": {
    "value": "Primed Stormbringer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfactiondamagecorpusexpert": {
    "value": "Primed Bane Of Corpus"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfactiondamagegrineerexpert": {
    "value": "Primed Bane Of Grineer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfactiondamageinfestedexpert": {
    "value": "Primed Bane Of Infested"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfiredamagemodexpert": {
    "value": "Primed Hellfire"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfireiterationsmodexpert": {
    "value": "Primed Split Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfireratemodexpert": {
    "value": "Primed Speed Trigger"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponfreezedamagemodexpert": {
    "value": "Primed Cryo Rounds"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponimpactdamagemodexpert": {
    "value": "Primed Rupture"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponincreaseradialexplosionmodexpert": {
    "value": "Primed Firestorm"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponnoisereductionmodexpert": {
    "value": "Primed Hush"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponpuncturedepthmodexpert": {
    "value": "Primed Metal Auger"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponrecoilreductionmodexpert": {
    "value": "Primed Stabilizer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponreloadspeedmodexpert": {
    "value": "Primed Fast Hands"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponrifleconvertammomodexpert": {
    "value": "Primed Rifle Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponslashdamagemodexpert": {
    "value": "Primed Sawtooth Clip"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponsnipersconvertammomodexpert": {
    "value": "Primed Sniper Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponstatuschancemodexpert": {
    "value": "Primed Rifle Aptitude"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weapontoxindamagemodexpert": {
    "value": "Primed Infected Clip"
  },
  "/lotus/storeitems/upgrades/mods/rifle/expert/weaponzoomfovmodexpert": {
    "value": "Primed Eagle Eye"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/bowexplosionchancemodintermediate": {
    "value": "Thunderbolt"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/sniperreloaddamagemodintermediate": {
    "value": "Charged Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponbowconvertammomodintermediate": {
    "value": "Arrow Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weapondamageamountmodintermediate": {
    "value": "Serration"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponincreaseradialexplosionmodintermediate": {
    "value": "Firestorm"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponnoisereductionmodintermediate": {
    "value": "Hush"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponrecoilreductionmodintermediate": {
    "value": "Stabilizer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponrifleconvertammomodintermediate": {
    "value": "Rifle Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponsnipersconvertammomodintermediate": {
    "value": "Sniper Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponstatuschancemodintermediate": {
    "value": "Rifle Aptitude"
  },
  "/lotus/storeitems/upgrades/mods/rifle/intermediate/weaponzoomfovmodintermediate": {
    "value": "Eagle Eye"
  },
  "/lotus/storeitems/upgrades/mods/rifle/sniperreloaddamagemod": {
    "value": "Charged Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponammomaxmod": {
    "value": "Ammo Drum"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponarmorpiercingdamagemod": {
    "value": "Piercing Hit"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponbeamdistancemod": {
    "value": "Sinister Reach"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponbowconvertammomod": {
    "value": "Arrow Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponclipmaxmod": {
    "value": "Magazine Warp"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponcritchancemod": {
    "value": "Point Strike"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponcritdamagemod": {
    "value": "Vital Sense"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weapondamageamountmod": {
    "value": "Serration"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponelectricitydamagemod": {
    "value": "Stormbringer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponeventpuncturedamagemod": {
    "value": "Piercing Caliber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponeventrifleimpactdamagemod": {
    "value": "Crash Course"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponeventslashdamagemod": {
    "value": "Fanged Fusillade"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfactiondamagecorpus": {
    "value": "Bane Of Corpus"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfactiondamagegrineer": {
    "value": "Bane Of Grineer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfactiondamageinfested": {
    "value": "Bane Of Infested"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfiredamagemod": {
    "value": "Hellfire"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfireiterationsmod": {
    "value": "Split Chamber"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfireratemod": {
    "value": "Speed Trigger"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponfreezedamagemod": {
    "value": "Cryo Rounds"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponimpactdamagemod": {
    "value": "Rupture"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponincreaseradialexplosionmod": {
    "value": "Firestorm"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponnoisereductionmod": {
    "value": "Hush"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponproctimemod": {
    "value": "Continuous Misery"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponprojectilespeedmod": {
    "value": "Terminal Velocity"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponpuncturedepthmod": {
    "value": "Metal Auger"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponrecoilreductionmod": {
    "value": "Stabilizer"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponreloadspeedmod": {
    "value": "Fast Hands"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponrifleconvertammomod": {
    "value": "Rifle Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponslashdamagemod": {
    "value": "Sawtooth Clip"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponsnipersconvertammomod": {
    "value": "Sniper Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponstunchancemod": {
    "value": "Rifle Aptitude"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weapontoxindamagemod": {
    "value": "Infected Clip"
  },
  "/lotus/storeitems/upgrades/mods/rifle/weaponzoomfovmod": {
    "value": "Eagle Eye"
  },
  "/Lotus/StoreItems/Upgrades/Mods/Sentinel/Kubrow/Expert/KubrowPackLeaderExpertMod": {
    "value": "Primed Pack Leader"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowclonedfinishermod": {
    "value": "Savagery"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowcritmod": {
    "value": "Bite"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowfinishermod": {
    "value": "Ferocity"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowlinkarmourmaxmod": {
    "value": "Link Armor"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowlinkhealthmaxmod": {
    "value": "Link Health"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowlinkshieldmaxmod": {
    "value": "Link Shields"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowmasterbleedoutmod": {
    "value": "Loyal Companion"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowmeleedamagemod": {
    "value": "Maul"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowpackleadermod": {
    "value": "Pack Leader"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/kubrow/kubrowshieldrechargeratemod": {
    "value": "Hastened Deflection"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinelarmourmod": {
    "value": "Metal Fiber"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentineldropchancemod": {
    "value": "Spare Parts"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinelexplosionmod": {
    "value": "Self Destruct"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinelhealthmaxmod": {
    "value": "Enhanced Vitality"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinellootradarenemyradarexpertmod": {
    "value": "Primed Animal Instinct"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinellootradarenemyradarmod": {
    "value": "Animal Instinct"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentineloverheatdamagemod": {
    "value": "Fired Up"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinelshieldmaxmod": {
    "value": "Calculated Redirection"
  },
  "/lotus/storeitems/upgrades/mods/sentinel/sentinelshieldrechargeratemod": {
    "value": "Accelerated Deflection"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponammomaxmodbeginner": {
    "value": "Shell Compression"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponarmorpiercingdamagemodbeginner": {
    "value": "Flechette"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponclipmaxmodbeginner": {
    "value": "Ammo Stock"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponcritchancemodbeginner": {
    "value": "Blunderbuss"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponcritdamagemodbeginner": {
    "value": "Ravage"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weapondamageamountmodbeginner": {
    "value": "Point Blank"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponelectricitydamagemodbeginner": {
    "value": "Charged Shell"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponfiredamagemodbeginner": {
    "value": "Incendiary Coat"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponfireiterationsmodbeginner": {
    "value": "Hells Chamber"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponfireratemodbeginner": {
    "value": "Shotgun Spazz"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponfreezedamagemodbeginner": {
    "value": "Chilling Grasp"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponimpactdamagemodbeginner": {
    "value": "Disruptor"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponpuncturedepthmodbeginner": {
    "value": "Seeking Force"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponreloadspeedmodbeginner": {
    "value": "Tactical Pump"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponshotgunfactiondamagecorpusbeginner": {
    "value": "Cleanse Corpus"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponshotgunfactiondamagegrineerbeginner": {
    "value": "Cleanse Grineer"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponshotgunfactiondamageinfestedbeginner": {
    "value": "Cleanse Infested"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponslashdamagemodbeginner": {
    "value": "Shredder"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weaponstunchancemodbeginner": {
    "value": "Shotgun Savvy"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/beginner/weapontoxindamagemodbeginner": {
    "value": "Contagious Spread"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/acceleratedblastmod": {
    "value": "Accelerated Blast"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/blazemod": {
    "value": "Blaze"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/colddmgreloadspeedmod": {
    "value": "Chilling Reload"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/corruptedaccuracyfirerateshotgun": {
    "value": "Tainted Shell"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/corruptedcritchancefirerateshotgun": {
    "value": "Critical Deceleration"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/corrupteddamageaccuracyshotgun": {
    "value": "Vicious Spread"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/corruptedfireratedamageshotgun": {
    "value": "Frail Momentum"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/corruptedmaxclipreloadspeedshotgun": {
    "value": "Burdened Magazine"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/electeventshotgunmod": {
    "value": "Shell Shock"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/fireeventshotgunmod": {
    "value": "Scattering Inferno"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/iceeventshotgunmod": {
    "value": "Frigid Blast"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/poisoneventshotgunmod": {
    "value": "Toxic Barrage"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/dualstat/reloadspeedpunchthroughmod": {
    "value": "Seeking Fury"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponammomaxmodexpert": {
    "value": "Shell Compression"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponarmorpiercingdamagemodexpert": {
    "value": "Flechette"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponclipmaxmodexpert": {
    "value": "Ammo Stock"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponcritchancemodexpert": {
    "value": "Blunderbuss"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponcritdamagemodexpert": {
    "value": "Primed Ravage"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weapondamageamountmodexpert": {
    "value": "Primed Point Blank"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponelectricitydamagemodexpert": {
    "value": "Primed Charged Shell"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponfiredamagemodexpert": {
    "value": "Primed Incendiary Coat"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponfireiterationsmodexpert": {
    "value": "Primed Hells Chamber"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponfireratemodexpert": {
    "value": "Primed Shotgun Spazz"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponfreezedamagemodexpert": {
    "value": "Primed Chilling Grasp"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponimpactdamagemodexpert": {
    "value": "Primed Disruptor"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponpuncturedepthmodexpert": {
    "value": "Primed Seeking Force"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponreloadspeedmodexpert": {
    "value": "Primed Tactical Pump"
  },
  "/Lotus/StoreItems/Upgrades/Mods/Shotgun/Expert/WeaponShotgunConvertAmmoModExpert": {
    "value": "Primed Shotgun Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponshotgunfactiondamagecorpusexpert": {
    "value": "Primed Cleanse Corpus"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponshotgunfactiondamagecorruptedexpert": {
    "value": "Primed Cleanse Corrupted"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponshotgunfactiondamagegrineerexpert": {
    "value": "Primed Cleanse Grineer"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponshotgunfactiondamageinfestedexpert": {
    "value": "Primed Cleanse Infested"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponslashdamagemodexpert": {
    "value": "Primed Shredder"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weaponstunchancemodexpert": {
    "value": "Primed Shotgun Savvy"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/expert/weapontoxindamagemodexpert": {
    "value": "Primed Contagious Spread"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/intermediate/weaponshotgunconvertammomodintermediate": {
    "value": "Shotgun Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponammomaxmod": {
    "value": "Shell Compression"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponarmorpiercingdamagemod": {
    "value": "Flechette"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponclipmaxmod": {
    "value": "Ammo Stock"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponcritchancemod": {
    "value": "Blunderbuss"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponcritdamagemod": {
    "value": "Ravage"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weapondamageamountmod": {
    "value": "Point Blank"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponelectricitydamagemod": {
    "value": "Charged Shell"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponeventpuncturedamagemod": {
    "value": "Breach Loader"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponeventshotgunimpactdamagemod": {
    "value": "Full Contact"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponeventslashdamagemod": {
    "value": "Sweeping Serration"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponfiredamagemod": {
    "value": "Incendiary Coat"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponfireiterationsmod": {
    "value": "Hells Chamber"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponfireratemod": {
    "value": "Shotgun Spazz"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponfreezedamagemod": {
    "value": "Chilling Grasp"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponimpactdamagemod": {
    "value": "Disruptor"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponproctimemod": {
    "value": "Lingering Torment"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponprojectilespeedmod": {
    "value": "Fatal Acceleration"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponpuncturedepthmod": {
    "value": "Seeking Force"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponreloadspeedmod": {
    "value": "Tactical Pump"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponshotgunconvertammomod": {
    "value": "Shotgun Ammo Mutation"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponshotgunfactiondamagecorpus": {
    "value": "Cleanse Corpus"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponshotgunfactiondamagegrineer": {
    "value": "Cleanse Grineer"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponshotgunfactiondamageinfested": {
    "value": "Cleanse Infested"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponslashdamagemod": {
    "value": "Shredder"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weaponstunchancemod": {
    "value": "Shotgun Savvy"
  },
  "/lotus/storeitems/upgrades/mods/shotgun/weapontoxindamagemod": {
    "value": "Contagious Spread"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/acridmod": {
    "value": "Toxic Sequence"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/ballisticamod": {
    "value": "Soaring Truth"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/boltomod": {
    "value": "Entropy Spike"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/burstonprimemod": {
    "value": "Gilded Truth"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/darkdaggermod": {
    "value": "Gleaming Blight"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/dualcleaversmod": {
    "value": "Justice Blades"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/embolistmod": {
    "value": "Eroding Blight"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/furismod": {
    "value": "Winds Of Purity"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/grinlokmod": {
    "value": "Deadly Sequence"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/hekmod": {
    "value": "Scattered Justice"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/jawswordmod": {
    "value": "Blade Of Truth"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/kestrelmod": {
    "value": "Entropy Flight"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/miremod": {
    "value": "Toxic Blight"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/skanamod": {
    "value": "Bright Purity"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/sobekmod": {
    "value": "Shattering Justice"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/spectramod": {
    "value": "Sequence Burn"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/supramod": {
    "value": "Entropy Burst"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/vipermod": {
    "value": "Stinging Truth"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/vulkarmod": {
    "value": "Lasting Purity"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/ashmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/bansheemod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/embermod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/excaliburmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/frostmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/hydroidmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/lokimod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/magmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/miragemod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/nekrosmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/novamod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/nyxmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/oberonmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/rhinomod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/sarynmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/trinitymod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/valkyrmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/vaubanmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/voltmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/syndicate/warframes/zephyrmod": {
    "value": "[Placeholder] Tbd"
  },
  "/lotus/storeitems/upgrades/mods/transmutecores/attacktransmutecore": {
    "value": "Madurai Transmute Core"
  },
  "/lotus/storeitems/upgrades/mods/transmutecores/basetransmutecore": {
    "value": "Transmute Core"
  },
  "/lotus/storeitems/upgrades/mods/transmutecores/defensetransmutecore": {
    "value": "Vazarin Transmute Core"
  },
  "/lotus/storeitems/upgrades/mods/transmutecores/tactictransmutecore": {
    "value": "Naramon Transmute Core"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarabilitydurationmod": {
    "value": "Continuity"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarabilityefficiencymod": {
    "value": "Streamline"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarabilityrangemod": {
    "value": "Stretch"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarabilitystrengthmod": {
    "value": "Intensify"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatararmourmod": {
    "value": "Steel Fiber"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarautoparrymod": {
    "value": "Reflex Guard"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarbleedoutdelaymod": {
    "value": "Undying Will"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarcastingspeedmod": {
    "value": "Natural Talent"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarchancetoloot": {
    "value": "Master Thief"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamagereductioninair": {
    "value": "Aviator"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistanceelectricity": {
    "value": "Lightning Rod"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistancefire": {
    "value": "Flame Repellent"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistanceice": {
    "value": "Insulation"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistanceknockdown": {
    "value": "Shock Absorbers"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistancelaser": {
    "value": "Diamond Skin"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistancepoison": {
    "value": "Antitoxin"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamageresistancestun": {
    "value": "Resilient Focus"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatardamagetoenergymod": {
    "value": "Rage"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarenemyradarmod": {
    "value": "Enemy Sense"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarfallingimpactmod": {
    "value": "Heavy Impact"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatargroundfiredmgmod": {
    "value": "Provoked"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarhealthmaxmod": {
    "value": "Vitality"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarknockdownrecoverymod": {
    "value": "Handspring"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarknockdownresistancemod": {
    "value": "Sure Footed"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarlootradarmod": {
    "value": "Thiefs Wit"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarmissionspecificresistanceice": {
    "value": "Warm Coat"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarparrymeleemod": {
    "value": "Parry"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarparryreflectmod": {
    "value": "Reflection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarpickupbonusmod": {
    "value": "Equilibrium"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarpowermaxmod": {
    "value": "Flow"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarpowertohealthondeathmod": {
    "value": "Quick Thinking"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarproctimemod": {
    "value": "Rapid Resilience"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarrevengedamagemelee": {
    "value": "Retribution"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarshieldmaxmod": {
    "value": "Redirection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarshieldrechargeratemod": {
    "value": "Fast Deflection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarshieldtostaminamod": {
    "value": "Shield Flux"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarslideboostmod": {
    "value": "Maglev"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarsprintspeedmod": {
    "value": "Rush"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarstaminacostmultipliermod": {
    "value": "Acrobat"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarstaminamaxmod": {
    "value": "Marathon"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatarstaminarechargeratemod": {
    "value": "Quick Rest"
  },
  "/lotus/storeitems/upgrades/mods/warframe/avatartimelimitincreasemod": {
    "value": "Intruder"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarabilitydurationmodbeginner": {
    "value": "Continuity"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarabilityefficiencymodbeginner": {
    "value": "Streamline"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarabilityrangemodbeginner": {
    "value": "Stretch"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarabilitystrengthmodbeginner": {
    "value": "Intensify"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatararmourmodbeginner": {
    "value": "Steel Fiber"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarautoparrymodbeginner": {
    "value": "Reflex Guard"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatardamageresistanceelectricitybeginner": {
    "value": "Lightning Rod"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatardamageresistancefirebeginner": {
    "value": "Flame Repellent"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatardamageresistanceicebeginner": {
    "value": "Insulation"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatardamageresistancelaserbeginner": {
    "value": "Diamond Skin"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatardamageresistancepoisonbeginner": {
    "value": "Antitoxin"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarenemyradarmodbeginner": {
    "value": "Enemy Sense"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarfallingimpactmodbeginner": {
    "value": "Heavy Impact"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatargroundfiredmgmodbeginner": {
    "value": "Provoked"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarhealthmaxmodbeginner": {
    "value": "Vitality"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarlootradarmodbeginner": {
    "value": "Thiefs Wit"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarparrymeleemodbeginner": {
    "value": "Parry"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarparryreflectmodbeginner": {
    "value": "Reflection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarpickupbonusmodbeginner": {
    "value": "Equilibrium"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarpowermaxmodbeginner": {
    "value": "Flow"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarpowertohealthondeathmodbeginner": {
    "value": "Quick Thinking"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarshieldmaxmodbeginner": {
    "value": "Redirection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarshieldrechargeratemodbeginner": {
    "value": "Fast Deflection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarslideboostmodbeginner": {
    "value": "Maglev"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarsprintspeedmodbeginner": {
    "value": "Rush"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarstaminacostmultipliermodbeginner": {
    "value": "Acrobat"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarstaminamaxmodbeginner": {
    "value": "Marathon"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatarstaminarechargeratemodbeginner": {
    "value": "Quick Rest"
  },
  "/lotus/storeitems/upgrades/mods/warframe/beginner/avatartimelimitincreasemodbeginner": {
    "value": "Intruder"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/constitutionmod": {
    "value": "Constitution"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/corrupteddurationrangewarframe": {
    "value": "Narrow Minded"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/corruptedefficiencydurationwarframe": {
    "value": "Fleeting Expertise"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/corruptedpowerefficiencywarframe": {
    "value": "Blind Rage"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/corruptedpowerstrengthpowerdurationwarframe": {
    "value": "Transient Fortitude"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/corruptedrangepowerwarframe": {
    "value": "Overextended"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/fortitudemod": {
    "value": "Fortitude"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/holsterspeedslideboostmod": {
    "value": "Streamlined Form"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/runspeedarmormod": {
    "value": "Armored Agility"
  },
  "/lotus/storeitems/upgrades/mods/warframe/dualstat/vigormod": {
    "value": "Vigor"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarabilitydurationmodexpert": {
    "value": "Primed Continuity"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarabilityefficiencymodexpert": {
    "value": "Primed Streamline"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarabilityrangemodexpert": {
    "value": "Stretch"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarabilitystrengthmodexpert": {
    "value": "Intensify"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarbleedoutdelaymodexpert": {
    "value": "Undying Will"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarcastingspeedmodexpert": {
    "value": "Natural Talent"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarchancetolootexpert": {
    "value": "Master Thief"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamagereductioninairexpert": {
    "value": "Aviator"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamageresistanceelectricityexpert": {
    "value": "Lightning Rod"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamageresistancefireexpert": {
    "value": "Flame Repellent"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamageresistanceiceexpert": {
    "value": "Insulation"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamageresistancelaserexpert": {
    "value": "Diamond Skin"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamageresistancepoisonexpert": {
    "value": "Antitoxin"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatardamagetoenergymodexpert": {
    "value": "Rage"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarenemyradarmodexpert": {
    "value": "Enemy Sense"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarfallingimpactmodexpert": {
    "value": "Heavy Impact"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarknockdownrecoverymodexpert": {
    "value": "Handspring"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarknockdownresistancemodexpert": {
    "value": "Sure Footed"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarlootradarmodexpert": {
    "value": "Thiefs Wit"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarmissionspecificresistanceiceexpert": {
    "value": "Warm Coat"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarparrymeleemodexpert": {
    "value": "Parry"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarparryreflectmodexpert": {
    "value": "Reflection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarpowermaxmodexpert": {
    "value": "Primed Flow"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarpowertohealthondeathmodexpert": {
    "value": "Quick Thinking"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarrevengedamagemeleeexpert": {
    "value": "Retribution"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarshieldrechargeratemodexpert": {
    "value": "Fast Deflection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarshieldtostaminamodexpert": {
    "value": "Shield Flux"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarslideboostmodexpert": {
    "value": "Maglev"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarsprintspeedmodexpert": {
    "value": "Rush"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarstaminacostmultipliermodexpert": {
    "value": "Acrobat"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarstaminamaxmodexpert": {
    "value": "Marathon"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatarstaminarechargeratemodexpert": {
    "value": "Quick Rest"
  },
  "/lotus/storeitems/upgrades/mods/warframe/expert/avatartimelimitincreasemodexpert": {
    "value": "Intruder"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatararmourmodintermediate": {
    "value": "Steel Fiber"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarautoparrymodintermediate": {
    "value": "Reflex Guard"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarcastingspeedmodintermediate": {
    "value": "Natural Talent"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarchancetolootintermediate": {
    "value": "Master Thief"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatardamagereductioninairintermediate": {
    "value": "Aviator"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatardamageresistanceknockdownintermediate": {
    "value": "Shock Absorbers"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatardamagetoenergymodintermediate": {
    "value": "Rage"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatargroundfiredmgmodintermediate": {
    "value": "Provoked"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarhealthmaxmodintermediate": {
    "value": "Vitality"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarknockdownrecoverymodintermediate": {
    "value": "Handspring"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarknockdownresistancemodintermediate": {
    "value": "Sure Footed"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarmissionspecificresistanceiceintermediate": {
    "value": "Warm Coat"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarparrymeleemodintermediate": {
    "value": "Parry"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarpickupbonusmodintermediate": {
    "value": "Equilibrium"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarrevengedamagemeleeintermediate": {
    "value": "Retribution"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarshieldmaxmodintermediate": {
    "value": "Redirection"
  },
  "/lotus/storeitems/upgrades/mods/warframe/intermediate/avatarshieldtostaminamodintermediate": {
    "value": "Shield Flux"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/antialthelmet": {
    "value": "Arcane Flux Helmet"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/antialthelmetstatless": {
    "value": "Nova Flux Helmet"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/antihelmet": {
    "value": "Nova Helmet"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/antimatteragileanims": {
    "value": "Nova Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/antimatternobleanims": {
    "value": "Nova Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/novaalternateskin": {
    "value": "Nova Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/novaprimehelmet": {
    "value": "Nova Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/novaquantumhelmet": {
    "value": "Quantum Nova Helmet"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/novaslipstreamhelmet": {
    "value": "Nova Slipstream Helmet"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/unlockantimatteragile": {
    "value": "Nova Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/antimatter/unlockantimatternoble": {
    "value": "Nova Noble Animation Set"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Armor/BaroArmour/BaroArmourA": {
    "value": "Ki'teer Shoulder Plates"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Armor/BaroArmour/BaroArmourC": {
    "value": "Ki'teer Chest Plate"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Armor/BaroArmour/BaroArmourL": {
    "value": "Ki'teer Leg Plates"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Armor/BaroArmourThree/BaroArmourThreeA": {
    "value": "Ki'Teer Greth Shoulder Plates"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Armor/BaroArmourThree/BaroArmourThreeC": {
    "value": "Ki'Teer Greth Chest Plate"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Armor/BaroArmourThree/BaroArmourThreeL": {
    "value": "Ki'Teer Greth Leg Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/baroarmourtwo/baroarmourtwoa": {
    "value": "Ki'teer Foros Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/baroarmourtwo/baroarmourtwoc": {
    "value": "Ki'teer Foros Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/baroarmourtwo/baroarmourtwol": {
    "value": "Ki'teer Foros Leg Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/corpusfencer/crpfncalarmor": {
    "value": "Dendra Shoulder Guard"
  },
  "/lotus/storeitems/upgrades/skins/armor/corpusfencer/crpfncararmor": {
    "value": "Dendra Shoulder Guard"
  },
  "/lotus/storeitems/upgrades/skins/armor/corpusfencer/crpfncllarmor": {
    "value": "Dendra Leg Guard"
  },
  "/lotus/storeitems/upgrades/skins/armor/corpusfencer/crpfnclrarmor": {
    "value": "Dendra Leg Guard"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafurisaarmor": {
    "value": "Prisma Avia Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafurisalarmor": {
    "value": "Prisma Avia Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafurisararmor": {
    "value": "Prisma Avia Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafuriscarmor": {
    "value": "Prisma Avia Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafurislarmor": {
    "value": "Prisma Avia Ankle Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafurisllarmor": {
    "value": "Prisma Avia Leg Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/furisarmor/prismafurislrarmor": {
    "value": "Prisma Avia Leg Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/grineerturbinesarmleftarmor": {
    "value": "Harkonar Spaulders"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/grineerturbinesarmrightarmor": {
    "value": "Harkonar Spaulders"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/grineerturbineschestarmor": {
    "value": "Harkonar Chestguard"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/grineerturbineslegleftarmor": {
    "value": "Harkonar Leg Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/grineerturbineslegrightarmor": {
    "value": "Harkonar Leg Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/wraithturbinesarmarmor": {
    "value": "Harkonar Wraith Arm Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/wraithturbinesarmleftarmor": {
    "value": "Harkonar Wraith Left Spaulders"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/wraithturbinesarmrightarmor": {
    "value": "Harkonar Wraith Right Spaulders"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/wraithturbineschestarmor": {
    "value": "Harkonar Wraith Chest Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/grineerturbines/wraithturbineslegarmor": {
    "value": "Harkonar Wraith Leg Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/halloween2014wings/halloween2014armleftarmor": {
    "value": "Naberus"
  },
  "/lotus/storeitems/upgrades/skins/armor/halloween2014wings/halloween2014armrightarmor": {
    "value": "Naberus"
  },
  "/lotus/storeitems/upgrades/skins/armor/halloween2014wings/prismanaberusarmarmor": {
    "value": "Prisma Naberus"
  },
  "/lotus/storeitems/upgrades/skins/armor/infestedfins/infestedfinsarmleftarmor": {
    "value": "Iliac Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/infestedfins/infestedfinsarmrightarmor": {
    "value": "Iliac Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/infestedfins/infestedfinschestarmor": {
    "value": "Iliac Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/infestedfins/infestedfinslegleftarmor": {
    "value": "Iliac Ankle Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/infestedfins/infestedfinslegrightarmor": {
    "value": "Iliac Ankle Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/necraarmor/necraarmora": {
    "value": "Mulciber Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/necraarmor/necraarmorc": {
    "value": "Mulciber Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/necraarmor/necraarmorl": {
    "value": "Mulciber Leg Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesetone/primesetonearmleftarmor": {
    "value": "Targis Prime Arm Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesetone/primesetonearmrightarmor": {
    "value": "Targis Prime Arm Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesetone/primesetonechestarmor": {
    "value": "Targis Prime Cuirass"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesetone/primesetonelegleftarmor": {
    "value": "Targis Prime Greaves"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesetone/primesetonelegrightarmor": {
    "value": "Targis Prime Greaves"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesettwo/primesettwoarmleftarmor": {
    "value": "Edo Prime Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesettwo/primesettwoarmrightarmor": {
    "value": "Edo Prime Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesettwo/primesettwochestarmor": {
    "value": "Edo Prime Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesettwo/primesettwolegleftarmor": {
    "value": "Edo Prime Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/primesettwo/primesettwolegrightarmor": {
    "value": "Edo Prime Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setonearmleftarmor": {
    "value": "Eos Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setonearmrightarmor": {
    "value": "Eos Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setonechestarmor": {
    "value": "Eos Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/setonelegleftarmor": {
    "value": "Eos Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setonelegrightarmor": {
    "value": "Eos Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/setthreearmleftarmor": {
    "value": "Daedalus Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/setthreearmrightarmor": {
    "value": "Daedalus Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/setthreechestarmor": {
    "value": "Daedalus Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/setthreelegleftarmor": {
    "value": "Daedalus Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/setthreelegrightarmor": {
    "value": "Daedalus Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/vtsetthreearmleftarmor": {
    "value": "Left Prisma Daedalus Shoulder Guard"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/vtsetthreearmrightarmor": {
    "value": "Right Prisma Daedalus Shoulder Guard"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/vtsetthreechestarmor": {
    "value": "Prisma Daedalus Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/vtsetthreelegleftarmor": {
    "value": "Left Prisma Daedalus Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/setthreewinged/vtsetthreelegrightarmor": {
    "value": "Right Prisma Daedalus Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/settwoarmleftarmor": {
    "value": "Edo Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/settwoarmrightarmor": {
    "value": "Edo Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/settwochestarmor": {
    "value": "Edo Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/settwolegleftarmor": {
    "value": "Edo Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/settwolegrightarmor": {
    "value": "Edo Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/vtsettwoarmleftarmor": {
    "value": "Left Prisma Edo Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/vtsettwoarmrightarmor": {
    "value": "Right Prisma Edo Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/vtsettwochestarmor": {
    "value": "Prisma Edo Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/vtsettwolegleftarmor": {
    "value": "Left Prisma Edo Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/settwosamurai/vtsettwolegrightarmor": {
    "value": "Right Prisma Edo Knee Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/tnlatronarmor/tnlatronarmarmorprisma": {
    "value": "Prisma Latron Shoulder Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/tnlatronarmor/tnlatronchestarmorprisma": {
    "value": "Prisma Latron Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/tnlatronarmor/tnlatronlegarmorprisma": {
    "value": "Prisma Latron Leg Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/vteos/vteosalarmor": {
    "value": "Left Eos Prime Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/vteos/vteosararmor": {
    "value": "Right Eos Prime Shoulder Plates"
  },
  "/lotus/storeitems/upgrades/skins/armor/vteos/vteoschestarmor": {
    "value": "Eos Prime Chest Plate"
  },
  "/lotus/storeitems/upgrades/skins/armor/vteos/vteosllarmor": {
    "value": "Left Eos Prime Spurs"
  },
  "/lotus/storeitems/upgrades/skins/armor/vteos/vteoslrarmor": {
    "value": "Right Eos Prime Spurs"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/bansheearmleftarmor": {
    "value": "Banshee Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/emberprimearmleftarmor": {
    "value": "Ember Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/emberprimearmrightarmor": {
    "value": "Ember Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/frostarmleftarmor": {
    "value": "Frost Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/frostarmrightarmor": {
    "value": "Frost Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/frostprimearmleftarmor": {
    "value": "Frost Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/frostprimearmrightarmor": {
    "value": "Frost Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/magprimearmleftarmor": {
    "value": "Mag Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/magprimearmrightarmor": {
    "value": "Mag Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/oberonarmleftarmor": {
    "value": "Oberon Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/oberonarmrightarmor": {
    "value": "Oberon Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/voltarmleftarmor": {
    "value": "Volt Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/voltarmrightarmor": {
    "value": "Volt Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/voltprimearmleftarmor": {
    "value": "Volt Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/armor/warframedefaults/voltprimearmrightarmor": {
    "value": "Volt Prime Armor"
  },
  "/lotus/storeitems/upgrades/skins/arrows/alternatearrowa": {
    "value": "Cattaril Arrow Skin"
  },
  "/lotus/storeitems/upgrades/skins/arrows/alternatearrowb": {
    "value": "Sylus Arrow Skin"
  },
  "/lotus/storeitems/upgrades/skins/arrows/alternatearrowc": {
    "value": "Meer Arrow Skin"
  },
  "/lotus/storeitems/upgrades/skins/asp/aspagileanims": {
    "value": "Saryn Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/asp/aspalthelmet": {
    "value": "Arcane Hemlock Helmet"
  },
  "/lotus/storeitems/upgrades/skins/asp/aspalthelmetb": {
    "value": "Arcane Chlora Helmet"
  },
  "/lotus/storeitems/upgrades/skins/asp/aspalthelmetbstatless": {
    "value": "Saryn Chlora Helmet"
  },
  "/lotus/storeitems/upgrades/skins/asp/aspalthelmetstatless": {
    "value": "Saryn Hemlock Helmet"
  },
  "/lotus/storeitems/upgrades/skins/asp/asphelmet": {
    "value": "Saryn Helmet"
  },
  "/lotus/storeitems/upgrades/skins/asp/aspnobleanims": {
    "value": "Saryn Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/asp/sarynalternateskin": {
    "value": "Saryn Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/asp/unlockaspagile": {
    "value": "Saryn Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/asp/unlockaspnoble": {
    "value": "Saryn Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/axe/daggeraxe": {
    "value": "Scindo Dagger-axe Skin"
  },
  "/lotus/storeitems/upgrades/skins/berserker/berserkeragileanims": {
    "value": "Valkyr Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/berserker/berserkerbastethelmet": {
    "value": "Valkyr Bastet Helmet"
  },
  "/lotus/storeitems/upgrades/skins/berserker/berserkerdangles": {
    "value": "Valkyrs Bonds"
  },
  "/lotus/storeitems/upgrades/skins/berserker/berserkerhelmet": {
    "value": "Valkyr Helmet"
  },
  "/lotus/storeitems/upgrades/skins/berserker/berserkernobleanims": {
    "value": "Valkyr Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/berserker/unlockberserkeragile": {
    "value": "Valkyr Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/berserker/unlockberserkernoble": {
    "value": "Valkyr Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/berserker/valkyraltbhelmet": {
    "value": "Valkyr Kara Helmet"
  },
  "/lotus/storeitems/upgrades/skins/berserker/valkyralternateskin": {
    "value": "Valkyr Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/brassandgold/brassandgoldakbolto": {
    "value": "Akbolto Ormolu Skin"
  },
  "/lotus/storeitems/upgrades/skins/brassandgold/brassandgoldbolto": {
    "value": "Bolto Ormolu Skin"
  },
  "/lotus/storeitems/upgrades/skins/brassandgold/brassandgolddaikyu": {
    "value": "Daikyu Ormolu Skin"
  },
  "/lotus/storeitems/upgrades/skins/brassandgold/brassandgoldtipedo": {
    "value": "Tipedo Ormolu Skin"
  },
  "/lotus/storeitems/upgrades/skins/camo/akimbovipercamo": {
    "value": "Desert-camo Twin Vipers"
  },
  "/lotus/storeitems/upgrades/skins/camo/desertdirigaskin": {
    "value": "Driga Desert-Camo Skin"
  },
  "/lotus/storeitems/upgrades/skins/camo/gorgoncamo": {
    "value": "Desert-camo Gorgon"
  },
  "/lotus/storeitems/upgrades/skins/camo/grakatacamo": {
    "value": "Desert-camo Grakata"
  },
  "/lotus/storeitems/upgrades/skins/camo/grnakimbopistolscamo": {
    "value": "Desert-camo Gremlins"
  },
  "/lotus/storeitems/upgrades/skins/camo/krackencamo": {
    "value": "Desert-camo Kraken"
  },
  "/lotus/storeitems/upgrades/skins/camo/sobekcamo": {
    "value": "Desert-camo Sobek"
  },
  "/lotus/storeitems/upgrades/skins/camo/vipercamo": {
    "value": "Desert-camo Viper"
  },
  "/lotus/storeitems/upgrades/skins/camo/vulkarcamo": {
    "value": "Desert-camo Vulkar"
  },
  "/lotus/storeitems/upgrades/skins/catbrows/armor/catbrowarmorhalloweena": {
    "value": "Wysar Day Of The Dead Kavat Armor"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Catbrows/Armor/CatbrowArmorVoidTraderA": {
    "value": "Ki'teer Kavat Armor"
  },
  "/lotus/storeitems/upgrades/skins/clan/aggressioneventcorpusbadgeitem": {
    "value": "Gradivus: Sacrifice Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/aggressioneventgrineerbadgeitem": {
    "value": "Gradivus: Loyalty Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/allianceemblemitem": {
    "value": "Alliance Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/amalgameventbadgeitem": {
    "value": "Hostile Mergers Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/barokavatbadgeitem": {
    "value": "Glaring Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/barokubrowbadgeitem": {
    "value": "Pack Leader Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/baroquantumbadgeitem": {
    "value": "Ki'teer Sekhara"
  },
  "/lotus/storeitems/upgrades/skins/clan/baseeventbadgeitem": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/upgrades/skins/clan/bountyhunterbadgeitem": {
    "value": "Stratos Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/clanemblemitem": {
    "value": "Clan Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/corpusvoidbadgeitem": {
    "value": "Arid Fear Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/excavationevenetbadgeitem": {
    "value": "Cryotic Front Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/falseprofiteventbadgeitem": {
    "value": "False Profit Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/foundersbadgediscipleitem": {
    "value": "Disciples Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/foundersbadgegrandmasteritem": {
    "value": "Grand Master Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/foundersbadgehunteritem": {
    "value": "Hunters Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/foundersbadgemasteritem": {
    "value": "Masters Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/grnsealabeventbadgeitem": {
    "value": "Tubemen Of Regor Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/hivesabotageeventbadgeitem": {
    "value": "Breeding Grounds Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/infestationeventemblemitem": {
    "value": "Emblem Of The Hunt"
  },
  "/lotus/storeitems/upgrades/skins/clan/inftacalertdiseasedancientbadgeitem": {
    "value": "Brood Mother Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/inftacalertnanitemoaancientbadgeitem": {
    "value": "Swarm-mutalist Moa Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/inftacalertpussancientbadgeitem": {
    "value": "Boiler Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/inftacalertslowbombmoaancientbadgeitem": {
    "value": "Tar-mutalist Moa Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/jungleeventbadgeitem": {
    "value": "Cicero Crisis Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/leaderbadgeghostitem": {
    "value": "Ghost Leader Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/leaderbadgemoonitem": {
    "value": "Moon Leader Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/leaderbadgemountainitem": {
    "value": "Mountain Leader Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/leaderbadgeshadowitem": {
    "value": "Shadow Leader Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/leaderbadgestormitem": {
    "value": "Storm Leader Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/lotusguidebadgeitem": {
    "value": "Tenno Mentor Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/mutalistincursionsbadgeitem": {
    "value": "Mutalist Incursions Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/nightmaresevantihalobadgeitem": {
    "value": "Aseron Sekhara"
  },
  "/lotus/storeitems/upgrades/skins/clan/orbbadgeitem": {
    "value": "Buried Debts Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/orokinsabotagebadgeitem": {
    "value": "Gate Crash Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/prismalotusemblem": {
    "value": "Prisma Lotus Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/referralbadgetieraitem": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/upgrades/skins/clan/referralbadgetierbitem": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/upgrades/skins/clan/referralbadgetiercitem": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/upgrades/skins/clan/referralbadgetierditem": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/upgrades/skins/clan/referralbadgetiereitem": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/upgrades/skins/clan/rescueeventbadgeitem": {
    "value": "Specters Of Liberty Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/scarletspear/scarletspearoperationiemblem": {
    "value": "Scarlet Spear Operations I Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/scarletspear/scarletspearoperationiiemblem": {
    "value": "Scarlet Spear Operations II Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/scarletspear/scarletspearoperationiiiemblem": {
    "value": "Scarlet Spear Operations III Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/sevantihalobadgeitem": {
    "value": "Sevati Sekhara"
  },
  "/lotus/storeitems/upgrades/skins/clan/shipyardseventbadgeitem": {
    "value": "Tethras Doom Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/shipyardseventquantumbadgeitem": {
    "value": "Tethras Doom Quantum Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/skullbadgebronzeitem": {
    "value": "Bronze Skull Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/skullbadgegolditem": {
    "value": "Gold Skull Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/skullbadgesilveritem": {
    "value": "Silver Skull Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/slingstone2emblemitem": {
    "value": "Eyes Of Blight Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/slingstoneemblemitem": {
    "value": "Sling Stone Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/survivaleventbadgeitem": {
    "value": "Survival Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/translatorbadgeitem": {
    "value": "Tenno Operative Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clan/wikiabadgeitem": {
    "value": "Tenno Chronicler Emblem"
  },
  "/lotus/storeitems/upgrades/skins/clothtests/clothtesthelmet": {
    "value": "Mesa Helmet"
  },
  "/lotus/storeitems/upgrades/skins/clothtests/necrodanglesskelcloth": {
    "value": "Mortos Binds"
  },
  "/lotus/storeitems/upgrades/skins/contests/longguns/vectissharpshooter": {
    "value": "Sharpshooter Vectis"
  },
  "/lotus/storeitems/upgrades/skins/contests/longguns/vectissilferer": {
    "value": "Silferer Vectis"
  },
  "/lotus/storeitems/upgrades/skins/contests/melee/dualzorencombustion": {
    "value": "Combustion Dual Zoren"
  },
  "/lotus/storeitems/upgrades/skins/contests/melee/dualzorenkuberus": {
    "value": "Kuberus Dual Zoren"
  },
  "/lotus/storeitems/upgrades/skins/contests/melee/scindocombustion": {
    "value": "Combustion Scindo"
  },
  "/lotus/storeitems/upgrades/skins/contests/melee/scindokuberus": {
    "value": "Kuberus Scindo"
  },
  "/lotus/storeitems/upgrades/skins/contests/pistols/akmagnusdakila": {
    "value": "Dakila Akmagnus"
  },
  "/lotus/storeitems/upgrades/skins/contests/pistols/akmagnushivelight": {
    "value": "Hivelight Akmagnus"
  },
  "/lotus/storeitems/upgrades/skins/contests/pistols/magnusdakila": {
    "value": "Dakila Magnus"
  },
  "/lotus/storeitems/upgrades/skins/contests/pistols/magnushivelight": {
    "value": "Hivelight Magnus"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/cowgirlagileanims": {
    "value": "Mesa Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/cowgirlalthelmet": {
    "value": "Mesa Longhorn Helmet"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/cowgirlhelmet": {
    "value": "Mesa Helmet"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/cowgirlnobleanims": {
    "value": "Mesa Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/mesaaltbhelmet": {
    "value": "Mesa Ovis Helmet"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/mesaimmortallskin": {
    "value": "Mesa Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/unlockcowgirlagile": {
    "value": "Mesa Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/cowgirl/unlockcowgirlnoble": {
    "value": "Mesa Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/bratondazzlecamo": {
    "value": "Shock Camo Braton"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/cestradazzlecamo": {
    "value": "Shock Camo Cestra"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/deradazzlecamo": {
    "value": "Shock Camo Dera"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/detrondazzlecamo": {
    "value": "Shock Camo Detron"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/dualcestradazzlecamo": {
    "value": "Shock Camo Dual Cestra"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/fluxrifledazzlecamo": {
    "value": "Shock Camo Flux Rifle"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/lankadazzlecamo": {
    "value": "Shock Camo Lanka"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/lectadazzlecamo": {
    "value": "Shock Camo Lecta"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/obexdazzlecamo": {
    "value": "Shock Camo Obex"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/pentadazzlecamo": {
    "value": "Shock Camo Penta"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/provadazzlecamo": {
    "value": "Shock Camo Prova"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/snipetrondazzlecamo": {
    "value": "Shock Camo Snipetron"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/spectradazzlecamo": {
    "value": "Shock Camo Spectra"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/supradazzlecamo": {
    "value": "Shock Camo Supra"
  },
  "/lotus/storeitems/upgrades/skins/dazzle/tetradazzlecamo": {
    "value": "Shock Camo Tetra"
  },
  "/lotus/storeitems/upgrades/skins/decree/bansheealternateskin": {
    "value": "Banshee Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreeagileanims": {
    "value": "Banshee Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreealthelmet": {
    "value": "Arcane Reverb Helmet"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreealthelmetb": {
    "value": "Arcane Chorus Helmet"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreealthelmetbstatless": {
    "value": "Banshee Chorus Helmet"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreealthelmetstatless": {
    "value": "Banshee Reverb Helmet"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreehelmet": {
    "value": "Banshee Helmet"
  },
  "/lotus/storeitems/upgrades/skins/decree/decreenobleanims": {
    "value": "Banshee Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/decree/unlockdecreeagile": {
    "value": "Banshee Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/decree/unlockdecreenoble": {
    "value": "Banshee Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/dragon/chromaagileanims": {
    "value": "Chroma Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/dragon/chromaaltbhelmet": {
    "value": "Chroma Amaru Helmet"
  },
  "/lotus/storeitems/upgrades/skins/dragon/chromaalternateskin": {
    "value": "Chroma Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/dragon/chromanobleanims": {
    "value": "Chroma Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/dragon/dragonalthelmet": {
    "value": "Chroma Drac Helmet"
  },
  "/lotus/storeitems/upgrades/skins/dragon/dragonhelmet": {
    "value": "Chroma Helmet"
  },
  "/lotus/storeitems/upgrades/skins/dragon/unlockchromaagile": {
    "value": "Chroma Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/dragon/unlockchromanoble": {
    "value": "Chroma Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/dualaxe/daggeraxe": {
    "value": "Dual Zoren Dagger-axe Skin"
  },
  "/lotus/storeitems/upgrades/skins/effects/baroephemeraa": {
    "value": "Ki'teer Ephemera"
  },
  "/lotus/storeitems/upgrades/skins/effects/batsephemera": {
    "value": "Naberus Ephemera"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberagileanims": {
    "value": "Ember Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberalternateskin": {
    "value": "Ember Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberhelmet": {
    "value": "Ember Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberhelmetalt": {
    "value": "Arcane Phoenix Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberhelmetaltb": {
    "value": "Arcane Backdraft Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberhelmetaltbstatless": {
    "value": "Ember Backdraft Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberhelmetaltstatless": {
    "value": "Ember Phoenix Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ember/embernobleanims": {
    "value": "Ember Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ember/emberprimehelmet": {
    "value": "Ember Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ember/unlockemberagile": {
    "value": "Ember Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ember/unlockembernoble": {
    "value": "Ember Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/events/acolytestalkermios": {
    "value": "Lacera Scorn Skin"
  },
  "/lotus/storeitems/upgrades/skins/events/archrocketcrossbowgrineer": {
    "value": "Fluctus Rahk Skin"
  },
  "/lotus/storeitems/upgrades/skins/events/blackoutorthos": {
    "value": "Orthos Phased Skin"
  },
  "/lotus/storeitems/upgrades/skins/events/bunnyears": {
    "value": "Lepus Headgear"
  },
  "/lotus/storeitems/upgrades/skins/events/glaxionpolar": {
    "value": "Glaxion Polar Skin"
  },
  "/lotus/storeitems/upgrades/skins/events/infquantainfestedaladv": {
    "value": "Paracyst Zebra Skin"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburagileanims": {
    "value": "Excalibur Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburalternateskin": {
    "value": "Excalibur Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburdexskin": {
    "value": "Excalibur Dex Skin"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburhelmet": {
    "value": "Excalibur Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburhelmetalt": {
    "value": "Arcane Avalon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburhelmetaltb": {
    "value": "Arcane Pendragon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburhelmetaltbstatless": {
    "value": "Excalibur Pendragon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburhelmetaltstatless": {
    "value": "Excalibur Avalon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburhelmetmordred": {
    "value": "Excalibur Mordred Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburnobleanims": {
    "value": "Excalibur Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburprimealabasterskin": {
    "value": "Alabaster Skin"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburprimealternateskin": {
    "value": "Excalibur Prime Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburprimehelmet": {
    "value": "Excalibur Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburprotohelmet": {
    "value": "Excalibur Proto-armor Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/excaliburprotosuit": {
    "value": "Excalibur Proto-armor Skin"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/geoffcaliburhelmet": {
    "value": "Excalibur Helmet"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/unlockexcaliburagile": {
    "value": "Excalibur Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/excalibur/unlockexcaliburnoble": {
    "value": "Excalibur Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/festivities/xmasglaxion": {
    "value": "Glaxion Festive Skin"
  },
  "/lotus/storeitems/upgrades/skins/frost/frostagileanims": {
    "value": "Frost Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/frost/frostalternateskin": {
    "value": "Frost Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/frost/frosthelmet": {
    "value": "Frost Helmet"
  },
  "/lotus/storeitems/upgrades/skins/frost/frosthelmetalt": {
    "value": "Arcane Aurora Helmet"
  },
  "/lotus/storeitems/upgrades/skins/frost/frosthelmetaltb": {
    "value": "Arcane Squall Helmet"
  },
  "/lotus/storeitems/upgrades/skins/frost/frosthelmetaltbstatless": {
    "value": "Frost Squall Helmet"
  },
  "/lotus/storeitems/upgrades/skins/frost/frosthelmetaltstatless": {
    "value": "Frost Aurora Helmet"
  },
  "/lotus/storeitems/upgrades/skins/frost/frostnobleanims": {
    "value": "Frost Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/frost/frostprimealternateskin": {
    "value": "Frost Prime Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/frost/frostprimehelmet": {
    "value": "Frost Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/frost/frostxmasskin": {
    "value": "Frost Festive Skin"
  },
  "/lotus/storeitems/upgrades/skins/frost/unlockfrostagile": {
    "value": "Frost Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/frost/unlockfrostnoble": {
    "value": "Frost Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestafuris": {
    "value": "Forest-camo Afuris"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestballistica": {
    "value": "Forest-camo Ballistica"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestboltor": {
    "value": "Forest-camo Boltor"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestbraton": {
    "value": "Forest-camo Braton"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestdethcube": {
    "value": "Forest-camo Dethcube"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestdualheatswords": {
    "value": "Forest-camo Dual Heat Swords"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestdualvastos": {
    "value": "Forest-camo Akvasto"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestdualzoren": {
    "value": "Forest-camo Dual Zoren"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestfuris": {
    "value": "Forest-camo Furis"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestheatdagger": {
    "value": "Forest-camo Heat Dagger"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestheatsword": {
    "value": "Forest-camo Heat Sword"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestorthos": {
    "value": "Forest-camo Orthos"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestparis": {
    "value": "Forest-camo Paris"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestscindo": {
    "value": "Forest-camo Scindo"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestsoma": {
    "value": "Forest-camo Soma"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestvasto": {
    "value": "Forest-camo Vasto"
  },
  "/lotus/storeitems/upgrades/skins/grineerforest/grineerforestvectis": {
    "value": "Forest-camo Vectis"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenaklato": {
    "value": "Aklato Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenakvasto": {
    "value": "Akvasto Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenamprex": {
    "value": "Amprex Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenbraton": {
    "value": "Braton Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenbuzlok": {
    "value": "Buzlok Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweendualzoren": {
    "value": "Zoren Day Of The Dead Dual Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenglaive": {
    "value": "Glaive Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenglaxion": {
    "value": "Glaxion Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweengorgon": {
    "value": "Gorgon Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweengrinlok": {
    "value": "Grinlok Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenjatkittag": {
    "value": "Kittag Day Of The Dead Jat Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenkronen": {
    "value": "Kronen Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenlato": {
    "value": "Lato Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenlatovandal": {
    "value": "Lato Vandal Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenmarelok": {
    "value": "Marelok Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweennukor": {
    "value": "Nukor Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenorthos": {
    "value": "Orthos Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenparis": {
    "value": "Paris Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenscindo": {
    "value": "Scindo Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweensobek": {
    "value": "Sobek Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweensoma": {
    "value": "Soma Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweentwingremlins": {
    "value": "Gremlins Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halloween/halloweenvasto": {
    "value": "Vasto Day Of The Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/halos/prototyperaidhalo": {
    "value": "Sevati Sekhara"
  },
  "/lotus/storeitems/upgrades/skins/hammer/grnhammer": {
    "value": "Fragor Brokk Skin"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/harlequinagileanims": {
    "value": "Mirage Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/harlequinhelmet": {
    "value": "Mirage Helmet"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/harlequinhelmetalt": {
    "value": "Mirage Harlequin Helmet"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/harlequinnobleanims": {
    "value": "Mirage Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/miragealtbhelmet": {
    "value": "Mirage Trivelin Helmet"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/miragealternateskin": {
    "value": "Mirage Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/miragexmasskin": {
    "value": "Mirage Winter Skin"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/unlockharlequinagile": {
    "value": "Mirage Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/harlequin/unlockharlequinnoble": {
    "value": "Mirage Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/heavyaxe/grnaxe": {
    "value": "Scindo Manticore Skin"
  },
  "/lotus/storeitems/upgrades/skins/hoverboard/hoverboardstickerbaroa": {
    "value": "Blue Ki'teer Safari K-Drive Scrawl"
  },
  "/lotus/storeitems/upgrades/skins/hoverboard/hoverboardstickerbarob": {
    "value": "Green Ki'teer Safari K-Drive Scrawl"
  },
  "/lotus/storeitems/upgrades/skins/hydroid/hydroidagileanims": {
    "value": "Hydroid Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/hydroid/hydroidnobleanims": {
    "value": "Hydroid Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/hydroid/unlockhydroidagile": {
    "value": "Hydroid Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/hydroid/unlockhydroidnoble": {
    "value": "Hydroid Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/iahgames/iahgamesbratonskin": {
    "value": "IAH Games Braton"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadeagileanims": {
    "value": "Nyx Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadehelmet": {
    "value": "Nyx Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadehelmetalt": {
    "value": "Arcane Menticide Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadehelmetaltb": {
    "value": "Arcane Vespa Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadehelmetaltbstatless": {
    "value": "Nyx Vespa Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadehelmetaltstatless": {
    "value": "Nyx Menticide Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/jadenobleanims": {
    "value": "Nyx Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/jade/nyxalternateskin": {
    "value": "Nyx Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/jade/nyxnemesishelmet": {
    "value": "Nyx Nemesis Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/nyxnemesissuit": {
    "value": "Nyx Nemesis Skin"
  },
  "/lotus/storeitems/upgrades/skins/jade/nyxprimehelmet": {
    "value": "Nyx Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/jade/unlockjadeagile": {
    "value": "Nyx Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/jade/unlockjadenoble": {
    "value": "Nyx Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/katanasheaths/dragonkatanasheathlightning": {
    "value": "Surt-form Gemini Nikana Sheath"
  },
  "/lotus/storeitems/upgrades/skins/katanasheaths/katanasheathbasic": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/upgrades/skins/katanasheaths/katanasheathlightning": {
    "value": "Ymir-form Gemini Nikana Sheath"
  },
  "/lotus/storeitems/upgrades/skins/kubrows/armor/kubrowarmorbaro": {
    "value": "Ki'teer Kubrow Armor"
  },
  "/lotus/storeitems/upgrades/skins/kubrows/armor/kubrowarmorprisma": {
    "value": "Prisma Rostam Kubrow Armor"
  },
  "/lotus/storeitems/upgrades/skins/liset/gyroscope/lisetgyroscopeskinprimetrader": {
    "value": "Xiphos Prisma Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/inaroslisetskin": {
    "value": "Liset Cydonia Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetblueskyskininaros": {
    "value": "Scimitar Cydonia Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetblueskyskinprimetrader": {
    "value": "Scimitar Prisma Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetinsectskininaros": {
    "value": "Mantis Cydonia Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetinsectskinprimetrader": {
    "value": "Mantis Prisma Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetskinflavouritemb": {
    "value": "Liset Hima Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetskinflavouritemc": {
    "value": "Liset Kuza Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetskinflavouritemd": {
    "value": "Liset Zikha Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetskinkaboom": {
    "value": "Liset Pahta Skin"
  },
  "/lotus/storeitems/upgrades/skins/liset/lisetskinkotora": {
    "value": "Liset Kotara Skin"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Liset/LisetSkinVoidTrader": {
    "value": "Liset Prisma Skin"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokiagileanims": {
    "value": "Loki Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokialternateskin": {
    "value": "Loki Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokienigmahelmet": {
    "value": "Loki Enigma Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokihelmet": {
    "value": "Loki Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokihelmetalt": {
    "value": "Arcane Essence Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokihelmetaltb": {
    "value": "Arcane Swindle Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokihelmetaltbstatless": {
    "value": "Loki Swindle Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokihelmetaltstatless": {
    "value": "Loki Essence Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokinobleanims": {
    "value": "Loki Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/loki/lokiprimehelmet": {
    "value": "Loki Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/loki/unlocklokiagile": {
    "value": "Loki Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/loki/unlocklokinoble": {
    "value": "Loki Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/mag/magagileanims": {
    "value": "Mag Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/mag/magalternateskin": {
    "value": "Mag Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/mag/maghelmet": {
    "value": "Mag Helmet"
  },
  "/lotus/storeitems/upgrades/skins/mag/maghelmetalt": {
    "value": "Arcane Coil Helmet"
  },
  "/lotus/storeitems/upgrades/skins/mag/maghelmetaltb": {
    "value": "Arcane Gauss Helmet"
  },
  "/lotus/storeitems/upgrades/skins/mag/maghelmetaltbstatless": {
    "value": "Mag Gauss Helmet"
  },
  "/lotus/storeitems/upgrades/skins/mag/maghelmetaltstatless": {
    "value": "Mag Coil Helmet"
  },
  "/lotus/storeitems/upgrades/skins/mag/magnobleanims": {
    "value": "Mag Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/mag/magprimehelmet": {
    "value": "Mag Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/mag/unlockmagagile": {
    "value": "Mag Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/mag/unlockmagnoble": {
    "value": "Mag Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/magician/limboimmortalskin": {
    "value": "Limbo Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/magician/magicianagileanims": {
    "value": "Limbo Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/magician/magicianaltbhelmet": {
    "value": "Limbo Magrite Helmet"
  },
  "/lotus/storeitems/upgrades/skins/magician/magicianaristeashelmet": {
    "value": "Limbo Aristeas Helmet"
  },
  "/lotus/storeitems/upgrades/skins/magician/magicianhelmet": {
    "value": "Limbo Helmet"
  },
  "/lotus/storeitems/upgrades/skins/magician/magiciannobleanims": {
    "value": "Limbo Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/magician/unlockmagicianagile": {
    "value": "Limbo Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/magician/unlockmagiciannoble": {
    "value": "Limbo Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/baroinarosmeleedangle": {
    "value": "Anpu Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/baromeleedangle": {
    "value": "Ki'teer Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/chaintridentmeleedangle": {
    "value": "Pazza Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/cordsmeleedangle": {
    "value": "Tantu Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/firemeleedangle": {
    "value": "Pyra Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/grnmeleedangle": {
    "value": "Caggro Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/infestedmeleedangle": {
    "value": "Coccyst Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/kazeruprimemeleedangle": {
    "value": "Kazeru Prime Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/lotuspointmeleedangle": {
    "value": "Suraka Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/polearmfriendlymeleedangle": {
    "value": "Daman Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/primemeleedangle": {
    "value": "Daman Sugatra Prime"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/razormeleedangle": {
    "value": "Uru Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/tennomeleedangle": {
    "value": "Pataga Sugatra"
  },
  "/lotus/storeitems/upgrades/skins/meleedangles/valaprimemeleedangle": {
    "value": "Vala Sugatra Prime"
  },
  "/lotus/storeitems/upgrades/skins/miscellaneous/huntsmansoma": {
    "value": "Soma Huntsman Skin"
  },
  "/lotus/storeitems/upgrades/skins/moapet/baromoapetskin": {
    "value": "Ki'teer Moa Pet Skin"
  },
  "/lotus/storeitems/upgrades/skins/mustache/stache": {
    "value": "The Gentleman"
  },
  "/lotus/storeitems/upgrades/skins/mustache/stache02": {
    "value": "The Tusker"
  },
  "/lotus/storeitems/upgrades/skins/mustache/stache03": {
    "value": "The Magnum"
  },
  "/lotus/storeitems/upgrades/skins/mustache/stache04": {
    "value": "The Villain"
  },
  "/lotus/storeitems/upgrades/skins/mustache/stache05": {
    "value": "The Baron"
  },
  "/lotus/storeitems/upgrades/skins/necro/necroagileanims": {
    "value": "Nekros Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/necro/necroaraknidhelmet": {
    "value": "Nekros Raknis Helmet"
  },
  "/lotus/storeitems/upgrades/skins/necro/necrodangles": {
    "value": "Mortos Binds"
  },
  "/lotus/storeitems/upgrades/skins/necro/necrohelmet": {
    "value": "Nekros Helmet"
  },
  "/lotus/storeitems/upgrades/skins/necro/necronobleanims": {
    "value": "Nekros Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/necro/necroshroudhelmet": {
    "value": "Nekros Shroud Helmet"
  },
  "/lotus/storeitems/upgrades/skins/necro/nekrosalternateskin": {
    "value": "Nekros Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/necro/unlocknecroagile": {
    "value": "Nekros Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/necro/unlocknecronoble": {
    "value": "Nekros Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ashalternateskin": {
    "value": "Ash Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ashprimehelmet": {
    "value": "Ash Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjaagileanims": {
    "value": "Ash Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjahelmet": {
    "value": "Ash Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjahelmetalt": {
    "value": "Arcane Scorpion Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjahelmetaltb": {
    "value": "Arcane Locust Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjahelmetaltbstatless": {
    "value": "Ash Locust Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjahelmetaltstatless": {
    "value": "Ash Scorpion Helmet"
  },
  "/lotus/storeitems/upgrades/skins/ninja/ninjanobleanims": {
    "value": "Ash Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ninja/unlockninjaagile": {
    "value": "Ash Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/ninja/unlockninjanoble": {
    "value": "Ash Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/nvidia/nvidiabratonskin": {
    "value": "Nvidia Braton"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Operator/Accessories/BaroHorn": {
    "value": "Ki'teer Cornu Diadem"
  },
  "/lotus/storeitems/upgrades/skins/operator/accessories/baromouthpiecea": {
    "value": "Ki'teer Atmos Mask"
  },
  "/lotus/storeitems/upgrades/skins/operator/accessories/barotiara": {
    "value": "Ki'teer Atmos Diadem"
  },
  "/lotus/storeitems/upgrades/skins/operator/accessories/barovisor": {
    "value": "Ki'teer Atmos Oculus"
  },
  "/lotus/storeitems/upgrades/skins/operator/accessories/earpiecebaroa": {
    "value": "Ki'teer Earpiece"
  },
  "/lotus/storeitems/upgrades/skins/operator/accessories/earpiecebarob": {
    "value": "Ki'teer Solo Earpiece"
  },
  "/lotus/storeitems/upgrades/skins/operator/accessories/earpiecebaroc": {
    "value": "Ki'teer Atmos Earpiece"
  },
  "/lotus/storeitems/upgrades/skins/ornate/tekelufragorskin": {
    "value": "Fragor Tekelu Skin"
  },
  "/lotus/storeitems/upgrades/skins/paladin/oberonalternateskin": {
    "value": "Oberon Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/paladin/paladinagileanims": {
    "value": "Oberon Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/paladin/paladinhelmet": {
    "value": "Oberon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/paladin/paladinhelmetalt": {
    "value": "Oberon Oryx Helmet"
  },
  "/lotus/storeitems/upgrades/skins/paladin/paladinhelmetaltb": {
    "value": "Oberon Markhor Helmet"
  },
  "/lotus/storeitems/upgrades/skins/paladin/paladinnobleanims": {
    "value": "Oberon Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/paladin/unlockpaladinagile": {
    "value": "Oberon Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/paladin/unlockpaladinnoble": {
    "value": "Oberon Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/pirate/hydroidalternateskin": {
    "value": "Hydroid Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/pirate/piratealtbhelmet": {
    "value": "Hydroid Ketos Helmet"
  },
  "/lotus/storeitems/upgrades/skins/pirate/piratealthelmet": {
    "value": "Hydroid Triton Helmet"
  },
  "/lotus/storeitems/upgrades/skins/pirate/piratedefaulthelmet": {
    "value": "Hydroid Helmet"
  },
  "/lotus/storeitems/upgrades/skins/promo/microsoft/excaliburxboneskin": {
    "value": "Emerald Excalibur"
  },
  "/lotus/storeitems/upgrades/skins/promo/microsoft/excaliburxboneskinhelmet": {
    "value": "Excalibur Jade"
  },
  "/lotus/storeitems/upgrades/skins/promo/microsoft/jadedualkamas": {
    "value": "Kama Jade Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/microsoft/jadekama": {
    "value": "Kama Jade Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/microsoft/jadelatron": {
    "value": "Latron Jade Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/rixtymol/rixtymolaklatoskin": {
    "value": "Rixtymol Aklato"
  },
  "/lotus/storeitems/upgrades/skins/promo/seasonal/candycaneetherreaperskin": {
    "value": "Spearmint Scythe"
  },
  "/lotus/storeitems/upgrades/skins/promo/seasonal/candycanehateskin": {
    "value": "Spearmint Scythe"
  },
  "/lotus/storeitems/upgrades/skins/promo/seasonal/candycanereaperprimeskin": {
    "value": "Spearmint Scythe"
  },
  "/lotus/storeitems/upgrades/skins/promo/void/akvastosvoidskin": {
    "value": "Akvasto Phased Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/void/ankyrosvoidskin": {
    "value": "Ankyros Phased Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/void/tigrisvoidskin": {
    "value": "Tigris Phased Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/void/vastovoidskin": {
    "value": "Vasto Phased Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/warframe/promoparis": {
    "value": "Paris Abra Skin"
  },
  "/lotus/storeitems/upgrades/skins/promo/warframe/protoglaive": {
    "value": "Proto-glaive Skin"
  },
  "/lotus/storeitems/upgrades/skins/referralseriestwo/rubedoakimbovipercamo": {
    "value": "Twin Vipers Rubedo Plated Skin"
  },
  "/lotus/storeitems/upgrades/skins/referralseriestwo/rubedodrakgooncamo": {
    "value": "Drakgoon Rubedo Plated Skin"
  },
  "/lotus/storeitems/upgrades/skins/referralseriestwo/rubedogalatinecamo": {
    "value": "Galatine Rubedo Plated Skin"
  },
  "/lotus/storeitems/upgrades/skins/referralseriestwo/rubedovipercamo": {
    "value": "Viper Rubedo Plated Skin"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinoagileanims": {
    "value": "Rhino Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinoalternateskin": {
    "value": "Rhino Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinohelmet": {
    "value": "Rhino Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinohelmetalt": {
    "value": "Arcane Thrak Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinohelmetaltb": {
    "value": "Arcane Vanguard Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinohelmetaltbstatless": {
    "value": "Rhino Vanguard Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinohelmetaltstatless": {
    "value": "Rhino Thrak Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinonobleanims": {
    "value": "Rhino Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinoprimehelmet": {
    "value": "Rhino Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinorubedoskin": {
    "value": "Rhino Rubedo Plated Skin"
  },
  "/lotus/storeitems/upgrades/skins/rhino/rhinorubedoskinhelmet": {
    "value": "Rubedo Plated Helmet"
  },
  "/lotus/storeitems/upgrades/skins/rhino/unlockrhinoagile": {
    "value": "Rhino Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/rhino/unlockrhinonoble": {
    "value": "Rhino Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/scarves/april2015scarf": {
    "value": "Kyroptera Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/armscarf": {
    "value": "Yomo Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/barocape": {
    "value": "Ki'teer Syandana"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Scarves/BaroCape2Scarf": {
    "value": "Ki'teer Razza Synadana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/brassandgoldscarf": {
    "value": "Ormolu Kyroptera Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/dexscarf": {
    "value": "Dex Nouchali Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/dinospikescarf": {
    "value": "Yamako Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/energyscarf": {
    "value": "Asa Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/energyscarfvoidskin": {
    "value": "Phased Asa Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/flamescarf": {
    "value": "Pyra Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/grineerturbinesscarf": {
    "value": "Harkonar Cloak"
  },
  "/lotus/storeitems/upgrades/skins/scarves/holidayturtleneckscarf": {
    "value": "Festive Imperator Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/hornskullscarf": {
    "value": "Rakta Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/hornskullscarfdefault": {
    "value": "Hecate Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/infestedfinsscarf": {
    "value": "Iliac Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/kazbarocape": {
    "value": "Ki'teer Diax Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/lisetscarf": {
    "value": "Domus Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/noruprimescarf": {
    "value": "Noru Prime Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/primeflamescarf": {
    "value": "Pyra Prime Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/primescarf": {
    "value": "Misa Prime Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/prismarazorscarf": {
    "value": "Prisma Uru Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/ps4armscarf": {
    "value": "Yomo Obsidian Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/razorscarf": {
    "value": "Uru Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/rubedodinospikescarf": {
    "value": "Rubedo Plated Yamako Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/solsticebarocape": {
    "value": "Ki'teer Solstice Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/syndicateahscarf": {
    "value": "Telos Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/syndicatecsscarf": {
    "value": "Synoid Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/syndicatenlscarf": {
    "value": "Sancti Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/syndicatepsscarf": {
    "value": "Secura Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/syndicatervscarf": {
    "value": "Asita Rakta Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/syndicatesmscarf": {
    "value": "Vaykor Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/turtleneckscarf": {
    "value": "Imperator Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/vtdinospikescarf": {
    "value": "Prisma Yamako Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/vthornskullscarf": {
    "value": "Prisma Hecate Syandana"
  },
  "/lotus/storeitems/upgrades/skins/scarves/wraithturbinesscarf": {
    "value": "Harkonar Wraith Cloak"
  },
  "/lotus/storeitems/upgrades/skins/scarves/yamakoprimescarf": {
    "value": "Yamako Prime Syandana"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/carbuncledethcubeskin": {
    "value": "Carabus Dethcube"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/baropetmask": {
    "value": "Ki'teer Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/gunheadmask": {
    "value": "Coltek Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/hunhowmask": {
    "value": "Hunhow Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/ictusmask": {
    "value": "Ictus Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/infestedmask": {
    "value": "Mandible Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/kavatpetmask": {
    "value": "Kavat Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/kubrowmask": {
    "value": "Kubrow Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/lotusmask": {
    "value": "Lotus Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/mechheadmask": {
    "value": "Mech Head Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/orokinmask": {
    "value": "Summus Prime Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/parrotmask": {
    "value": "Para Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/primesentinelmask": {
    "value": "Unda Prime Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/masks/prismamechheadmask": {
    "value": "Prisma Mech Head Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/parrotcarrierskin": {
    "value": "Para Carrier"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/skins/deserttaxonskin": {
    "value": "Taxon Desert-Camo Skin"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/skins/librarianhelios": {
    "value": "Helios Simaris Skin"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/spriteshadeskin": {
    "value": "Sprite Shade"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/baropettail": {
    "value": "Ki'teer Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/capsuletail": {
    "value": "Capsule Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/coltektail": {
    "value": "Coltek Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/fishtail": {
    "value": "Koi Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/ictustail": {
    "value": "Ictus Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/infestedtail": {
    "value": "Thorax Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/kavatpettail": {
    "value": "Kavat Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/orokintail": {
    "value": "Summus Prime Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/parrottail": {
    "value": "Para Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/primesentineltail": {
    "value": "Unda Prime Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/tails/prismafishtail": {
    "value": "Prisma Koi Sentinel Tail"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/baropetwings": {
    "value": "Ki'teer Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/coltekwings": {
    "value": "Coltek Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/coltekwingsright": {
    "value": "Coltek Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/diamondwings": {
    "value": "Diamond Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/diamondwingsright": {
    "value": "Diamond Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/domewings": {
    "value": "Dome Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/domewingsright": {
    "value": "Dome Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/ictuswings": {
    "value": "Ictus Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/ictuswingsright": {
    "value": "Ictus Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/infestedwings": {
    "value": "Chrysalis Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/infestedwingsright": {
    "value": "Chrysalis Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/jetwings": {
    "value": "Jet Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/jetwingsright": {
    "value": "Jet Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/kavatpetwings": {
    "value": "Kavat Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/orokinwings": {
    "value": "Summus Prime Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/orokinwingsright": {
    "value": "Summus Prime Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/parrotwings": {
    "value": "Para Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/parrotwingsright": {
    "value": "Para Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/primesentinelwings": {
    "value": "Unda Prime Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/primesentinelwingsright": {
    "value": "Unda Prime Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sentinels/wings/prismajetwings": {
    "value": "Prisma Jet Sentinel Wings"
  },
  "/lotus/storeitems/upgrades/skins/sigils/alliancesigilbasic": {
    "value": "Alliance Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/barokavatsigil": {
    "value": "Glaring Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/barokubrowsigil": {
    "value": "Pack Leader Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bladeandgunsigil": {
    "value": "Blade And Gun Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilaladv": {
    "value": "Alad V Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilambulas": {
    "value": "Ambulas Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilcaptainvor": {
    "value": "Vor Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilhyenapack": {
    "value": "Hyena Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigiljackal": {
    "value": "Jackal Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigillechkril": {
    "value": "Lech Kril Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigillephantis": {
    "value": "Lephantis Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigillynx": {
    "value": "Lynx Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilnefanyo": {
    "value": "Nef Anyo Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilphorid": {
    "value": "Phorid Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilraptor": {
    "value": "Raptor Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilsargusruk": {
    "value": "Sargas Ruk Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigiltylregor": {
    "value": "Tyl Regor Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/bosssigilvayhek": {
    "value": "Vay Hek Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/clansigilbasic": {
    "value": "Clan Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/clansigilbasicadd": {
    "value": "Phased Clan Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/clansigilmaskedeffect": {
    "value": "Gilded Clan Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/clansigiltwotone": {
    "value": "Glyphed Clan Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/collectorsigil": {
    "value": "Cephalon Simaris Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/deathmarksigilgrustrag": {
    "value": "Grustrag Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/deathmarksigilstalker": {
    "value": "Stalker Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/deathmarksigilzanuka": {
    "value": "Zanuka Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/dotd2016sigil": {
    "value": "Day of the Dead (2016) Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/energysigila": {
    "value": "Rift Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/eventsigilamalgam": {
    "value": "Hostile Mergers Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/eventsigilfalseprofit": {
    "value": "False Profit Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/eventsigilindex": {
    "value": "Index Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/firesigil": {
    "value": "Flaming Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/foundersigildisciple": {
    "value": "Disciple Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/foundersigilgrandmaster": {
    "value": "Grand Master Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/foundersigilhunter": {
    "value": "Hunter Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/foundersigilmaster": {
    "value": "Master Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/holidaysigilsnowflake": {
    "value": "Festive Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/holidaysigilxmas2014a": {
    "value": "Wreath Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/holidaysigilxmas2014b": {
    "value": "Nistlebrush Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/holidaysigilxmas2014c": {
    "value": "Tolling Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/holidaysigilxmas2014d": {
    "value": "Evergreen Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/lotusguidesigil": {
    "value": "Guide Of The Lotus"
  },
  "/lotus/storeitems/upgrades/skins/sigils/masterysigil": {
    "value": "Mastery Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/orbsigil": {
    "value": "Buried Debts Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/primeaccesssigilfive": {
    "value": "Verlorum Prime Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/primetradersigil": {
    "value": "Prisma Sigil "
  },
  "/lotus/storeitems/upgrades/skins/sigils/ps4oneyearsigil": {
    "value": "Cycle One Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/rhinodeluxesigil": {
    "value": "Rhino Palatine Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/sparksigil": {
    "value": "Flickering Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisa": {
    "value": "Arbiter Of Hexis Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisb": {
    "value": "Guiding Path Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisc": {
    "value": "Bending Will Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisd": {
    "value": "Discipline Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexise": {
    "value": "Will Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisf": {
    "value": "Choice Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisg": {
    "value": "Grasp Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexish": {
    "value": "Potential Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisi": {
    "value": "Succession Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisj": {
    "value": "Surpassing Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilarbitersofhexisk": {
    "value": "Truth Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudaa": {
    "value": "Cephalon Suda Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudab": {
    "value": "Query Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudac": {
    "value": "Searching Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudad": {
    "value": "Pattern Match Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudae": {
    "value": "Atomic Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudaf": {
    "value": "Manifold Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudag": {
    "value": "Fractal Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudah": {
    "value": "Multivariate Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudai": {
    "value": "Labyrinth Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudaj": {
    "value": "Hexan Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilcephalonsudak": {
    "value": "Oracle Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavea": {
    "value": "Conclave Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclaveb": {
    "value": "Awakening Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavec": {
    "value": "Perception Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclaved": {
    "value": "Awareness Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavee": {
    "value": "Revelation Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavef": {
    "value": "Diligence Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclaveg": {
    "value": "Prudence Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclaveh": {
    "value": "Discretion Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavei": {
    "value": "Ambition Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavej": {
    "value": "Volition Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavek": {
    "value": "Freedom Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavel": {
    "value": "Enlightenment Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclavem": {
    "value": "Discovery Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilconclaven": {
    "value": "Accord Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokaa": {
    "value": "New Loka Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokab": {
    "value": "Sacrifice Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokac": {
    "value": "Seed Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokad": {
    "value": "Rebirth Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokae": {
    "value": "Growth Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokaf": {
    "value": "Clarity Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokag": {
    "value": "Bloom Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokah": {
    "value": "Purity Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokai": {
    "value": "Gaia Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokaj": {
    "value": "Bounty Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilnewlokak": {
    "value": "Humanity Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencea": {
    "value": "Perrin Sequence Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequenceb": {
    "value": "Progress Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencec": {
    "value": "Opportunity Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequenced": {
    "value": "Calculating Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencee": {
    "value": "Synergy Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencef": {
    "value": "Directives Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequenceg": {
    "value": "Strategy Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequenceh": {
    "value": "Tessilations Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencei": {
    "value": "Optimum Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencej": {
    "value": "Capital Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilperrinsequencek": {
    "value": "Chairman Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveila": {
    "value": "Red Veil Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilb": {
    "value": "Blades Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilc": {
    "value": "Cull Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveild": {
    "value": "Threat Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveile": {
    "value": "Maelstrom Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilf": {
    "value": "Lesion Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilg": {
    "value": "Ruin Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilh": {
    "value": "Viscera Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveili": {
    "value": "Malevolent Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilj": {
    "value": "Covert Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilredveilk": {
    "value": "Assassin Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridiana": {
    "value": "Steel Meridian Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridianb": {
    "value": "Defiance Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridianc": {
    "value": "Armada Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridiand": {
    "value": "Vigilance Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridiane": {
    "value": "Uprising Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridianf": {
    "value": "Protectorate Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridiang": {
    "value": "Freedom Fighter Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridianh": {
    "value": "Armored Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridiani": {
    "value": "Rebellion Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridianj": {
    "value": "Unyielding Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/syndicatesigilsteelmeridiank": {
    "value": "Champion Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/tennolive2015sigil": {
    "value": "Tenno Live Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sigils/twotonesigil": {
    "value": "Glyphed Sigil"
  },
  "/lotus/storeitems/upgrades/skins/sony/excaliburpsplusskin": {
    "value": "Excalibur Obsidian"
  },
  "/lotus/storeitems/upgrades/skins/sony/excaliburpsplusskinhelmet": {
    "value": "Excalibur Obsidian Helmet"
  },
  "/lotus/storeitems/upgrades/skins/sony/obsidiancoltekmask": {
    "value": "Coltek Obsidian Sentinel Mask"
  },
  "/lotus/storeitems/upgrades/skins/sony/obsidiangorgon": {
    "value": "Gorgon Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/obsidianhelios": {
    "value": "Helios Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/obsidiantwinvipers": {
    "value": "Twin Vipers Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/obsidianviper": {
    "value": "Viper Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/obsidianwyrm": {
    "value": "Wyrm Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/ps4braton": {
    "value": "Braton Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/ps4lato": {
    "value": "Lato Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/ps4mk1braton": {
    "value": "Braton Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/sony/ps4skana": {
    "value": "Skana Obsidian Skin"
  },
  "/lotus/storeitems/upgrades/skins/spectres/bronzespectrecustomization": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/upgrades/skins/spectres/goldspectrecustomization": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/upgrades/skins/spectres/platinumspectrecustomization": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/upgrades/skins/spectres/silverspectrecustomization": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/upgrades/skins/spectres/spectrecustomization": {
    "value": "Helmet Or Syandana"
  },
  "/lotus/storeitems/upgrades/skins/summersolstice/summerignisskin": {
    "value": "Ignis Towsun Skin"
  },
  "/lotus/storeitems/upgrades/skins/summersolstice/summersolsticegorgon": {
    "value": "Gorgon Towsun Skin"
  },
  "/Lotus/StoreItems/Upgrades/Skins/SummerSolstice/SummerSolsticeTwinGrakatas": {
    "value": "Twin Grakatas Towsun Skin"
  },
  "/lotus/storeitems/upgrades/skins/tengu/tenguagileanims": {
    "value": "Zephyr Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/tengu/tengualtbhelmet": {
    "value": "Zephyr Tengu Helmet"
  },
  "/lotus/storeitems/upgrades/skins/tengu/tengualthelmet": {
    "value": "Zephyr Cierzo Helmet"
  },
  "/lotus/storeitems/upgrades/skins/tengu/tenguhelmet": {
    "value": "Zephyr Helmet"
  },
  "/lotus/storeitems/upgrades/skins/tengu/tengunobleanims": {
    "value": "Zephyr Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/tengu/unlocktenguagile": {
    "value": "Zephyr Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/tengu/unlocktengunoble": {
    "value": "Zephyr Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/tengu/zephyralternateskin": {
    "value": "Zephyr Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperagileanims": {
    "value": "Vauban Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperdefaulthelmet": {
    "value": "Vauban Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperhelmetalt": {
    "value": "Arcane Esprit Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperhelmetaltb": {
    "value": "Arcane Gambit Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperhelmetaltbstatless": {
    "value": "Vauban Gambit Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperhelmetaltstatless": {
    "value": "Vauban Esprit Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trapperhelmetsoldier": {
    "value": "Vauban Armistice Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trapper/trappernobleanims": {
    "value": "Vauban Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trapper/unlocktrapperagile": {
    "value": "Vauban Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trapper/unlocktrappernoble": {
    "value": "Vauban Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trapper/vaubanalternateskin": {
    "value": "Vauban Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/trapper/vaubanvoidskin": {
    "value": "Vauban Phased Skin"
  },
  "/lotus/storeitems/upgrades/skins/trapper/vaubanvoidskinhelmet": {
    "value": "Vauban Phased Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityagileanims": {
    "value": "Trinity Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityalternateskin": {
    "value": "Trinity Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityhelmet": {
    "value": "Trinity Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityhelmetalt": {
    "value": "Arcane Aura Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityhelmetaltb": {
    "value": "Arcane Meridian Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityhelmetaltbstatless": {
    "value": "Trinity Meridian Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinityhelmetaltstatless": {
    "value": "Trinity Aura Helmet"
  },
  "/lotus/storeitems/upgrades/skins/trinity/trinitynobleanims": {
    "value": "Trinity Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trinity/unlocktrinityagile": {
    "value": "Trinity Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/trinity/unlocktrinitynoble": {
    "value": "Trinity Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/valentinesday/valentinesarrow": {
    "value": "Eros Arrow Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/baroarrow": {
    "value": "Ki'teer Arrow Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/baroinarospolearmskin": {
    "value": "Anpu Staff Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/baroscythemacheteskin": {
    "value": "Machete Syachid Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/elixisballassword": {
    "value": "Paracesis Elixis Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/elixisodonataskin": {
    "value": "Odonata Elixis Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/elixisopticor": {
    "value": "Opticor Elixis Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/elixissonicor": {
    "value": "Sonicor Exilis Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/elixistigris": {
    "value": "Tigris Elixis Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/prismaarrow": {
    "value": "Prisma Arrows"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vtexcaliburavalonhelmet": {
    "value": "Excalibur Prisma Avalon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vtexcaliburhelmet": {
    "value": "Excalibur Prisma Helmet"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vtexcaliburpendragonhelmet": {
    "value": "Excalibur Prisma Pendragon Helmet"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vtexcaliburskin": {
    "value": "Excalibur Prisma Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vthalloweendarksword": {
    "value": "Dark Sword Day of the Dead Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vtquanta": {
    "value": "Quanta Aufeis Skin"
  },
  "/lotus/storeitems/upgrades/skins/voidtrader/vtredeemerskin": {
    "value": "Redeemer Elixis Skin"
  },
  "/lotus/storeitems/upgrades/skins/volt/unlockvoltagile": {
    "value": "Volt Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/volt/unlockvoltnoble": {
    "value": "Volt Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/volt/voltagileanims": {
    "value": "Volt Agile Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/volt/voltalternateskin": {
    "value": "Volt Immortal Skin"
  },
  "/lotus/storeitems/upgrades/skins/volt/volthelmet": {
    "value": "Volt Helmet"
  },
  "/lotus/storeitems/upgrades/skins/volt/volthelmetalt": {
    "value": "Arcane Storm Helmet"
  },
  "/lotus/storeitems/upgrades/skins/volt/volthelmetaltb": {
    "value": "Arcane Pulse Helmet"
  },
  "/lotus/storeitems/upgrades/skins/volt/volthelmetaltbstatless": {
    "value": "Volt Pulse Helmet"
  },
  "/lotus/storeitems/upgrades/skins/volt/volthelmetaltstatless": {
    "value": "Volt Storm Helmet"
  },
  "/lotus/storeitems/upgrades/skins/volt/voltnobleanims": {
    "value": "Volt Noble Animation Set"
  },
  "/lotus/storeitems/upgrades/skins/volt/voltprimehelmet": {
    "value": "Volt Prime Helmet"
  },
  "/lotus/storeitems/upgrades/skins/weapons/redeemer/redeemerrelaywaterskin": {
    "value": "Redeemer Abysso Skin"
  },
  "/lotus/storeitems/weapons/cephalon/primary/cephprimary/cephprimary": {
    "value": "Simulor"
  },
  "/lotus/storeitems/weapons/clantech/bio/aciddartpistol": {
    "value": "Acrid"
  },
  "/lotus/storeitems/weapons/clantech/bio/bioweapon": {
    "value": "Torid"
  },
  "/lotus/storeitems/weapons/clantech/chemical/flamethrower": {
    "value": "Ignis"
  },
  "/lotus/storeitems/weapons/clantech/chemical/flamethrowerwraith": {
    "value": "Ignis Wraith"
  },
  "/lotus/storeitems/weapons/clantech/chemical/rocketlauncher": {
    "value": "Ogris"
  },
  "/lotus/storeitems/weapons/clantech/energy/crpheavyrifle": {
    "value": "Supra"
  },
  "/lotus/storeitems/weapons/clantech/energy/crplaserpistol": {
    "value": "Spectra"
  },
  "/lotus/storeitems/weapons/clantech/energy/crplaserrifle": {
    "value": "Flux Rifle"
  },
  "/lotus/storeitems/weapons/clantech/energy/deravandal": {
    "value": "Dera Vandal"
  },
  "/lotus/storeitems/weapons/clantech/energy/electroprod": {
    "value": "Prova"
  },
  "/lotus/storeitems/weapons/clantech/energy/energyrifle": {
    "value": "Dera"
  },
  "/lotus/storeitems/weapons/clantech/energy/railgun": {
    "value": "Lanka"
  },
  "/lotus/storeitems/weapons/clantech/energy/vandalelectroprod": {
    "value": "Prova Vandal"
  },
  "/lotus/storeitems/weapons/corpus/bow/longbow/crpbow": {
    "value": "Lenz"
  },
  "/lotus/storeitems/weapons/corpus/longguns/chainlightninggun/chainlightningrifle": {
    "value": "Amprex"
  },
  "/lotus/storeitems/weapons/corpus/longguns/corpusump/corpusump": {
    "value": "Tetra"
  },
  "/lotus/storeitems/weapons/corpus/longguns/corpusump/prismacorpusump": {
    "value": "Prisma Tetra"
  },
  "/lotus/storeitems/weapons/corpus/longguns/crpbfg/crpbfg": {
    "value": "Opticor"
  },
  "/lotus/storeitems/weapons/corpus/longguns/crpbfg/vandal/vandalcrpbfg": {
    "value": "Opticor Vandal"
  },
  "/lotus/storeitems/weapons/corpus/longguns/crpfreezeray/crpfreezerayrifle": {
    "value": "Glaxion"
  },
  "/lotus/storeitems/weapons/corpus/longguns/crpfreezeray/vandal/crpfreezerayvandalrifle": {
    "value": "Glaxion Vandal"
  },
  "/lotus/storeitems/weapons/corpus/longguns/crpshockrifle/crpshockrifle": {
    "value": "Quanta"
  },
  "/lotus/storeitems/weapons/corpus/longguns/crpshockrifle/quantavandal": {
    "value": "Quanta Vandal"
  },
  "/lotus/storeitems/weapons/corpus/longguns/grenadelauncher/grenadelauncher": {
    "value": "Penta"
  },
  "/lotus/storeitems/weapons/corpus/longguns/machinegun/supravandal": {
    "value": "Supra Vandal"
  },
  "/lotus/storeitems/weapons/corpus/melee/kickandpunch/kickpunchweapon": {
    "value": "Obex"
  },
  "/lotus/storeitems/weapons/corpus/melee/polearm/corpuspolearm01/corpuspolearmweapon": {
    "value": "Serro"
  },
  "/lotus/storeitems/weapons/corpus/melee/whip/corpuswhipweapon": {
    "value": "Lecta"
  },
  "/lotus/storeitems/weapons/corpus/pistols/corpushandshotgun/corpushandcannon": {
    "value": "Detron"
  },
  "/lotus/storeitems/weapons/corpus/pistols/corpusminigun/corpusminigun": {
    "value": "Cestra"
  },
  "/lotus/storeitems/weapons/corpus/pistols/corpusminigun/dualcorpusminigun": {
    "value": "Dual Cestra"
  },
  "/lotus/storeitems/weapons/corpus/pistols/corpusmodularpistol/vandal/crplaserpistolvandal": {
    "value": "Spectra Vandal"
  },
  "/lotus/storeitems/weapons/corpus/pistols/crpairpistol/crpairpistolarray": {
    "value": "Gammacor"
  },
  "/lotus/storeitems/weapons/corpus/pistols/crpelectromag/crpelectromag": {
    "value": "Staticor"
  },
  "/lotus/storeitems/weapons/corpus/pistols/crphandrl/corpushandrocketlauncher": {
    "value": "Angstrum"
  },
  "/lotus/storeitems/weapons/corpus/pistols/crphandrl/prismaangstrum": {
    "value": "Prisma Angstrum"
  },
  "/lotus/storeitems/weapons/grineer/grineerpistol/grineerakimbopistol": {
    "value": "Twin Gremlins"
  },
  "/lotus/storeitems/weapons/grineer/grineerpistol/grineerlightpistol": {
    "value": "Viper"
  },
  "/lotus/storeitems/weapons/grineer/grineerpistol/grnheavypistol": {
    "value": "Kraken"
  },
  "/lotus/storeitems/weapons/grineer/grineerpistol/grnscopedpistolplayer": {
    "value": "Seer"
  },
  "/lotus/storeitems/weapons/grineer/longguns/acidprimary/acidrifle": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/grineer/longguns/burstrifle/grnburstrifle": {
    "value": "Hind"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineerassaultrifle/grnassaultrifle": {
    "value": "Grakata"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineerflakcannon/flakcannon": {
    "value": "Drakgoon"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineerleveractionrifle/glarifle": {
    "value": "Grinlok"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineerleveractionrifle/prismagrinlokweapon": {
    "value": "Prisma Grinlok"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineerm16homage/grineerm16rifle": {
    "value": "Karak"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineerm16homage/karakwraith": {
    "value": "Karak Wraith"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineersawbladegun/sawbladegun": {
    "value": "Miter"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineersniperrifle/grnsniperrifle": {
    "value": "Vulkar"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grineersniperrifle/vulkarwraith": {
    "value": "Vulkar Wraith"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grngorgsniperrifle/grngorgsniperrifle": {
    "value": "Buzlok"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grngrenadelauncher/grngrenadelauncher": {
    "value": "Tonkor"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grnharpoongun/grnharpoongun": {
    "value": "Gorgon"
  },
  "/lotus/storeitems/weapons/grineer/longguns/grnspark/grnsparkrifle": {
    "value": "Kohm"
  },
  "/lotus/storeitems/weapons/grineer/longguns/voidtradergorgon/vtgorgon": {
    "value": "Prisma Gorgon"
  },
  "/lotus/storeitems/weapons/grineer/longguns/wraithgorgon/wraithgorgon": {
    "value": "Gorgon Wraith"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineerclaws/grnclaws": {
    "value": "Ripkas"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineercombatknife/grineercombatknife": {
    "value": "Sheev"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineerjetpoweredpolearm/grineerjetpolearm": {
    "value": "Jat Kittag"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineermachetteandcleaver/dualcleaverweapon": {
    "value": "Dual Cleavers"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineermachetteandcleaver/machete": {
    "value": "Machete"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineermachetteandcleaver/prismadualcleavers": {
    "value": "Prisma Dual Cleavers"
  },
  "/Lotus/StoreItems/Weapons/Grineer/Melee/GrineerMachetteAndCleaver/WraithMacheteWeapon": {
    "value": "Machete Wraith"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineertylaxeandboar/regoraxeshield": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/grineer/melee/grineerwhip/grineerwhip": {
    "value": "Atterax"
  },
  "/lotus/storeitems/weapons/grineer/melee/grnboomerang/grnboomerang": {
    "value": "Halikar"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grineerbulboussmg/prisma/prismatwingremlinsweapon": {
    "value": "Prisma Twin Gremlins"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grineercrossbow/grineergoogun": {
    "value": "Stug"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grineerhandshotgun/grineerhandcannon": {
    "value": "Brakk"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grineerleveractionpistol/glapistol": {
    "value": "Marelok"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grineermicrowavegun/grnmicrowavepistol": {
    "value": "Nukor"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grndwuniques/grntwinburstpistols": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grndwuniques/grntwinkohmaks": {
    "value": "Twin Kohmaks"
  },
  "/lotus/storeitems/weapons/grineer/pistols/grnkohmpistol/grnkohmpistol": {
    "value": "Kohmak"
  },
  "/lotus/storeitems/weapons/grineer/pistols/heatgun/grnheatgun": {
    "value": "Atomos"
  },
  "/lotus/storeitems/weapons/grineer/pistols/voidtraderbrakk/vtbrakk": {
    "value": "Mara Brakk"
  },
  "/lotus/storeitems/weapons/grineer/pistols/wraithsingleviper/wraithsingleviper": {
    "value": "Viper Wraith"
  },
  "/lotus/storeitems/weapons/grineer/pistols/wraithtwinvipers/wraithtwinvipers": {
    "value": "Wraith Twin Vipers"
  },
  "/lotus/storeitems/weapons/infested/longguns/infcrpshockswarm/infcrpshockswarmrifle": {
    "value": "Mutalist Quanta"
  },
  "/lotus/storeitems/weapons/infested/longguns/infestedrifle": {
    "value": "Synapse"
  },
  "/lotus/storeitems/weapons/infested/longguns/quantafullyinfested/infquantarifle": {
    "value": "Paracyst"
  },
  "/lotus/storeitems/weapons/infested/longguns/tentacluster/infestedshotgun": {
    "value": "Phage"
  },
  "/lotus/storeitems/weapons/infested/melee/glaives/punctureglaive/punctureglaiveweapon": {
    "value": "Cerata"
  },
  "/lotus/storeitems/weapons/infested/melee/swords/mire/miresword": {
    "value": "Mire"
  },
  "/lotus/storeitems/weapons/infested/melee/swords/swordwhip/infswordwhip": {
    "value": "Mire"
  },
  "/lotus/storeitems/weapons/infested/melee/whip/infestedwhip/infestedwhipweapon": {
    "value": "Scoliac"
  },
  "/lotus/storeitems/weapons/infested/pistols/infesteddartpistol/infesteddartpistol": {
    "value": "Tysis"
  },
  "/lotus/storeitems/weapons/infested/pistols/infestedpistol": {
    "value": "Embolist"
  },
  "/lotus/storeitems/weapons/mk1series/mk1bo": {
    "value": "Mk1-bo"
  },
  "/lotus/storeitems/weapons/mk1series/mk1braton": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/weapons/mk1series/mk1fang": {
    "value": "Mk1-fang"
  },
  "/lotus/storeitems/weapons/mk1series/mk1fragor": {
    "value": "Mk1-fragor"
  },
  "/lotus/storeitems/weapons/mk1series/mk1furax": {
    "value": "Mk1-furax"
  },
  "/lotus/storeitems/weapons/mk1series/mk1furis": {
    "value": "Mk1-furis"
  },
  "/lotus/storeitems/weapons/mk1series/mk1kunai": {
    "value": "Mk1-kunai"
  },
  "/lotus/storeitems/weapons/mk1series/mk1latron": {
    "value": "Mk1-latron"
  },
  "/lotus/storeitems/weapons/mk1series/mk1lex": {
    "value": "Mk1-lex"
  },
  "/lotus/storeitems/weapons/mk1series/mk1paris": {
    "value": "Mk1-paris"
  },
  "/lotus/storeitems/weapons/mk1series/mk1skana": {
    "value": "Mk1-skana"
  },
  "/lotus/storeitems/weapons/mk1series/mk1strun": {
    "value": "Mk1-strun"
  },
  "/lotus/storeitems/weapons/syndicates/arbitersofhexis/pistols/ahakbolto": {
    "value": "Telos Akbolto"
  },
  "/lotus/storeitems/weapons/syndicates/cephalonsuda/pistols/csdroidarray": {
    "value": "Gammacor"
  },
  "/lotus/storeitems/weapons/syndicates/cephalonsuda/pistols/cssynoidgammacor": {
    "value": "Synoid Gammacor"
  },
  "/lotus/storeitems/weapons/syndicates/newloka/pistols/nlcastanas": {
    "value": "Sancti Castanas"
  },
  "/lotus/storeitems/weapons/syndicates/perrinsequence/pistols/psdualcestra": {
    "value": "Secura Dual Cestra"
  },
  "/lotus/storeitems/weapons/syndicates/redveil/pistols/rvballistica": {
    "value": "Rakta Ballistica"
  },
  "/lotus/storeitems/weapons/syndicates/steelmeridian/pistols/smmarelok": {
    "value": "Vaykor Marelok"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/akimboautopistols": {
    "value": "Afuris"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/akimbobolto": {
    "value": "Akbolto"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/akimbopistol": {
    "value": "Aklato"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/akimboshotgun": {
    "value": "Akbronco"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/akimboviperpistols": {
    "value": "Twin Vipers"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/aklexpistols": {
    "value": "Aklex"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/dualmagnus": {
    "value": "Akmagnus"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/dualvastos": {
    "value": "Akvasto"
  },
  "/lotus/storeitems/weapons/tenno/akimbo/primeakimboshotgun": {
    "value": "Akbronco Prime"
  },
  "/lotus/storeitems/weapons/tenno/archwing/melee/archaxe/archaxeweapon": {
    "value": "Onorix"
  },
  "/lotus/storeitems/weapons/tenno/archwing/melee/archhammer/archhammer": {
    "value": "Rathbone"
  },
  "/lotus/storeitems/weapons/tenno/archwing/melee/archsword/archswordweapon": {
    "value": "Veritux"
  },
  "/lotus/storeitems/weapons/tenno/archwing/melee/archswordandshield/archswordshield": {
    "value": "Centaur"
  },
  "/lotus/storeitems/weapons/tenno/archwing/melee/voidtraderarchsword/vtarchswordweapon": {
    "value": "Prisma Veritux"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/archwingheavypistols/archheavypistols": {
    "value": "Dual Decurion"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/foldingmachinegun/archmachinegun": {
    "value": "Imperator"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/foldingmachinegun/archmachinegunvandal": {
    "value": "Imperator Vandal"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/launchgrenade/archcannon": {
    "value": "Corvas"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/railgun/archrailgun": {
    "value": "Velocitus"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/repurposedgrineerantiaircraftgun/repurposedgrineerantiaircraftgun": {
    "value": "Imperator"
  },
  "/lotus/storeitems/weapons/tenno/archwing/primary/rocketartillery/archrocketcrossbow": {
    "value": "Fluctus"
  },
  "/lotus/storeitems/weapons/tenno/bows/antlerbow/antlerbow": {
    "value": "Cernos"
  },
  "/lotus/storeitems/weapons/tenno/bows/asymetricalbow/asymetricalbow": {
    "value": "Daikyu"
  },
  "/lotus/storeitems/weapons/tenno/bows/huntingbow": {
    "value": "Paris"
  },
  "/lotus/storeitems/weapons/tenno/bows/primehuntingbow": {
    "value": "Paris Prime"
  },
  "/lotus/storeitems/weapons/tenno/bows/stalkerbow": {
    "value": "Dread"
  },
  "/lotus/storeitems/weapons/tenno/longguns/dexthethird/dexthethird": {
    "value": "Dex Sybaris"
  },
  "/lotus/storeitems/weapons/tenno/longguns/doublebarrelshotgun/tennodoublebarrelshotgun": {
    "value": "Tigris"
  },
  "/lotus/storeitems/weapons/tenno/longguns/drakerifle/drakerifle": {
    "value": "Tiberon"
  },
  "/lotus/storeitems/weapons/tenno/longguns/miter/tnomiter": {
    "value": "Panthera"
  },
  "/lotus/storeitems/weapons/tenno/longguns/primeboltor/primeboltor": {
    "value": "Boltor Prime"
  },
  "/lotus/storeitems/weapons/tenno/longguns/primeburston/primeburston": {
    "value": "Burston Prime"
  },
  "/lotus/storeitems/weapons/tenno/longguns/primesoma/primesomarifle": {
    "value": "Soma Prime"
  },
  "/lotus/storeitems/weapons/tenno/longguns/primevectis/primevectisrifle": {
    "value": "Vectis Prime"
  },
  "/lotus/storeitems/weapons/tenno/longguns/tnoleveraction/tnoleveractionrifle": {
    "value": "Sybaris"
  },
  "/lotus/storeitems/weapons/tenno/longguns/tnoprmryxbow/tnoprmryxbowweapon": {
    "value": "Attica"
  },
  "/lotus/storeitems/weapons/tenno/longguns/wraithlatron/wraithlatron": {
    "value": "Latron Wraith"
  },
  "/lotus/storeitems/weapons/tenno/melee/axe/axeweapon": {
    "value": "Scindo"
  },
  "/lotus/storeitems/weapons/tenno/melee/axe/dualaxeweapon": {
    "value": "Dual Zoren"
  },
  "/lotus/storeitems/weapons/tenno/melee/axe/dualinfestedaxesweapon": {
    "value": "Dual Ichor"
  },
  "/lotus/storeitems/weapons/tenno/melee/axe/primescindo/primescindoweapon": {
    "value": "Scindo Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/brass knuckles/brassknuckles": {
    "value": "Kogake"
  },
  "/lotus/storeitems/weapons/tenno/melee/claws/tennoclaws": {
    "value": "Venka"
  },
  "/lotus/storeitems/weapons/tenno/melee/cronussword/cronuslongsword": {
    "value": "Cronus"
  },
  "/lotus/storeitems/weapons/tenno/melee/cronussword/primecronuslongsword": {
    "value": "Dakra Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/dagger/ceramicdagger": {
    "value": "Ceramic Dagger"
  },
  "/lotus/storeitems/weapons/tenno/melee/dagger/dagger": {
    "value": "Heat Dagger"
  },
  "/lotus/storeitems/weapons/tenno/melee/dagger/darkdagger": {
    "value": "Dark Dagger"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualdagger/dualdagger": {
    "value": "Fang"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualdagger/dualetherdagger": {
    "value": "Ether Daggers"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualdagger/fangprimedagger": {
    "value": "Fang Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualkamas/dualkamas": {
    "value": "Dual Kamas"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualkamas/singlekama": {
    "value": "Kama"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualshortsword/dualethersword": {
    "value": "Dual Ether"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualshortsword/dualheatswords": {
    "value": "Dual Heat Swords"
  },
  "/lotus/storeitems/weapons/tenno/melee/dualshortsword/dualshortsword": {
    "value": "Dual Skana"
  },
  "/lotus/storeitems/weapons/tenno/melee/fist/fist": {
    "value": "Furax"
  },
  "/lotus/storeitems/weapons/tenno/melee/fist/furaxwraith": {
    "value": "Furax Wraith"
  },
  "/lotus/storeitems/weapons/tenno/melee/gauntlet/gauntlet": {
    "value": "Ankyros"
  },
  "/lotus/storeitems/weapons/tenno/melee/gauntlet/primeankyros/primeankyros": {
    "value": "Ankyros Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/glaives/boomerang/boomerangweapon": {
    "value": "Kestrel"
  },
  "/lotus/storeitems/weapons/tenno/melee/glaives/lightglaive/lightglaiveweapon": {
    "value": "Glaive"
  },
  "/lotus/storeitems/weapons/tenno/melee/glaives/primeglaive/primeglaiveweapon": {
    "value": "Glaive Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/greatsword/greatsword": {
    "value": "Gram"
  },
  "/lotus/storeitems/weapons/tenno/melee/gunblade/tnogunblade": {
    "value": "Redeemer"
  },
  "/lotus/storeitems/weapons/tenno/melee/hammer/hammerweapon": {
    "value": "Fragor"
  },
  "/lotus/storeitems/weapons/tenno/melee/hammer/icehammer/icehammer": {
    "value": "Sibear"
  },
  "/lotus/storeitems/weapons/tenno/melee/longsword/ethersword": {
    "value": "Ether Sword"
  },
  "/lotus/storeitems/weapons/tenno/melee/longsword/longsword": {
    "value": "Skana"
  },
  "/lotus/storeitems/weapons/tenno/melee/longsword/skanaprime": {
    "value": "Skana Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/maces/paladinmace/paladinmaceweapon": {
    "value": "Magistar"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/axecmbonemeleetree": {
    "value": "Rending Crane"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/axecmbthreemeleetree": {
    "value": "Tempo Royale"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/axecmbtwomeleetree": {
    "value": "Cleaving Whirlwind"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/clawcmbonemeleetree": {
    "value": "Malicious Raptor"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/clawcmbthreemeleetree": {
    "value": "Four Riders"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/clawcmbtwomeleetree": {
    "value": "Vermillion Storm"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/crimsondervishmeleetree": {
    "value": "Crimson Dervish"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/daggercmbonemeleetree": {
    "value": "Homing Fang"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/daggercmbtwomeleetree": {
    "value": "Pointed Wind"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/dualdaggercmbonemeleetree": {
    "value": "Sinking Talon"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/dualdaggercmbtwomeleetree": {
    "value": "Gnashing Payara"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/dualswordcmbonemeleetree": {
    "value": "Swirling Tiger"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/dualswordcmbtwomeleetree": {
    "value": "Crossing Snakes"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/fistcmbonemeleetree": {
    "value": "Fracturing Wind"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/fistcmbtwomeleetree": {
    "value": "Seismic Palm"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/glaivecmbonemeleetree": {
    "value": "Gleaming Talon"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/glaivecmbtwomeleetree": {
    "value": "Astral Twilight"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/gunbladecmbonemeleetree": {
    "value": "High Noon"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/hammercmbonemeleetree": {
    "value": "Shattering Storm"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/hammercmbtwomeleetree": {
    "value": "Crushing Ruin"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/ironphoenixmeleetree": {
    "value": "Iron Phoenix"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/katanacmbonemeleetree": {
    "value": "Tranquil Cleave"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/katanacmbthreemeleetree": {
    "value": "Blind Justice"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/katanacmbtwomeleetree": {
    "value": "Decisive Judgement"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/machetecmbonemeleetree": {
    "value": "Sundering Weave"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/polearmcmbonemeleetree": {
    "value": "Shimmering Blight"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/polearmcmbtwomeleetree": {
    "value": "Bleeding Willow"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/punchkickcmbonemeleetree": {
    "value": "Grim Fury"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/punchkickcmbtwomeleetree": {
    "value": "Brutal Tide"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/scythecmbonemeleetree": {
    "value": "Reaping Spiral"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/scythecmbtwomeleetree": {
    "value": "Stalking Fan"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/staffcmbonemeleetree": {
    "value": "Clashing Forest"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/staffcmbtwomeleetree": {
    "value": "Flailing Branch"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/swordshieldcmbonemeleetree": {
    "value": "Eleventh Storm"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/tonfacmbonemeleetree": {
    "value": "Gemini Cross"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/whipcmbonemeleetree": {
    "value": "Burning Wasp"
  },
  "/lotus/storeitems/weapons/tenno/melee/meleetrees/whipcmbtwomeleetree": {
    "value": "Coiling Viper"
  },
  "/lotus/storeitems/weapons/tenno/melee/nunchaku/cynunchaku/cynunchaku": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/tenno/melee/polearms/flowerpowerpolearm/flowerpowerpolearmwep": {
    "value": "Tonbo"
  },
  "/lotus/storeitems/weapons/tenno/melee/polearms/polearmweapon": {
    "value": "Orthos"
  },
  "/lotus/storeitems/weapons/tenno/melee/polearms/primepolearmweapon": {
    "value": "Orthos Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/scythe/etherscytheweapon": {
    "value": "Ether Reaper"
  },
  "/lotus/storeitems/weapons/tenno/melee/scythe/parisscythe/parisscythe": {
    "value": "Anku"
  },
  "/lotus/storeitems/weapons/tenno/melee/scythe/reaperweapon": {
    "value": "Reaper Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/scythe/stalkerscytheweapon": {
    "value": "Hate"
  },
  "/lotus/storeitems/weapons/tenno/melee/soma/somadualkamas": {
    "value": "Dual Raza"
  },
  "/lotus/storeitems/weapons/tenno/melee/staff/basestaff": {
    "value": "Bo"
  },
  "/lotus/storeitems/weapons/tenno/melee/staff/grnstaff": {
    "value": "Amphis"
  },
  "/lotus/storeitems/weapons/tenno/melee/staff/monkspade/tnomonkstaff": {
    "value": "Tipedo"
  },
  "/lotus/storeitems/weapons/tenno/melee/staff/primebo/primeboweapon": {
    "value": "Bo Prime"
  },
  "/lotus/storeitems/weapons/tenno/melee/staff/staff": {
    "value": "Bo"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/cutlassandpoignard/cutlasspoignardswords": {
    "value": "Nami Skyla"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/cutlassandpoignard/tennocutlass": {
    "value": "Nami Solo"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/darksword/darklongsword": {
    "value": "Dark Sword"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/dexthesecond/dexthesecond": {
    "value": "Dex Dakra"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/greatsword/tennogreatsword": {
    "value": "Galatine"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/heatsword/heatlongsword": {
    "value": "Heat Sword"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/jawsword/jawlongsword": {
    "value": "Jaw Sword"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/katanaandwakizashi/katana": {
    "value": "Nikana"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/katanaandwakizashi/lowkatana": {
    "value": "Dragon Nikana"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/krisdagger/krisdagger": {
    "value": "Karyst"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/pangolinsword/pangolinlongsword": {
    "value": "Pangolin Sword"
  },
  "/lotus/storeitems/weapons/tenno/melee/swords/plasmasword/plasmalongsword": {
    "value": "Plasma Sword"
  },
  "/lotus/storeitems/weapons/tenno/melee/swordsandboards/meleecontestwinnerone/tennoswordshield": {
    "value": "Silva & Aegis"
  },
  "/lotus/storeitems/weapons/tenno/melee/tonfa/boltonfa/boltonfa": {
    "value": "Boltace"
  },
  "/lotus/storeitems/weapons/tenno/melee/tonfa/tonfacontestwinner/tennotonfa": {
    "value": "Kronen"
  },
  "/lotus/storeitems/weapons/tenno/pistol/autopistol": {
    "value": "Furis"
  },
  "/lotus/storeitems/weapons/tenno/pistol/broncoprime": {
    "value": "Bronco Prime"
  },
  "/lotus/storeitems/weapons/tenno/pistol/burstpistol": {
    "value": "Sicarus"
  },
  "/lotus/storeitems/weapons/tenno/pistol/crossbow": {
    "value": "Bolto"
  },
  "/lotus/storeitems/weapons/tenno/pistol/handshotgun": {
    "value": "Bronco"
  },
  "/lotus/storeitems/weapons/tenno/pistol/heavypistol": {
    "value": "Lex"
  },
  "/lotus/storeitems/weapons/tenno/pistol/latoprime": {
    "value": "Lato Prime"
  },
  "/lotus/storeitems/weapons/tenno/pistol/latovandal": {
    "value": "Lato Vandal"
  },
  "/lotus/storeitems/weapons/tenno/pistol/pistol": {
    "value": "Lato"
  },
  "/lotus/storeitems/weapons/tenno/pistol/revolverpistol": {
    "value": "Vasto"
  },
  "/lotus/storeitems/weapons/tenno/pistols/automatichandcrossbow/autocrossbow": {
    "value": "Ballistica"
  },
  "/lotus/storeitems/weapons/tenno/pistols/conclaveleverpistol/conclaveleverpistol": {
    "value": "Zylok"
  },
  "/lotus/storeitems/weapons/tenno/pistols/dexfuris/dexfuris": {
    "value": "Dex Furis"
  },
  "/lotus/storeitems/weapons/tenno/pistols/harlequingun/harlequinpistols": {
    "value": "Akzani"
  },
  "/lotus/storeitems/weapons/tenno/pistols/magnum/magnum": {
    "value": "Magnus"
  },
  "/lotus/storeitems/weapons/tenno/pistols/primelex/primelex": {
    "value": "Lex Prime"
  },
  "/lotus/storeitems/weapons/tenno/pistols/primesicarus/primesicaruspistol": {
    "value": "Sicarus Prime"
  },
  "/lotus/storeitems/weapons/tenno/pistols/primevasto/primevastopistol": {
    "value": "Vasto Prime"
  },
  "/lotus/storeitems/weapons/tenno/pistols/sawnoffshotgun/tennohandshotgun": {
    "value": "Pyrana"
  },
  "/lotus/storeitems/weapons/tenno/pistols/somasidearm/akimbosomapistols": {
    "value": "Aksomati"
  },
  "/lotus/storeitems/weapons/tenno/pistols/tennouzi/tennouzi": {
    "value": "Akstiletto"
  },
  "/lotus/storeitems/weapons/tenno/pistols/tigrisredeemersetpistol/tnobladedpistols": {
    "value": "Akjagara"
  },
  "/lotus/storeitems/weapons/tenno/pistols/tigristwin/tigristwin": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/tenno/pistols/tnbardpistol/tnbardpistolgun": {
    "value": "Pandero"
  },
  "/lotus/storeitems/weapons/tenno/rifle/boltorifle": {
    "value": "Boltor"
  },
  "/lotus/storeitems/weapons/tenno/rifle/bratonprime": {
    "value": "Braton Prime"
  },
  "/lotus/storeitems/weapons/tenno/rifle/burstrifle": {
    "value": "Burston"
  },
  "/lotus/storeitems/weapons/tenno/rifle/heavyrifle": {
    "value": "Gorgon"
  },
  "/lotus/storeitems/weapons/tenno/rifle/latronprime": {
    "value": "Latron Prime"
  },
  "/lotus/storeitems/weapons/tenno/rifle/rifle": {
    "value": "Braton"
  },
  "/lotus/storeitems/weapons/tenno/rifle/semiautorifle": {
    "value": "Latron"
  },
  "/lotus/storeitems/weapons/tenno/rifle/sniperrifle": {
    "value": "Snipetron"
  },
  "/lotus/storeitems/weapons/tenno/rifle/startingrifle": {
    "value": "Mk1-braton"
  },
  "/lotus/storeitems/weapons/tenno/rifle/tennoar": {
    "value": "Soma"
  },
  "/lotus/storeitems/weapons/tenno/rifle/tennosniperrifle": {
    "value": "Vectis"
  },
  "/lotus/storeitems/weapons/tenno/rifle/vandalsniperrifle": {
    "value": "Snipetron Vandal"
  },
  "/lotus/storeitems/weapons/tenno/rifle/viprifle": {
    "value": "Braton Vandal"
  },
  "/lotus/storeitems/weapons/tenno/shotgun/doublebarrelshotgun": {
    "value": "Sobek"
  },
  "/lotus/storeitems/weapons/tenno/shotgun/fullautoshotgun": {
    "value": "Boar"
  },
  "/lotus/storeitems/weapons/tenno/shotgun/primeboar": {
    "value": "Boar Prime"
  },
  "/lotus/storeitems/weapons/tenno/shotgun/quadshotgun": {
    "value": "Hek"
  },
  "/lotus/storeitems/weapons/tenno/shotgun/shotgun": {
    "value": "Strun"
  },
  "/lotus/storeitems/weapons/tenno/shotgun/shotgunvandal": {
    "value": "Strun Wraith"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/cylidagger/cylidagger": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/kunai": {
    "value": "Kunai"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/lidagger/lidagger": {
    "value": "[Placeholder]"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/primethrowingstar/primehikou": {
    "value": "Hikou Prime"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/stalkerkunai": {
    "value": "Despair"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/stickybomb/stickybombs": {
    "value": "Castanas"
  },
  "/lotus/storeitems/weapons/tenno/throwingweapons/tennostars": {
    "value": "Hikou"
  },
  "/lotus/storeitems/weapons/voidtrader/prismagrakata": {
    "value": "Prisma Grakata"
  },
  "/lotus/storeitems/weapons/voidtrader/prismaskana": {
    "value": "Prisma Skana"
  },
  "/lotus/storeitems/weapons/voidtrader/vtdetron": {
    "value": "Mara Detron"
  },
  "/lotus/types/boosterpacks/randomprojection": {
    "value": "Relic Pack"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyaimglide": {
    "desc": "Kill 20 Enemies while Aim Gliding",
    "value": "Glider"
  },
  "/lotus/types/challenges/seasons/daily/seasondailybulletjump": {
    "desc": "Bullet Jump 150 times",
    "value": "Trampoline"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycodexscan": {
    "desc": "Scan 25 Objects or Enemies",
    "value": "Researcher"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycollectcredits": {
    "desc": "Pick up 15,000 Credits",
    "value": "Saver"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycollecthundredresources": {
    "desc": "Collect 1,500 Resources",
    "value": "Gatherer"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycompletemission": {
    "desc": "Complete a Mission",
    "value": "Agent"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycompletemissionmelee": {
    "desc": "Complete a Mission with only a Melee Weapon equipped",
    "value": "Swordsman"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycompletemissionprimary": {
    "desc": "Complete a Mission with only a Primary Weapon equipped",
    "value": "Hands Full"
  },
  "/lotus/types/challenges/seasons/daily/seasondailycompletemissionsecondary": {
    "desc": "Complete a Mission with only a Secondary Weapon equipped",
    "value": "Sidearm"
  },
  "/lotus/types/challenges/seasons/daily/seasondailydeployairsupport": {
    "desc": "Deploy an Air Support Charge in a Mission",
    "value": "Air It Out"
  },
  "/lotus/types/challenges/seasons/daily/seasondailydeployglyph": {
    "desc": "Deploy a Glyph while in a mission",
    "value": "Graffiti"
  },
  "/lotus/types/challenges/seasons/daily/seasondailydeployspecter": {
    "desc": "Deploy a Specter",
    "value": "Doppelganger"
  },
  "/lotus/types/challenges/seasons/daily/seasondailydonateleverian": {
    "desc": "Donate to the Leverian",
    "value": "Patron"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyinteractwithpet": {
    "desc": "Interact with your Kubrow or Kavat",
    "value": "Loyalty"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemies": {
    "desc": "Kill 200 Enemies",
    "value": "Warning Shot"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswhileonkdrive": {
    "desc": "Kill 20 enemies while riding a K-Drive.",
    "value": "Surf's Up!"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithabilities": {
    "desc": "Kill 150 Enemies with Abilities",
    "value": "Power Trip"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithblast": {
    "desc": "Kill 150 Enemies with Blast Damage",
    "value": "Detonator"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithcorrosive": {
    "desc": "Kill 150 Enemies with Corrosive Damage",
    "value": "Meltdown"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithelectricity": {
    "desc": "Kill 150 Enemies with Electricity Damage",
    "value": "Short Circuit"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithfinishers": {
    "desc": "Kill 10 Enemies with Finishers",
    "value": "Executioner"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithfire": {
    "desc": "Kill 150 Enemies with Heat Damage",
    "value": "Arsonist"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithfreeze": {
    "desc": "Kill 150 Enemies with Cold Damage",
    "value": "Deep Freeze"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithgas": {
    "desc": "Kill 150 Enemies with Gas Damage",
    "value": "Biohazard"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithheadshots": {
    "desc": "Kill 40 Enemies with Headshots",
    "value": "Marksman"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithmagnetic": {
    "desc": "Kill 150 Enemies with Magnetic damage",
    "value": "Attractive"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithmelee": {
    "desc": "Kill 150 Enemies with a Melee Weapon",
    "value": "Sword Dance"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithpoison": {
    "desc": "Kill 150 Enemies with Toxin Damage",
    "value": "Poisoner"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithprimary": {
    "desc": "Kill 150 Enemies with a Primary Weapon",
    "value": "Mow Them Down"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithradiation": {
    "desc": "Kill 150 Enemies with a Radiation Damage",
    "value": "Reactor"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithsecondary": {
    "desc": "Kill 150 Enemies with a Secondary Weapon",
    "value": "Smaller Is Bigger"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillenemieswithviral": {
    "desc": "Kill 150 Enemies with Viral Damage",
    "value": "Go Viral"
  },
  "/lotus/types/challenges/seasons/daily/seasondailykillthrall": {
    "desc": "Kill a Kuva Thrall",
    "value": "Hush"
  },
  "/lotus/types/challenges/seasons/daily/seasondailylichnode": {
    "desc": "Clear a personal Lich Influenced Node",
    "value": "Reclaimed"
  },
  "/lotus/types/challenges/seasons/daily/seasondailymercykill": {
    "desc": "Mercy Kill an Enemy",
    "value": "No Mercy"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyopenlockers": {
    "desc": "Open 20 lockers",
    "value": "Kleptomaniac"
  },
  "/lotus/types/challenges/seasons/daily/seasondailypickupenergy": {
    "desc": "Pick up 20 Energy Orbs",
    "value": "Energizing"
  },
  "/lotus/types/challenges/seasons/daily/seasondailypickupmedallion": {
    "desc": "Find 5 Syndicate Medallions",
    "value": "The Hunt is On"
  },
  "/lotus/types/challenges/seasons/daily/seasondailypickupmods": {
    "desc": "Pick up 8 Mods",
    "value": "Shiny"
  },
  "/lotus/types/challenges/seasons/daily/seasondailypilotfallenmech": {
    "desc": "Find and pilot a Fallen Necramech on Deimos.",
    "value": "Reanimator"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyplacemarker": {
    "desc": "Mark 5 Mods or Resources",
    "value": "Communicator"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyplayemote": {
    "desc": "Play 1 Emote",
    "value": "Expressive"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyplayminigame": {
    "desc": "Play a game of Frame Fighter, Happy Zephyr, or Wyrmius",
    "value": "Child at Heart"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyrailjackhijackdestroythree": {
    "desc": "While piloting a hijacked Crewship, destroy 3 enemy Fighters",
    "value": "Friendly Fire"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyrequiemtotem": {
    "desc": "Activate a Requiem Obelisk on Deimos.",
    "value": "Ancient Obelisk"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyslidekills": {
    "desc": "Kill 20 Enemies while Sliding",
    "value": "Accelerator"
  },
  "/lotus/types/challenges/seasons/daily/seasondailysolveciphers": {
    "desc": "Hack 8 Consoles",
    "value": "Hacker"
  },
  "/lotus/types/challenges/seasons/daily/seasondailysuspendfiveenemies": {
    "desc": "Suspend 5 or more enemies in the air at once with a Heavy Slam Melee Attack",
    "value": "Deep Impact"
  },
  "/lotus/types/challenges/seasons/daily/seasondailytransmutemods": {
    "desc": "Complete 3 Transmutations",
    "value": "Everything Old is New Again"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyvisitfeatureddojo": {
    "desc": "Visit a Featured Dojo",
    "value": "Just Visiting"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyafirmshake": {
    "desc": "Shake the hand of a fellow Tenno using the Handshake Emote",
    "value": "A Firm Handshake"
  },
  "/lotus/types/challenges/seasons/daily/seasondailytwoforone": {
    "desc": "Pierce and kill 2 or more enemies in a single Bow shot",
    "value": "Two For One"
  },
  "/lotus/types/challenges/seasons/daily/seasondailybuilderstouch": {
    "desc": "Claim an item from your Foundry",
    "value": "Builder's Touch"
  },
  "/lotus/types/challenges/seasons/daily/seasondailydeathfromabove": {
    "desc": "Kill 10 enemies with ground slams",
    "value": "Death from Above"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyaugmentation": {
    "desc": "Install an Augment Mod on your Warframe",
    "value": "Augmentation"
  },
  "/lotus/types/challenges/seasons/daily/seasondailytoppingoffthetank": {
    "desc": "Successfully defend an Excavator without allowing it to run out of power",
    "value": "Topping Off the Tank"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyliquidation": {
    "desc": "Sell any item in your Inventory for Credits",
    "value": "Liquidation"
  },
  "/lotus/types/challenges/seasons/daily/seasondailymedic": {
    "desc": "Revive a fellow Tenno or a Companion",
    "value": "Medic"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyswatter": {
    "desc": "Kill 3 Drones or Ospreys with your Melee Weapon",
    "value": "Swatter"
  },
  "/lotus/types/challenges/seasons/daily/seasondailythepersonaltouch": {
    "desc": "Place 1 decoration in your Orbiter",
    "value": "The Personal Touch"
  },
  "/lotus/types/challenges/seasons/daily/seasondailystayontop": {
    "desc": "Kill 20 enemies using a Necramech while hovering",
    "value": "Stay on Top"
  },
  "/lotus/types/challenges/seasons/daily/seasondailyhijackcrewship": {
    "desc": "Hijack a Crewship from the enemy",
    "value": "Confiscated"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyboardingpartynodamage": {
    "desc": "Clear a Railjack Boarding Party without your Warframe taking damage",
    "value": "Flawless"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycatchrareplainsfish": {
    "desc": "Catch 6 Rare Fish in the Plains of Eidolon",
    "value": "Earth Fisher"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycatchrarevenusfish": {
    "desc": "Catch 6 Rare Servofish in the Orb Vallis",
    "value": "Venus Fisher"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompleteassassination": {
    "desc": "Complete 3 Assassination missions",
    "value": "Assassin"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletecapture": {
    "desc": "Complete 3 Capture missions",
    "value": "Jailer"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompleteclemmission": {
    "desc": "Help Clem with his weekly mission",
    "value": "Good Friend"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletedisruptionconduits": {
    "desc": "Complete 12 Conduits in Disruption",
    "value": "Don't Blow It"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompleteexterminate": {
    "desc": "Complete 3 Exterminate missions",
    "value": "Eliminator"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompleteinvasionmissions": {
    "desc": "Complete 9 Invasion missions of any type",
    "value": "Invader"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletekuva": {
    "desc": "Complete 3 Kuva Siphon Missions",
    "value": "Don't Fear The Reaper"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletemobiledefense": {
    "desc": "Complete 3 Mobile Defense missions",
    "value": "Protector"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletenightmaremissions": {
    "desc": "Complete 3 Nightmare missions of any type",
    "value": "Sound Sleeper"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompleterescue": {
    "desc": "Complete 3 Rescue missions",
    "value": "Rescuer"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletesabotage": {
    "desc": "Complete 3 Sabotage missions",
    "value": "Saboteur"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletesortie": {
    "desc": "Complete 1 Sorties",
    "value": "Sortie Specialist"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletespy": {
    "desc": "Complete 3 Spy missions",
    "value": "Operative"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletesyndicatemissions": {
    "desc": "Complete 10 Syndicate misions",
    "value": "Supporter"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletetreasures": {
    "desc": "Fully socket 3 Ayatan Sculptures",
    "value": "Animator"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklycompletevenusrace": {
    "desc": "Complete 3 different K-Drive races in Orb Vallis",
    "value": "Now Boarding"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklydestroycrewshipartillery": {
    "desc": "Destroy a Crewship with Forward Artillery",
    "value": "Forward Thinking"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyfeedhelminth": {
    "desc": "Feed the Helminth any resource",
    "value": "Feed The Beast"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklygildmodular": {
    "desc": "Gild 1 Modular Items",
    "value": "Gilded"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyhijackcrewship": {
    "desc": "Hijack a Crewship from the enemy",
    "value": "Confiscated"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyisolationbounties": {
    "desc": "Complete an Isolation Vault Bounty Mission on Deimos",
    "value": "Vault Raider"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklykillarchgunenemies": {
    "desc": "Kill 500 enemies with an Archgun",
    "value": "Heavy Ordnance"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklykillenemies": {
    "desc": "Kill 500 Enemies",
    "value": "Not a Warning Shot"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklykillenemiesinmech": {
    "desc": "Kill 100 enemies with a Mech.",
    "value": "Necralizer"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklykilleximus": {
    "desc": "Kill 30 Eximus",
    "value": "Eximus Eliminator"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklykillthumper": {
    "desc": "Kill a Tusk Thumper in the Plains of Eidolon",
    "value": "Tusk Thumpin"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyminerareplainsresources": {
    "desc": "Mine 6 Rare Gems in the Plains of Eidolon",
    "value": "Earth Miner"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyminerarevenusresources": {
    "desc": "Mine 6 Rare Gems in the Orb Vallis",
    "value": "Venus Miner"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyperfectanimalcapture": {
    "desc": "Complete 6 different Perfect Animal Captures in Orb Vallis",
    "value": "Conservationist"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklypickupraremods": {
    "desc": "Pick up 8 Rare Mods",
    "value": "Enhance!"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyplainsbounties": {
    "desc": "Complete 5 different Bounties in the Plains of Eidolon",
    "value": "Earth Bounty Hunter"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyrailjackmissions": {
    "desc": "Complete 3 Railjack Missions",
    "value": "Explorer"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklysabotagecaches": {
    "desc": "Find all caches in 3 Sabotage missions",
    "value": "Cache Hunter"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklysanctuaryonslaught": {
    "desc": "Complete 8 waves of Sanctuary Onslaught",
    "value": "Test Subject"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklysimarisscan": {
    "desc": "Complete 5 Scans for Cephalon Simaris",
    "value": "Sanctuary Researcher"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyunlockdragonvaults": {
    "desc": "Unlock 4 Orokin Vaults",
    "value": "Vault Looter"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyunlockrelics": {
    "desc": "Unlock 3 Relics",
    "value": "Unlock Relics"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyuseforma": {
    "desc": "Polarize a Weapon, Companion, or Warframe (not in Simulacrum).",
    "value": "Polarized"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyvenusbounties": {
    "desc": "Complete 5 different bounties in the Orb Vallis",
    "value": "Venus Bounty Hunter"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklynightandday": {
    "desc": "Collect 15 Vome or Fass Residue in the Cambion Drift",
    "value": "Night and Day"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyloyalty": {
    "desc": "Gain a total of 5,000 Standing across all Syndicate factions",
    "value": "Loyalty"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklymadlab": {
    "desc": "Plunder one of Alad V's secret laboratories on Jupiter",
    "value": "Mad Lab"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklybloodthirsty": {
    "desc": "Kill 20 enemies in 5 seconds",
    "value": "Bloodthirsty"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklytheoldways": {
    "desc": "Complete 1 mission with only a single pistol and a glaive equipped",
    "value": "The Old Ways"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyeternalguardian": {
    "desc": "Complete 3 Void Armageddon missions",
    "value": "Eternal Guardian"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyzarimanbountyhunter": {
    "desc": "Complete 4 different Bounties in the Zariman",
    "value": "Zariman Bounty Hunter"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyhighground": {
    "desc": "Complete 3 Void Flood missions",
    "value": "High Ground"
  },
  "/lotus/types/challenges/seasons/weekly/seasonweeklyrailjackhijackdestroythree": {
    "desc": "While piloting a hijacked Crewship, destroy 3 enemy Fighters",
    "value": "Friendly Fire"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardcollectuniqueresources": {
    "desc": "Collect 20 different types of resources.",
    "value": "Resource Scavenger"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardcompletenightmaremissions": {
    "desc": "Complete 10 Nightmare missions of any type",
    "value": "Night Terror"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardcompletesortie": {
    "desc": "Complete 3 Sorties",
    "value": "Sortie Expert"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardcompletesteelpathmissions": {
    "desc": "Complete 5 Steel Path Missions.",
    "value": "The Path Less Travelled"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardelitesanctuaryonslaught": {
    "desc": "Complete 8 Zones of Elite Sanctuary Onslaught",
    "value": "Elite Test Subject"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardexterminatenoalarm": {
    "desc": "Complete an Extermination mission with level 30 or higher enemies without being detected",
    "value": "Silent Eliminator"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfastcapture": {
    "desc": "Finish a Capture mission in less than 90 seconds",
    "value": "Speedster"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfinishlich": {
    "desc": "Kill or Convert a Kuva Lich",
    "value": "Choose Wisely"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfriendsdefense": {
    "desc": "Complete a Defense mission reaching at least Wave 20",
    "value": "Defense"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfriendsprofittaker": {
    "desc": "Kill Profit-Taker",
    "value": "Profit-Taker"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfriendssurvival": {
    "desc": "Complete a Survival mission reaching at least 30 minutes",
    "value": "Survival"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardindexwinstreak": {
    "desc": "Win 3 wagers in a row without letting the enemy score in one match of The Index.",
    "value": "Day Trader"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillenemies": {
    "desc": "Kill 1,500 Enemies",
    "value": "Kill Shot"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillenemiessteelpath": {
    "desc": "Kill 1,000 Enemies on The Steel Path.",
    "value": "Cold Steel"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkilleximus": {
    "desc": "Kill 100 Eximus",
    "value": "Eximus Executioner"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillexploiterorb": {
    "desc": "Kill The Exploiter Orb",
    "value": "Nothing but Profit"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillorcapturerainalyst": {
    "desc": "Kill or Capture an Eidolon Hydrolyst",
    "value": "Hydrolyst Hunter"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillropalolyst": {
    "desc": "Defeat the Ropalolyst",
    "value": "Flying High"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillsilvergrovespecters": {
    "desc": "Kill a Silver Grove Specter",
    "value": "Grove Guardian"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkillthumper": {
    "desc": "Kill a Tusk Thumper Doma in the Plains of Eidolon",
    "value": "Walk Without Rhythm"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardkuvasurvivalnocapsules": {
    "desc": "Survive for over 30 minutes in Kuva Survival",
    "value": "Hold Your Breath"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardluapuzzles": {
    "desc": "Complete 4 Halls of Ascension on Lua",
    "value": "Ascendant"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardrailjackmissions": {
    "desc": "Complete 8 Railjack Missions",
    "value": "Elite Explorer"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardspymanualnoalarms": {
    "desc": "Complete a Spy mission with 3 manual console hacks and no alarms",
    "value": "Machine Interference"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardunlockrelics": {
    "desc": "Unlock 10 Relics",
    "value": "Unlock Relics"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardantiquarian": {
    "desc": "Open one of each era/tier of Relic (Lith, Meso, Neo, Axi)",
    "value": "Antiquarian"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardterminated": {
    "desc": "Destroy 3 Necramech vault guardians",
    "value": "Terminated"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardthepriceoffreedom": {
    "desc": "Free one Captured Solaris using a Granum Crown",
    "value": "The Price of Freedom"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardthemanymadewhole": {
    "desc": "Convert 10 Riven Slivers into a Riven Mod",
    "value": "The Many Made Whole"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardriseofthemachine": {
    "desc": "Kill 300 enemies using a Necramech without getting destroyed",
    "value": "Rise of the Machine"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfallenangel": {
    "desc": "Defeat 5 Void Angels in the Zariman",
    "value": "Fallen Angel"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardcompletearchonhunt": {
     "desc": "Complete an Archon Hunt",
     "value": "Archon Hunter"
  },
  "/lotus/types/challenges/seasons/weeklyhard/seasonweeklyhardfriendsmirrordefense": {
    "desc": "Complete 3 waves of Mirror Defense",
    "value": "Crystal Clear"
  },
  "/lotus/types/enemies/acolytes/areacasteracolyteagent": {
    "value": "Misery"
  },
  "/lotus/types/enemies/acolytes/areacasteracolyteavatar": {
    "value": "Misery Avatar"
  },
  "/lotus/types/enemies/acolytes/controlacolyteagent": {
    "value": "Torment"
  },
  "/lotus/types/enemies/acolytes/duellistacolyteagent": {
    "value": "Violence"
  },
  "/lotus/types/enemies/acolytes/heavyacolyteagent": {
    "value": "Malice"
  },
  "/lotus/types/enemies/acolytes/rogueacolyteagent": {
    "value": "Mania"
  },
  "/lotus/types/enemies/acolytes/rogueacolyteavatar": {
    "value": "Mania Avatar"
  },
  "/lotus/types/enemies/acolytes/strikeracolyteagent": {
    "value": "Angst"
  },
  "/lotus/types/enemies/acolytes/strikeracolyteavatar": {
    "value": "Angst Avatar"
  },
  "/lotus/types/enemies/capturetargets/capturetargetcorpus": {
    "value": "Capture Target Corpus"
  },
  "/lotus/types/enemies/capturetargets/capturetargetcorpusnullifieravatar": {
    "value": "Capture Target Corpus Nullifier Avatar"
  },
  "/lotus/types/enemies/capturetargets/capturetargetgrineer": {
    "value": "Capture Target Grineer"
  },
  "/lotus/types/enemies/capturetargets/capturetargetmarooavatar": {
    "value": "Capture Target Ma Roo Avatar"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/lasercannonbipedavatarleader": {
    "value": "Laser Cannon Biped Avatar Leader"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/laserdiscbipedavatarleader": {
    "value": "Laser Disc Biped Avatar Leader"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/railgunbipedavatarleader": {
    "value": "Railgun Biped Avatar Leader"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/riotbipedcontrolavatar": {
    "value": "Riot Biped Control Avatar"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/riotbipeddispersionavatar": {
    "value": "Riot Biped Dispersion Avatar"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/riotbipedpreventionavatar": {
    "value": "Riot Biped Prevention Avatar"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/shockwavebipedavatarleader": {
    "value": "Shockwave Biped Avatar Leader"
  },
  "/lotus/types/enemies/corpus/bipedrobot/aiweek/supermoabipedavatarleader": {
    "value": "Super Moa Biped Avatar Leader"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/discdroneavatar": {
    "value": "Disc Drone Avatar"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/discdroneavatarleader": {
    "value": "Disc Drone Avatar Leader"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/leechdroneavatarleader": {
    "value": "Leech Drone Avatar Leader"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/minedroneavatarleader": {
    "value": "Mine Drone Avatar Leader"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/shielddroneavatarleader": {
    "value": "Shield Drone Avatar Leader"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/suicidedroneavatar": {
    "value": "Suicide Drone Avatar"
  },
  "/lotus/types/enemies/corpus/drones/aiweek/vacdroneavatarleader": {
    "value": "Vac Drone Avatar Leader"
  },
  "/lotus/types/enemies/corpus/gamemodes/deployablespacemanwardenavatar": {
    "value": "Deployable Spaceman Warden Avatar"
  },
  "/lotus/types/enemies/corpus/gamemodes/deployablespacemanwardenavatarleader": {
    "value": "Deployable Spaceman Warden Avatar Leader"
  },
  "/lotus/types/enemies/corpus/quadrobot/microhyenaavatar": {
    "value": "Micro Hyena Avatar"
  },
  "/lotus/types/enemies/corpus/quadrobot/miniboss/quadrobotminibossavatar": {
    "value": "Quad Robot Mini Boss Avatar"
  },
  "/lotus/types/enemies/corpus/quadrobot/miniboss/shielddroneminibossavatar": {
    "value": "Shield Drone Mini Boss Avatar"
  },
  "/lotus/types/enemies/corpus/quadrobot/miniboss/turretquadminibossavatar": {
    "value": "Turret Quad Mini Boss Avatar"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/carrierspacemanavatar": {
    "value": "Carrier Spaceman Avatar"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/deployablespacemanavatarleader": {
    "value": "Deployable Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/nullifyspacemanavatar": {
    "value": "Nullify Spaceman Avatar"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/nullifyspacemanavatarleader": {
    "value": "Nullify Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/riflespacemanavatarleader": {
    "value": "Rifle Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/shotgunspacemanavatarleader": {
    "value": "Shotgun Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/corpus/spaceman/aiweek/sniperspacemanavatarleader": {
    "value": "Sniper Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/corpus/spaceman/elitespacemanavatarleader": {
    "value": "Elite Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/corpus/spaceman/modularspacemanavatarskatinglaser": {
    "value": "Modular Spaceman Avatar Skating Laser"
  },
  "/lotus/types/enemies/corpus/spaceman/modularspacemanavatarskatingshield": {
    "value": "Modular Spaceman Avatar Skating Shield"
  },
  "/lotus/types/enemies/corpus/spaceman/modularspacemanavatarskatingtesla": {
    "value": "Modular Spaceman Avatar Skating Tesla"
  },
  "/lotus/types/enemies/corpus/spaceman/modularspacemanavatarwalkinglaser": {
    "value": "Modular Spaceman Avatar Walking Laser"
  },
  "/lotus/types/enemies/corpus/spaceman/modularspacemanavatarwalkingshield": {
    "value": "Modular Spaceman Avatar Walking Shield"
  },
  "/lotus/types/enemies/corpus/spaceman/modularspacemanavatarwalkingtesla": {
    "value": "Modular Spaceman Avatar Walking Tesla"
  },
  "/lotus/types/enemies/corpus/specialevents/armoredjackal/armoredjackalagent": {
    "value": "Razorback"
  },
  "/lotus/types/enemies/corpus/turrets/turretavatars/autoturretheavyavatar": {
    "value": "Auto Turret Heavy Avatar"
  },
  "/lotus/types/enemies/corpus/turrets/turretavatars/securitycameranarrowavatar": {
    "value": "Security Camera Narrow Avatar"
  },
  "/lotus/types/enemies/corpus/vip/hyena/hyenagunavatar": {
    "value": "Hyena Gun Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teama/ccteamarifleavatar": {
    "value": "C C Team A Rifle Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teama/ccteamaskateavatar": {
    "value": "C C Team A Skate Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teama/ccteamaskatebavatar": {
    "value": "C C Team A Skate B Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teama/ccteamazanukaavatar": {
    "value": "C C Team A Zanuka Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamb/ccteambdisruptoravatar": {
    "value": "C C Team B Disruptor Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamb/ccteambhyenaavatar": {
    "value": "C C Team B Hyena Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamb/ccteambospreyavatar": {
    "value": "C C Team B Osprey Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamb/ccteambriotmoaavatar": {
    "value": "C C Team B Riot Moa Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamc/ccteamcdeceptionavatar": {
    "value": "C C Team C Deception Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamc/ccteamcmoaavatar": {
    "value": "C C Team C Moa Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamc/ccteamcsimplifiedhackeravatar": {
    "value": "C C Team C Simplified Hacker Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamc/ccteamcstealthavatar": {
    "value": "C C Team C Stealth Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamd/ccteamdbusteraavatar": {
    "value": "C C Team D Buster A Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamd/ccteamdbusterbavatar": {
    "value": "C C Team D Buster B Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamd/ccteamdbustercavatar": {
    "value": "C C Team D Buster C Avatar"
  },
  "/lotus/types/enemies/corpuschampions/teamd/ccteamdospreyavatar": {
    "value": "C C Team D Osprey Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/beastmasteravatar": {
    "value": "Beast Master Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/bladesawmanavatarleader": {
    "value": "Blade Sawman Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/carrierriflelanceravatar": {
    "value": "Carrier Rifle Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/catmasteravatar": {
    "value": "Cat Master Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/combatcatbrowavatar": {
    "value": "Combat Catbrow Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/combatkubrowavatar": {
    "value": "Combat Kubrow Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/eliteriflelanceravatarleader": {
    "value": "Elite Rifle Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/eviseratorlanceravatar": {
    "value": "Eviserator Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/femalegrineeravatarleader": {
    "value": "Female Grineer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/flamelanceravatarleader": {
    "value": "Flame Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/grineerdefectoravatar": {
    "value": "Grineer Defector Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/grineermeleestaffavatar": {
    "value": "Grineer Melee Staff Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/grineermeleestaffavatarleader": {
    "value": "Grineer Melee Staff Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/heavyfemalegrineeravatarleader": {
    "value": "Heavy Female Grineer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/incendiarybombardavatarleader": {
    "value": "Incendiary Bombard Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/jetpackmarineavatar": {
    "value": "Jetpack Marine Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/jetpackmarinecarrieravatar": {
    "value": "Jetpack Marine Carrier Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/jetpackmeleeavatar": {
    "value": "Jetpack Melee Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/jetpacksniperavatar": {
    "value": "Jetpack Sniper Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/machetewomanavatarleader": {
    "value": "Machete Woman Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/manicgrineeravatar": {
    "value": "Manic Grineer Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/nightwatchmanicavatar": {
    "value": "Nightwatch Manic Avatar"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/pistonsawmanavatarleader": {
    "value": "Piston Sawman Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/riflelanceravatarleader": {
    "value": "Rifle Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/rocketbombardavatarleader": {
    "value": "Rocket Bombard Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/rollingdroneavatarleader": {
    "value": "Rolling Drone Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/shieldlanceravatarleader": {
    "value": "Shield Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/shotgunlanceravatarleader": {
    "value": "Shotgun Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/aiweek/avatars/stickyrollingdroneavatar": {
    "value": "Sticky Rolling Drone Avatar"
  },
  "/lotus/types/enemies/grineer/deathsquad/avatars/deathsquadavatara": {
    "value": "Death Squad Avatar A"
  },
  "/lotus/types/enemies/grineer/deathsquad/avatars/deathsquadavatarb": {
    "value": "Death Squad Avatar B"
  },
  "/lotus/types/enemies/grineer/deathsquad/avatars/deathsquadavatarc": {
    "value": "Death Squad Avatar C"
  },
  "/lotus/types/enemies/grineer/deathsquad/avatars/deathsquadsentinelavatar": {
    "value": "Death Squad Sentinel Avatar"
  },
  "/lotus/types/enemies/grineer/desert/avatars/bladesawmanavatarleader": {
    "value": "Blade Sawman Avatar Leader"
  },
  "/lotus/types/enemies/grineer/desert/avatars/eliteriflelanceravatarleader": {
    "value": "Elite Rifle Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/desert/avatars/riflelanceravatarleader": {
    "value": "Rifle Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/forest/avatars/bladesawmanavatarleader": {
    "value": "Blade Sawman Avatar Leader"
  },
  "/lotus/types/enemies/grineer/forest/avatars/evisceratorlanceravatarleader": {
    "value": "Eviscerator Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/forest/avatars/riflelanceravatarleader": {
    "value": "Rifle Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/forest/avatars/shotgunlanceravatarleader": {
    "value": "Shotgun Lancer Avatar Leader"
  },
  "/lotus/types/enemies/grineer/forest/heavyfemalegrineeravatardesertleader": {
    "value": "Heavy Female Grineer Avatar Desert Leader"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressbeastmasteravatar": {
    "value": "Fortress Beast Master Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressbladesawmanavatar": {
    "value": "Fortress Blade Sawman Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortresscombatkubrowavatar": {
    "value": "Fortress Combat Kubrow Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortresseliteriflelanceravatar": {
    "value": "Fortress Elite Rifle Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressfemalegrineeravatar": {
    "value": "Fortress Female Grineer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressflamelanceravatar": {
    "value": "Fortress Flame Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressgrineermarinepistolavatar": {
    "value": "Fortress Grineer Marine Pistol Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressheavyfemalegrineeravatar": {
    "value": "Fortress Heavy Female Grineer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressincendiarybombardavatar": {
    "value": "Fortress Incendiary Bombard Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressmachetewomanavatar": {
    "value": "Fortress Machete Woman Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortresspistonsawmanavatar": {
    "value": "Fortress Piston Sawman Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressriflelanceravatar": {
    "value": "Fortress Rifle Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressrocketbombardavatar": {
    "value": "Fortress Rocket Bombard Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressrollingdroneavatar": {
    "value": "Fortress Rolling Drone Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressshieldlanceravatar": {
    "value": "Fortress Shield Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/fortressshotgunlanceravatar": {
    "value": "Fortress Shotgun Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/grineerautoflameturretavatar": {
    "value": "Grineer Auto Flame Turret Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/grineerautorocketturretavatar": {
    "value": "Grineer Auto Rocket Turret Avatar"
  },
  "/lotus/types/enemies/grineer/fortress/avatars/grineerautoturretavatar": {
    "value": "Grineer Auto Turret Avatar"
  },
  "/lotus/types/enemies/grineer/gamemodes/wardengrineerheavyavatarleader": {
    "value": "Warden Grineer Heavy Avatar Leader"
  },
  "/lotus/types/enemies/grineer/gfssecuritycameranarrowavatar": {
    "value": "Gfs Security Camera Narrow Avatar"
  },
  "/lotus/types/enemies/grineer/gfssecuritycamerawallmounted": {
    "value": "Gfs Security Camera Wall Mounted"
  },
  "/lotus/types/enemies/grineer/grineerautoturretstaticavatar": {
    "value": "Grineer Auto Turret Static Avatar"
  },
  "/lotus/types/enemies/grineer/grineeravatars/grineermarinepistolavatarleader": {
    "value": "Grineer Marine Pistol Avatar Leader"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/bladesawmanavatar": {
    "value": "Blade Sawman Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/eliteriflelanceravatar": {
    "value": "Elite Rifle Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/femalegrineermacheteavatar": {
    "value": "Female Grineer Machete Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/femalegrineersniperavatar": {
    "value": "Female Grineer Sniper Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/riflelanceravatar": {
    "value": "Rifle Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/sealabmanicbombardavatar": {
    "value": "Sea Lab Manic Bombard Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/sealabmanicgrineeravatar": {
    "value": "Sea Lab Manic Grineer Avatar"
  },
  "/lotus/types/enemies/grineer/sealab/avatars/shotgunlanceravatar": {
    "value": "Shotgun Lancer Avatar"
  },
  "/lotus/types/enemies/grineer/specialevents/forestdroneavatar": {
    "value": "Forest Drone Avatar"
  },
  "/lotus/types/enemies/grineer/vip/hek/hekbipedavatar": {
    "value": "Hek Biped Avatar"
  },
  "/lotus/types/enemies/grineer/vip/hek/hekdroneavatar": {
    "value": "Hek Drone Avatar"
  },
  "/lotus/types/enemies/grineer/vip/hek/propdrones/propdroneavatar": {
    "value": "Prop Drone Avatar"
  },
  "/lotus/types/enemies/grineer/vip/hek/propdrones/strikedroneavatar": {
    "value": "Strike Drone Avatar"
  },
  "/lotus/types/enemies/grineer/vip/tylregor/tylregoravatar": {
    "value": "Tyl Regor Avatar"
  },
  "/lotus/types/enemies/grineer/vip/vortwo/vortwobossavatar": {
    "value": "Vor Two Boss Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionbeastmasteravatar": {
    "value": "Grineer Champion Beastmaster Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionchargeravatar": {
    "value": "Grineer Champion Charger Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionengineeravatar": {
    "value": "Grineer Champion Engineer Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampiongruntavatar": {
    "value": "Grineer Champion Grunt Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionhealeravatar": {
    "value": "Grineer Champion Healer Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionheavyavatar": {
    "value": "Grineer Champion Heavy Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionjetpackavatar": {
    "value": "Grineer Champion Jetpack Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionsniperavatar": {
    "value": "Grineer Champion Sniper Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampionsniperdecoyavatar": {
    "value": "Grineer Champion Sniper Decoy Avatar"
  },
  "/lotus/types/enemies/grineerchampions/grineerchampiontankavatar": {
    "value": "Grineer Champion Tank Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/ancientavatarleader": {
    "value": "Ancient Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/diseasedancientavatar": {
    "value": "Diseased Ancient Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/diseasedancientavatarleader": {
    "value": "Diseased Ancient Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/healingancientavatarleader": {
    "value": "Healing Ancient Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/pussblobdeco": {
    "value": "Puss Blob Deco"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/spawningancientavatar": {
    "value": "Spawning Ancient Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/spawningancientavatarleader": {
    "value": "Spawning Ancient Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/ancients/toxicancientavatarleader": {
    "value": "Toxic Ancient Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/crawlers/grenadeavatar": {
    "value": "Grenade Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/crawlers/grenadeavatarleader": {
    "value": "Grenade Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/crawlers/lightningavatar": {
    "value": "Lightning Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/crawlers/lightningavatarleader": {
    "value": "Lightning Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/crawlers/noxiouscrawleravatar": {
    "value": "Noxious Crawler Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/infesteddrones/cellcarrierdroneavatar": {
    "value": "Cell Carrier Drone Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/infesteddrones/poisondroneavatar": {
    "value": "Poison Drone Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/infestedmoas/nanitecloudbipedavatar": {
    "value": "Nanite Cloud Biped Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/infestedmoas/nanitecloudbipedavatarleader": {
    "value": "Nanite Cloud Biped Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/infestedmoas/slowbombbipedavatar": {
    "value": "Slow Bomb Biped Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/infestedmoas/slowbombbipedavatarleader": {
    "value": "Slow Bomb Biped Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/quadrupeds/juggernautavatar": {
    "value": "Juggernaut Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/quadrupeds/juggernautavatarboss": {
    "value": "Juggernaut Avatar Boss"
  },
  "/lotus/types/enemies/infested/aiweek/quadrupeds/quadrupedavatar": {
    "value": "Quadruped Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/quadrupeds/quadrupedavatarleader": {
    "value": "Quadruped Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/quadrupeds/rusheravatar": {
    "value": "Rusher Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/runners/leapingrunneravatar": {
    "value": "Leaping Runner Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/runners/leapingrunneravatarleader": {
    "value": "Leaping Runner Avatar Leader"
  },
  "/lotus/types/enemies/infested/aiweek/runners/runneravatar": {
    "value": "Runner Avatar"
  },
  "/lotus/types/enemies/infested/aiweek/runners/suiciderunneravatar": {
    "value": "Suicide Runner Avatar"
  },
  "/lotus/types/enemies/infested/vip/avatars/golemfullavatar": {
    "value": "Golem Full Avatar"
  },
  "/lotus/types/enemies/infested/vip/avatars/golemgrenadeheadavatar": {
    "value": "Golem Grenade Head Avatar"
  },
  "/lotus/types/enemies/infested/vip/avatars/golemgunheadavatar": {
    "value": "Golem Gun Head Avatar"
  },
  "/lotus/types/enemies/infested/vip/avatars/golemmeleeheadavatar": {
    "value": "Golem Melee Head Avatar"
  },
  "/lotus/types/enemies/infested/vip/avatars/hitproxies/golembodyblockingproxy": {
    "value": "Golem Body Blocking Proxy"
  },
  "/lotus/types/enemies/infested/vip/avatars/hitproxies/golemheadbodyblockingproxy": {
    "value": "Golem Head Body Blocking Proxy"
  },
  "/lotus/types/enemies/infested/vip/avatars/quadrupedvipavatar": {
    "value": "Quadruped V I P Avatar"
  },
  "/lotus/types/enemies/infested/vip/avatars/zombieleaderavatar": {
    "value": "Zombie Leader Avatar"
  },
  "/lotus/types/enemies/infested/vip/golemfullgrenadeweakspothitproxy": {
    "value": "Golem Full Grenade Weak Spot Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/golemfullgunweakspothitproxy": {
    "value": "Golem Full Gun Weak Spot Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/golemfullmeleeweakspothitproxy": {
    "value": "Golem Full Melee Weak Spot Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/golemgrenadeweakspothitproxy": {
    "value": "Golem Grenade Weak Spot Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/golemgunweakspothitproxy": {
    "value": "Golem Gun Weak Spot Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/golemmeleesechitproxy": {
    "value": "Golem Melee Sec Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/golemmeleeweakspothitproxy": {
    "value": "Golem Melee Weak Spot Hit Proxy"
  },
  "/lotus/types/enemies/infested/vip/infestedgrenadedeco": {
    "value": "Infested Grenade Deco"
  },
  "/lotus/types/enemies/orokin/orokinautoturretavatar": {
    "value": "Orokin Auto Turret Avatar"
  },
  "/lotus/types/enemies/orokin/orokinbladesawmanavatar": {
    "value": "Orokin Blade Sawman Avatar"
  },
  "/lotus/types/enemies/orokin/orokinbladesawmanavatarleader": {
    "value": "Orokin Blade Sawman Avatar Leader"
  },
  "/lotus/types/enemies/orokin/orokindroneattackavatar": {
    "value": "Orokin Drone Attack Avatar"
  },
  "/lotus/types/enemies/orokin/orokinhealingancientavatar": {
    "value": "Orokin Healing Ancient Avatar"
  },
  "/lotus/types/enemies/orokin/orokinhealingancientleaderavatar": {
    "value": "Orokin Healing Ancient Leader Avatar"
  },
  "/lotus/types/enemies/orokin/orokinheavyfemaleavatar": {
    "value": "Orokin Heavy Female Avatar"
  },
  "/lotus/types/enemies/orokin/orokinheavyfemaleleaderavatar": {
    "value": "Orokin Heavy Female Leader Avatar"
  },
  "/lotus/types/enemies/orokin/orokinmoabipedavatar": {
    "value": "Orokin Moa Biped Avatar"
  },
  "/lotus/types/enemies/orokin/orokinmoabipedleaderavatar": {
    "value": "Orokin Moa Biped Leader Avatar"
  },
  "/lotus/types/enemies/orokin/orokinnullifyspacemanavatar": {
    "value": "Orokin Nullify Spaceman Avatar"
  },
  "/lotus/types/enemies/orokin/orokinnullifyspacemanavatarleader": {
    "value": "Orokin Nullify Spaceman Avatar Leader"
  },
  "/lotus/types/enemies/orokin/orokinrocketbombardavatar": {
    "value": "Orokin Rocket Bombard Avatar"
  },
  "/lotus/types/enemies/orokin/orokinrocketbombardavatarleader": {
    "value": "Orokin Rocket Bombard Avatar Leader"
  },
  "/lotus/types/enemies/orokin/orokinshielddroneavatar": {
    "value": "Orokin Shield Drone Avatar"
  },
  "/lotus/types/enemies/orokin/orokinshielddroneleaderavatar": {
    "value": "Orokin Shield Drone Leader Avatar"
  },
  "/lotus/types/enemies/orokin/riflelanceravatar": {
    "value": "Rifle Lancer Avatar"
  },
  "/lotus/types/enemies/orokin/riflelancerleaderavatar": {
    "value": "Rifle Lancer Leader Avatar"
  },
  "/lotus/types/enemies/orokin/riflespacemanavatar": {
    "value": "Rifle Spaceman Avatar"
  },
  "/lotus/types/enemies/orokin/riflespacemanleaderavatar": {
    "value": "Rifle Spaceman Leader Avatar"
  },
  "/lotus/types/enemies/quests/sandmanboss/inarosgolemavatar": {
    "value": "Inaros Golem Avatar"
  },
  "/lotus/types/enemies/quests/sandmanboss/sandmanbossavatar": {
    "value": "Sandman Boss Avatar"
  },
  "/lotus/types/enemies/quests/sandmanboss/sandmanreplicaavatar": {
    "value": "Sandman Replica Avatar"
  },
  "/lotus/types/enemies/sentients/scouts/scoutavatar": {
    "value": "Scout Avatar"
  },
  "/lotus/types/enemies/sentients/troopers/sentientmeleetrooperavatar": {
    "value": "Sentient Melee Trooper Avatar"
  },
  "/lotus/types/enemies/sentients/troopers/sentienttrooperavatar": {
    "value": "Sentient Trooper Avatar"
  },
  "/lotus/types/enemies/spacebattles/grineer/drones/grineerspacedroneavatar": {
    "value": "Grineer Space Drone Avatar"
  },
  "/lotus/types/enemies/spacebattles/grineer/drones/laserdroneavatar": {
    "value": "Laser Drone Avatar"
  },
  "/lotus/types/enemies/spacebattles/grineer/pods/combatpodavatar": {
    "value": "Combat Pod Avatar"
  },
  "/lotus/types/enemies/spacebattles/grineer/skiffs/grineerspacemarineavatar": {
    "value": "Grineer Space Marine Avatar"
  },
  "/lotus/types/enemies/spacebattles/grineer/skiffs/missileskiffavatarleader": {
    "value": "Missile Skiff Avatar Leader"
  },
  "/lotus/types/enemies/spacebattles/grineer/skiffs/shieldskiffavatar": {
    "value": "Shield Skiff Avatar"
  },
  "/lotus/types/enemies/stalker/sentientstalkeravatar": {
    "value": "Sentient Stalker Avatar"
  },
  "/lotus/types/enemies/stalker/stalkeravatar": {
    "value": "Stalker Avatar"
  },
  "/lotus/types/enemies/tennoreplicants/fairyquest/knavelokidecoyavatar": {
    "value": "Knave Loki Decoy Avatar"
  },
  "/lotus/types/enemies/tennoreplicants/syndicateallies/colonyrescueallies/colonistrescuesteelmeridianavatard": {
    "value": "Colonist Rescue Steel Meridian Avatar D"
  },
  "/lotus/types/enemies/tennoreplicants/syndicateallies/steelmeridianallyavatarb": {
    "value": "Steel Meridian Ally Avatar B"
  },
  "/lotus/types/enemies/tennoreplicants/tennoreplicantchromaavatar": {
    "value": "Tenno Replicant Chroma Avatar"
  },
  "/lotus/types/enemies/tennoreplicants/tennoreplicantchromaavatarderelict": {
    "value": "Tenno Replicant Chroma Avatar Derelict"
  },
  "/lotus/types/friendly/agents/coredefenseavatar": {
    "value": "Core Defense Avatar"
  },
  "/lotus/types/friendly/agents/defenseavatar": {
    "value": "Defense Avatar"
  },
  "/lotus/types/friendly/agents/defensecomputeravatar": {
    "value": "Defense Computer Avatar"
  },
  "/lotus/types/friendly/agents/defensecomputercorpusavatar": {
    "value": "Defense Computer Corpus Avatar"
  },
  "/lotus/types/friendly/agents/defensecomputerfortavatar": {
    "value": "Defense Computer Fort Avatar"
  },
  "/lotus/types/friendly/agents/defensecorepipeavatargrineer": {
    "value": "Defense Core Pipe Avatar Grineer"
  },
  "/lotus/types/friendly/agents/eventforestdefenseavatar": {
    "value": "Event Forest Defense Avatar"
  },
  "/lotus/types/friendly/agents/excavatoravatar": {
    "value": "Excavator Avatar"
  },
  "/lotus/types/friendly/agents/friendlyavatar": {
    "value": "Friendly Avatar"
  },
  "/lotus/types/friendly/agents/hivemode/infestedhiveavatare": {
    "value": "Infested Hive Avatar E"
  },
  "/lotus/types/friendly/agents/infestedbaitavatar": {
    "value": "Infested Bait Avatar"
  },
  "/lotus/types/friendly/agents/orokindefenseavatar": {
    "value": "Orokin Defense Avatar"
  },
  "/lotus/types/friendly/agents/orokinmobiledefenseavatar": {
    "value": "Orokin Mobile Defense Avatar"
  },
  "/lotus/types/friendly/agents/orokinsabotageconsoleavatar": {
    "value": "Orokin Sabotage Console Avatar"
  },
  "/lotus/types/friendly/agents/payloadatvavatar": {
    "value": "Payload A T V Avatar"
  },
  "/lotus/types/friendly/clemavatar": {
    "value": "Clem Avatar"
  },
  "/lotus/types/friendly/pets/kubrowpetavatar": {
    "value": "Kubrow Pet Avatar"
  },
  "/lotus/types/game/catbrowpet/catbrowgeneticsignature": {
    "value": "Kavat Genetic Code"
  },
  "/lotus/types/game/catbrowpet/cheshirecatbrowpetpowersuit": {
    "value": "Smeeta"
  },
  "/lotus/types/game/catbrowpet/mirrorcatbrowpetpowersuit": {
    "value": "Adarza"
  },
  "/lotus/types/game/crewship/ships/railjack": {
    "value": "Railjack"
  },
  "/lotus/types/game/decorations/miningmachineobjective": {
    "value": "Mining Machine Objective"
  },
  "/lotus/types/game/enemyspecs/corpusalamgamendless": {
    "value": "Amalgam Endless"
  },
  "/lotus/types/game/enemyspecs/infestedsurvivalb": {
    "value": "Invested Survival"
  },
  "/lotus/types/game/enemyspecs/specialmissionspecs/disruptioncorpusamalgams": {
    "value": "Disruption Amalgams"
  },
  "/lotus/types/game/events/orbeventglypheight": {
    "value": "Data-hash 8"
  },
  "/lotus/types/game/events/orbeventglypheleven": {
    "value": "Data-hash 11"
  },
  "/lotus/types/game/events/orbeventglyphfifteen": {
    "value": "Data-hash 15"
  },
  "/lotus/types/game/events/orbeventglyphfive": {
    "value": "Data-hash 5"
  },
  "/lotus/types/game/events/orbeventglyphfour": {
    "value": "Data-hash 4"
  },
  "/lotus/types/game/events/orbeventglyphfourteen": {
    "value": "Data-hash 14"
  },
  "/lotus/types/game/events/orbeventglyphnine": {
    "value": "Data-hash 9"
  },
  "/lotus/types/game/events/orbeventglyphone": {
    "value": "Data-hash 1"
  },
  "/lotus/types/game/events/orbeventglyphseven": {
    "value": "Data-hash 7"
  },
  "/lotus/types/game/events/orbeventglyphsix": {
    "value": "Data-hash 6"
  },
  "/lotus/types/game/events/orbeventglyphsixteen": {
    "value": "Data-hash 16"
  },
  "/lotus/types/game/events/orbeventglyphten": {
    "value": "Data-hash 10"
  },
  "/lotus/types/game/events/orbeventglyphthirteen": {
    "value": "Data-hash 13"
  },
  "/lotus/types/game/events/orbeventglyphthree": {
    "value": "Data-hash 3"
  },
  "/lotus/types/game/events/orbeventglyphtwelve": {
    "value": "Data-hash 12"
  },
  "/lotus/types/game/events/orbeventglyphtwo": {
    "value": "Data-hash 2"
  },
  "/lotus/types/game/kubrowpet/adventurerkubrowpetpowersuit": {
    "value": "Sahasa"
  },
  "/lotus/types/game/kubrowpet/chargerkubrowpetpowersuit": {
    "value": "Helminth Charger"
  },
  "/lotus/types/game/kubrowpet/furtivekubrowpetpowersuit": {
    "value": "Huras"
  },
  "/lotus/types/game/kubrowpet/guardkubrowpetpowersuit": {
    "value": "Raksa"
  },
  "/lotus/types/game/kubrowpet/hunterkubrowpetpowersuit": {
    "value": "Sunika"
  },
  "/lotus/types/game/kubrowpet/patterns/helminthpetpatternclassic": {
    "value": "Helminth Degenerate Pattern"
  },
  "/lotus/types/game/kubrowpet/patterns/kubrowpetpatternxmasc": {
    "value": "Arklut Gene-Masking Kit"
  },
  "/lotus/types/game/kubrowpet/retrieverkubrowpetpowersuit": {
    "value": "Chesa"
  },
  "/lotus/types/game/library/targets/research1target": {
    "value": "Lancer"
  },
  "/lotus/types/game/library/targets/research2target": {
    "value": "Anti Moa"
  },
  "/lotus/types/game/library/targets/research3target": {
    "value": "Arid Eviscerator"
  },
  "/lotus/types/game/library/targets/research4target": {
    "value": "Corrupted Ancient"
  },
  "/lotus/types/game/library/targets/research5target": {
    "value": "Crewman"
  },
  "/lotus/types/game/library/targets/research6target": {
    "value": "Runner"
  },
  "/lotus/types/game/library/targets/research7target": {
    "value": "Guardsman"
  },
  "/lotus/types/game/miningmachineobjective": {
    "value": "Mining Machine Objective"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/ghoulbountytablearewards": {
    "value": "100 Endo, Lith B3 Relic, Lith P1 Relic, Hunter Adrenaline, Encrypted Journal Fragment, Hunter Munitions, Stubba Blueprint, Hunter Track"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/ghoulbountytablebrewards": {
    "value": "300 Endo, Neo L1 Relic, Neo V7 Relic, Hunter Recovery, Encrypted Journal Fragment, Hunter Synergy, Quartakk Blueprint, Hunter Command"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tieratablearewards": {
    "value": "Redirection, Oxium x100, 1500 Credits Cache, 50 Endo, Iradite x15, Gara Chassis Blueprint, Point Blank, Streamline, Morphics x2"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tieratablebrewards": {
    "value": "Pressure Point, Cryotic x100, 1500 Credit Cache, 50 Endo, Grokdrul x15, Gara Chassis Blueprint, Hornet Strike, Stretch, Morphics x2"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tieratablecrewards": {
    "value": "Vitality, Plastids x200, 1500 Credits Cache, 50 Endo, Nistlepod x15, Gara Chassis Blueprint, Point Blank, Intensify, Gallium x2"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierbtablearewards": {
    "value": "Steel Fiber, 200 Oxium, 2500 Credit Cache, 100 Endo, Lith B3 Relic, Gara Systems Blueprint, Charged Chamber, Burning Wasp, 2s Control Module"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierbtablebrewards": {
    "value": "Energy Inversion, Cryotic x200, 2500 Credits Cache, 100 Endo, Lith V5 Relic, Gara Systems Blueprint, Speed Trigger, Reaping Spiral, Neural Sensors x2"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierbtablecrewards": {
    "value": "Point Strike, Circuits x300, 2500 Credits Cache, 100 Endo, Lith T2 Relic, Gara Systems Blueprint, Enhanced Durability, Grim Fury, Orokin Cell x2"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierctablearewards": {
    "value": "Gladiator Aegis, MAdurai Lens, Cetus Wisp, 200 Endo, Meso D2 Relic, Gara Neuroptics Blueprint, Augur Accord, Shimmering Blight, Vigilante Supplies"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierctablebrewards": {
    "value": "Vigilante Armaments, Vazarin Lens, Unairu Lens, 200 Endo, Meso Z1 Relic, Gara Neuroptics Blueprint, Gladiator Might, Fracturing Wind, Augur Seeker"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierctablecrewards": {
    "value": "Augur Pact, Naramon Lens, Zenurik Lens, 200 Endo, Meso B2 Relic, Gara Neuroptics Blueprint, Vigilante Fervor, Swirling Tiger, Gladiator Vice"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierdtablearewards": {
    "value": "Gladiator Rush, Unairu Lens, Madurai Lens, 300 Endo, Neo L1 Relic, Cetus Wisp, Augur Reach, Eleventh Storm, Vigilante Offense"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierdtablebrewards": {
    "value": "Vigilante Vigor, Zenurik Lens, Vazarin Lens, 300 Endo, Neo N8 Relic, Cetus Wisp, Gladiator Resolve, Gemini Cross, Augur Secrets"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tierdtablecrewards": {
    "value": "Augur Message, Kuva x100, Naramon Lens, 300 Endo, Neo V7 Relic, Cetus Wisp, Vigilante Pursuit, Sinking Talon, Gladiator Finesse"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tieretablearewards": {
    "value": "Breath of the Eidolon x5, Axi K3 Relic, Cetus Wisp x2, Kuva x300, Furax Wraith Gauntlet, Carving Mantis, Eidolon Lens Blueprint"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tieretablebrewards": {
    "value": "Breath of the Eidolon x5, Axi O3 Relic, Cetus Wisp x2, Kuva x300, Furax Wraith Right Gauntlet, Swooping Falcon, Eidolon Lens Blueprint"
  },
  "/lotus/types/game/missiondecks/eidolonjobmissionrewards/tieretablecrewards": {
    "value": "Breath of the Eidolon x5, Axi L2 Relic, Cetus Wisp x2, Kuva x300, Furax Wraith Blueprint, Twirling Spire, Eidolon Lens Blueprint"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustieratablearewards": {
    "value": "1500 Credit Cache, 50 Endo, Mytocardia Spore x5, Oxium x100, Training Dept-Bond x2, 3000 Credit Cache, Garuda Chassis Blueprint, Tepa Nodule x5, Neo A2 Relic"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustieratablebrewards": {
    "value": "1500 Credit Cache, 50 Endo, Cryotic x100, Thermal Sludge x5, Training Dept-Bond x2, 3000 Credit Cache, Garuda Chassis Blueprint, Tepa Nodule x5, Neo A2 Relic"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustieratablecrewards": {
    "value": "1500 Credit Cache, 50 Endo, Gorgaricus Spore x5, Plastids x100, Training Dept-Bond x2, 3000 Credit Cache, Garuda Chassis Blueprint, Tepa Nodule x5, Neo A2 Relic"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierbtablearewards": {
    "value": "100 Endo, 2500 Credit Cache, Mytocardia Spore x15, Oxium x200, Shelter Debt-Bond x2, Garuda Systems Blueprint, Lith B5 Relic, Tepa Nodule x5, Synth Charge"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierbtablebrewards": {
    "value": "100 Endo, 2500 Credit Cache, Cryotic x200, Shelter Debt-Bond x2, Thermal Sludge x15, Garuda Systems Blueprint, Lith B5 Relic, Tepa Nodule x5, Mecha Overdrive"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierbtablecrewards": {
    "value": "100 Endo, 2500 Credit Cache, Gorgaricus Spore x15, Nano Spores x200, Shelter Debt-Bond x2, Garuda Systems Blueprint, Lith B5 Relic, Tepa Nodule x5, Tek Assault"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierctablearewards": {
    "value": "200 Endo, Circuits x300, Madurai Lens, Medical Debt-Bond x2, Garuda Neurooptics Blueprint, Meso S8 Relic, Synth Deconstruct"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierctablebrewards": {
    "value": "200 Endo, Medical Debt-Bond x2, Plastids x300, Unairu Lens, Garuda Neurooptics Blueprint, Meso S8 Relic, Mecha Recharge"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierctablecrewards": {
    "value": "200 Endo, Medical Debt-Bond x2, Naramon Lens, Rubedo x300, Garuda Neurooptics Blueprint, Meso S8 Relic, Tek Enhance"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierdtablearewards": {
    "value": "300 Endo, Advanced Debt-Bond x2, Fieldron x2, Vazarin Lens, Neo K2 Relic, Tellurium, Synth Fiber"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierdtablebrewards": {
    "value": "300 Endo, Advanced Debt-Bond x2, Detonite Injector x2, Zenurik Lens, Neo G1 Relic, Tellurium, Mecha Empowered"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustierdtablecrewards": {
    "value": "300 Endo, Advanced Debt-Bond x2, Kuva x200, Mutagen Mass x2, Neo A2 Relic, Tellurium, Tek Gravity"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustieretablearewards": {
    "value": "10000 Credit Cache, 400 Endo, Familiar Debt-Bond x2, Axi C3 Relic, Kuva x500, Synth Reflex"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustieretablebrewards": {
    "value": "10000 Credit Cache, 400 Endo, Familiar Debt-Bond x2, Axi K4 Relic, Kuva x500, Mecha Pulse"
  },
  "/lotus/types/game/missiondecks/venusjobmissionrewards/venustieretablecrewards": {
    "value": "400 Endo, Familiar Debt-Bond x2, Neurodes, Orokin Cell, Axi L2 Relic, Kuva x500, Tek Collateral"
  },
  "/lotus/types/game/notepacks/bardcorpuspacka": {
    "value": "Alpha Instruments"
  },
  "/lotus/types/game/notepacks/bardcorpuspackb": {
    "value": "Beta Instruments"
  },
  "/lotus/types/game/notepacks/bardcorpuspackc": {
    "value": "Gamma Instruments"
  },
  "/lotus/types/game/notepacks/bardcorpuspackd": {
    "value": "Delta Instruments"
  },
  "/lotus/types/game/notepacks/bardgrineerpacka": {
    "value": "Druk Instruments"
  },
  "/lotus/types/game/projections/t2voidprojectionalertsarynprimebronze": {
    "value": "Meso S9 Relic"
  },
  "/lotus/types/game/projections/t3voidprojectionalertsarynprimebronze": {
    "value": "Neo S10 Relic"
  },
  "/lotus/types/game/projections/t4voidprojectionalertsarynprimebronze": {
    "value": "Axi N6 Relic"
  },
  "/lotus/types/game/projections/t5voidprojectionimmortalabronze": {
    "value": "Requiem I Relic"
  },
  "/lotus/types/game/projections/t5voidprojectionimmortalbbronze": {
    "value": "Requiem II Relic"
  },
  "/lotus/types/game/projections/t5voidprojectionimmortalcbronze": {
    "value": "Requiem III Relic"
  },
  "/lotus/types/game/projections/t5voidprojectionimmortaldbronze": {
    "value": "Requiem IV Relic"
  },
  "/lotus/types/game/solarrails/basicsolarrail": {
    "value": "Solar Rail - Tower Class"
  },
  "/lotus/types/gameplay/eidolon/jobs/assassinatebountyass": {
    "value": "Assassinate the Commander"
  },
  "/lotus/types/gameplay/eidolon/jobs/assassinatebountycap": {
    "value": "Capture the New Grineer Commander"
  },
  "/lotus/types/gameplay/eidolon/jobs/attritionbountycap": {
    "value": "Capture Their Leader"
  },
  "/lotus/types/gameplay/eidolon/jobs/attritionbountyext": {
    "value": "Cull the Enemy"
  },
  "/lotus/types/gameplay/eidolon/jobs/attritionbountylib": {
    "value": "Weaken the Grineer Foothold"
  },
  "/lotus/types/gameplay/eidolon/jobs/attritionbountysab": {
    "value": "Sabotage the Enemy Supply Lines"
  },
  "/lotus/types/gameplay/eidolon/jobs/capturebountycapone": {
    "value": "Capture the Grineer Commander"
  },
  "/lotus/types/gameplay/eidolon/jobs/capturebountycaptwo": {
    "value": "Spy Catcher"
  },
  "/lotus/types/gameplay/eidolon/jobs/events/ghoulalertbountyass": {
    "value": "Eliminate A Ghoul Alpha"
  },
  "/lotus/types/gameplay/eidolon/jobs/events/ghoulalertbountyext": {
    "value": "Wipe out Ghoul Burial Grounds"
  },
  "/lotus/types/gameplay/eidolon/jobs/events/ghoulalertbountyhunt": {
    "value": "Purge a Massive Ghoul Burial Site"
  },
  "/lotus/types/gameplay/eidolon/jobs/events/ghoulalertbountyres": {
    "value": "Rescue the Ghoul Defector"
  },
  "/lotus/types/gameplay/eidolon/jobs/events/infestedplainsbounty": {
    "value": "Plague Star"
  },
  "/lotus/types/gameplay/eidolon/jobs/narmer/assassinatebountyass": {
    "value": "Rise and Fall (Narmer)"
  },
  "/lotus/types/gameplay/eidolon/jobs/narmer/attritionbountyext": {
    "value": "For the Unum (Narmer)"
  },
  "/lotus/types/gameplay/eidolon/jobs/narmer/attritionbountylib": {
    "value": "Bring Them Home (Narmer)"
  },
  "/lotus/types/gameplay/eidolon/jobs/reclamationbountycache": {
    "value": "Find the Hidden Artifact"
  },
  "/lotus/types/gameplay/eidolon/jobs/reclamationbountycap": {
    "value": "Capture the Grineer Agent"
  },
  "/lotus/types/gameplay/eidolon/jobs/reclamationbountytheft": {
    "value": "Reclaim the Stolen Artifact"
  },
  "/lotus/types/gameplay/eidolon/jobs/rescuebountyresc": {
    "value": "Search and Rescue"
  },
  "/lotus/types/gameplay/eidolon/jobs/sabotagebountysab": {
    "value": "Sabotage Bounty"
  },
  "/lotus/types/gameplay/eidolon/resources/cetuswispitem": {
    "value": "Cetus Wisp"
  },
  "/lotus/types/gameplay/grineer/brokenlight": {
    "value": "Broken Light"
  },
  "/lotus/types/gameplay/grineer/doorsensordeco": {
    "value": "Door Sensor Deco"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimosareadefensebounty": {
    "value": "Reclaim What's Ours"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimosassassinatebounty": {
    "value": "Cleanse the Land"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimoscrpsurvivorbounty": {
    "value": "For Science!"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimosendlessexcavatebounty": {
    "value": "Strip Mining (Endless)"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimosendlesspurifybounty": {
    "value": "Anomaly Retrieval (Endless)"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimosexcavatebounty": {
    "value": "Core Samples"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimosgrnsurvivorbounty": {
    "value": "Brute Force"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimoskeypiecesbounty": {
    "value": "Salvage"
  },
  "/lotus/types/gameplay/infestedmicroplanet/jobs/deimospurifybounty": {
    "value": "Anomaly Retrieval"
  },
  "/lotus/types/gameplay/infestedmicroplanet/resources/necraloids/necraloidstandingcommonitem": {
    "value": "Orokin Orientation Matrix"
  },
  "/lotus/types/gameplay/infestedmicroplanet/resources/necraloids/necraloidstandinguncommonitem": {
    "value": "Orokin Ballistics Matrix"
  },
  "/lotus/types/gameplay/infestedmicroplanet/resources/necraloids/necraloidstandingrareitem": {
    "value": "Orokin Animus Matrix"
  },
  "/lotus/types/gameplay/venus/jobs/narmer/narmervenusculljobassassinate": {
    "value": "Master's Voice (Narmer)"
  },
  "/lotus/types/gameplay/venus/jobs/narmer/narmervenusculljobexterminate": {
    "value": "Crush the Cult (Narmer)"
  },
  "/lotus/types/gameplay/venus/jobs/narmer/narmervenustheftjobexcavation": {
    "value": "Digging for Narmer (Narmer)"
  },
  "/lotus/types/gameplay/venus/jobs/venusartifactjobambush": {
    "value": "Courier Ambush"
  },
  "/lotus/types/gameplay/venus/jobs/venusartifactjobexcavation": {
    "value": "Archaeology"
  },
  "/lotus/types/gameplay/venus/jobs/venusartifactjobrecovery": {
    "value": "Blood Relics"
  },
  "/lotus/types/gameplay/venus/jobs/venuschaosjobassassinate": {
    "value": "Scorched Earth"
  },
  "/lotus/types/gameplay/venus/jobs/venuschaosjobexcavation": {
    "value": "Bury Them"
  },
  "/lotus/types/gameplay/venus/jobs/venusculljobassassinate": {
    "value": "Network Collapse"
  },
  "/lotus/types/gameplay/venus/jobs/venusculljobexterminate": {
    "value": "Hunter-Killer"
  },
  "/lotus/types/gameplay/venus/jobs/venusculljobresource": {
    "value": "Distract and Divert"
  },
  "/lotus/types/gameplay/venus/jobs/venushelpingjobcaches": {
    "value": "Seems Legit"
  },
  "/lotus/types/gameplay/venus/jobs/venushelpingjobresource": {
    "value": "Dirt Unit"
  },
  "/lotus/types/gameplay/venus/jobs/venushelpingjobspy": {
    "value": "Dog Boards"
  },
  "/lotus/types/gameplay/venus/jobs/venusinteljobrecovery": {
    "value": "Proof of Life"
  },
  "/lotus/types/gameplay/venus/jobs/venusinteljobresource": {
    "value": "Operational Intelligence"
  },
  "/lotus/types/gameplay/venus/jobs/venusinteljobspy": {
    "value": "Financial Liberation"
  },
  "/lotus/types/gameplay/venus/jobs/venuspreservationjobdefense": {
    "value": "Picket Duty"
  },
  "/lotus/types/gameplay/venus/jobs/venuspreservationjobrecovery": {
    "value": "Protect the Innocent"
  },
  "/lotus/types/gameplay/venus/jobs/venuspreservationjobresource": {
    "value": "Trash Their Traps"
  },
  "/lotus/types/gameplay/venus/jobs/venusspyjobspy": {
    "value": "Agent Down"
  },
  "/lotus/types/gameplay/venus/jobs/venustheftjobambush": {
    "value": "Software Subterfuge"
  },
  "/lotus/types/gameplay/venus/jobs/venustheftjobexcavation": {
    "value": "Resource Theft"
  },
  "/lotus/types/gameplay/venus/jobs/venustheftjobresource": {
    "value": "Tax the Taxmen"
  },
  "/lotus/types/gameplay/venus/jobs/venuswetworkjobassassinate": {
    "value": "Served Cold"
  },
  "/lotus/types/gameplay/venus/jobs/venuswetworkjobspy": {
    "value": "Falling Star"
  },
  "/lotus/types/items/fusiontreasures/orofusexb": {
    "value": "Ayr Ayatan Sculpture"
  },
  "/lotus/types/items/miscitems/actuator": {
    "value": "Actuators"
  },
  "/lotus/types/items/miscitems/alertium": {
    "value": "Nitain Extract"
  },
  "/lotus/types/items/miscitems/alloyplate": {
    "value": "Alloy Plate"
  },
  "/lotus/types/items/miscitems/alphacorruptorresource": {
    "value": "Alpha Corruptor"
  },
  "/lotus/types/items/miscitems/archwingnavcode": {
    "value": "Orokin Archive"
  },
  "/lotus/types/items/miscitems/argoncrystal": {
    "value": "Argon Crystal"
  },
  "/lotus/types/items/miscitems/beacon": {
    "value": "Proof Fragment"
  },
  "/lotus/types/items/miscitems/betacorruptorresource": {
    "value": "Beta Corruptor"
  },
  "/lotus/types/items/miscitems/bossnavcode": {
    "value": "Lephantis Nav Coordinate"
  },
  "/lotus/types/items/miscitems/circuits": {
    "value": "Circuits"
  },
  "/lotus/types/items/miscitems/controlmodule": {
    "value": "Control Module"
  },
  "/lotus/types/items/miscitems/cryotic": {
    "value": "Cryotic"
  },
  "/lotus/types/items/miscitems/dangerroomkey": {
    "value": "Simulacrum Access Key"
  },
  "/lotus/types/items/miscitems/datafragment": {
    "value": "Tethra Data Fragments"
  },
  "/lotus/types/items/miscitems/eventium": {
    "value": "Synthula"
  },
  "/lotus/types/items/miscitems/ferrite": {
    "value": "Ferrite"
  },
  "/lotus/types/items/miscitems/forma": {
    "value": "Forma"
  },
  "/lotus/types/items/miscitems/gallium": {
    "value": "Gallium"
  },
  "/lotus/types/items/miscitems/heknavcode": {
    "value": "Vay Hek Nav Coordinate [Obsolete??]"
  },
  "/lotus/types/items/miscitems/infestedaladcoordinate": {
    "value": "Mutalist Alad V Nav Coordinate"
  },
  "/lotus/types/items/miscitems/juggernautparta": {
    "value": "Pulsating Tubercles"
  },
  "/lotus/types/items/miscitems/juggernautpartb": {
    "value": "Infected Palpators"
  },
  "/lotus/types/items/miscitems/juggernautpartc": {
    "value": "Chitinous Husk"
  },
  "/lotus/types/items/miscitems/juggernautpartd": {
    "value": "Severed Bile Sac"
  },
  "/lotus/types/items/miscitems/libraryscannerdoublescanupgrade": {
    "value": "Cross-matrix Widget"
  },
  "/lotus/types/items/miscitems/libraryscannerrechargeupgrade": {
    "value": "Sol-battery Widget"
  },
  "/lotus/types/items/miscitems/libraryscannerscanspeedupgrade": {
    "value": "Vector-thread Widget"
  },
  "/lotus/types/items/miscitems/miragecode": {
    "value": "Orokin Cipher"
  },
  "/lotus/types/items/miscitems/morphic": {
    "value": "Morphics"
  },
  "/lotus/types/items/miscitems/nanospores": {
    "value": "Nano Spores"
  },
  "/lotus/types/items/miscitems/navcode": {
    "value": "Nav Coordinate"
  },
  "/lotus/types/items/miscitems/neuralsensor": {
    "value": "Neural Sensors"
  },
  "/lotus/types/items/miscitems/neurode": {
    "value": "Neurodes"
  },
  "/lotus/types/items/miscitems/norawolfcreds": {
    "value": "Wolf Cred"
  },
  "/lotus/types/items/miscitems/omegaisotope": {
    "value": "Omega Isotope"
  },
  "/lotus/types/items/miscitems/orokincatalyst": {
    "value": "Orokin Catalyst"
  },
  "/lotus/types/items/miscitems/orokincell": {
    "value": "Orokin Cell"
  },
  "/lotus/types/items/miscitems/orokinreactor": {
    "value": "Orokin Reactor"
  },
  "/lotus/types/items/miscitems/oxiumalloy": {
    "value": "Oxium"
  },
  "/lotus/types/items/miscitems/plastids": {
    "value": "Plastids"
  },
  "/lotus/types/items/miscitems/polymerbundle": {
    "value": "Polymer Bundle"
  },
  "/lotus/types/items/miscitems/primebucks": {
    "value": "Orokin Ducats"
  },
  "/lotus/types/items/miscitems/razorbackcipherpartpickup": {
    "value": "Cryptographic ALU"
  },
  "/lotus/types/items/miscitems/rubedo": {
    "value": "Rubedo"
  },
  "/lotus/types/items/miscitems/salvage": {
    "value": "Salvage"
  },
  "/lotus/types/items/miscitems/stablecorruptorresource": {
    "value": "Stable Corruptor"
  },
  "/lotus/types/items/miscitems/tellurium": {
    "value": "Tellurium"
  },
  "/lotus/types/items/miscitems/utilityunlocker": {
    "value": "Exilus Adapter"
  },
  "/lotus/types/items/miscitems/vayhekcoordinatefragmenta": {
    "value": "Delta Beacon"
  },
  "/lotus/types/items/miscitems/vayhekcoordinatefragmentb": {
    "value": "Gamma Beacon"
  },
  "/lotus/types/items/miscitems/vayhekcoordinatefragmentc": {
    "value": "Kappa Beacon"
  },
  "/lotus/types/items/miscitems/vayhekcoordinatefragmentd": {
    "value": "Omega Beacon"
  },
  "/lotus/types/items/miscitems/voidteardrop": {
    "value": "Void Traces"
  },
  "/lotus/types/items/plants/daycommonplant": {
    "value": "Day Common Plant"
  },
  "/lotus/types/items/plants/dayrareplant": {
    "value": "Day Rare Plant"
  },
  "/lotus/types/items/plants/dayuncommonplant": {
    "value": "Day Un Common Plant"
  },
  "/lotus/types/items/plants/gftplantruksclawmatureplant": {
    "value": "Gft Plant Ruks Claw Mature Plant"
  },
  "/lotus/types/items/plants/mossgroundcoveraplant": {
    "value": "Moss Ground Cover A Plant"
  },
  "/lotus/types/items/plants/nightcommonplant": {
    "value": "Night Common Plant"
  },
  "/lotus/types/items/plants/nightrareplant": {
    "value": "Night Rare Plant"
  },
  "/lotus/types/items/plants/nightuncommonplant": {
    "value": "Night Un Common Plant"
  },
  "/lotus/types/items/plants/wildgingerbplant": {
    "value": "Wild Ginger B Plant"
  },
  "/lotus/types/items/plants/zencobralotusplant": {
    "value": "Zen Cobra Lotus Plant"
  },
  "/lotus/types/items/plants/zenpitcherplant": {
    "value": "Zen Pitcher Plant"
  },
  "/lotus/types/items/railjackmiscitems/titaniumrailjackitem": {
    "value": "Titanium"
  },
  "/lotus/types/items/research/biocomponent": {
    "value": "Mutagen Mass"
  },
  "/lotus/types/items/research/chemcomponent": {
    "value": "Detonite Injector"
  },
  "/lotus/types/items/research/energycomponent": {
    "value": "Fieldron"
  },
  "/lotus/types/items/shipchristmasifier": {
    "value": "Christmas Decorations"
  },
  "/lotus/types/items/shipdecos/events/wfbeastmasterbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Nok"
  },
  "/lotus/types/items/shipdecos/events/wfchargerbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Garesh"
  },
  "/lotus/types/items/shipdecos/events/wfengineerbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Reth"
  },
  "/lotus/types/items/shipdecos/events/wfgruntbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Dhurnam"
  },
  "/lotus/types/items/shipdecos/events/wfhealerbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Dok Thul"
  },
  "/lotus/types/items/shipdecos/events/wfheavybobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Gorth"
  },
  "/lotus/types/items/shipdecos/events/wfhellionbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Zura"
  },
  "/lotus/types/items/shipdecos/events/wfsniperbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Harkonar"
  },
  "/lotus/types/items/shipdecos/events/wftankbobblehead": {
    "value": "Noggle Statue - Dog Days Executioner Vay Molta"
  },
  "/lotus/types/items/shipdecos/grineerchampionsheavybobblehead": {
    "value": "Executioner Dhurnam - Noggle Statue"
  },
  "/lotus/types/items/shipdecos/lisetproplotusmandolin": {
    "value": "Nelumbo Shawzin"
  },
  "/lotus/types/items/shipdecos/lisetpropmandolin": {
    "value": "Shawzin"
  },
  "/lotus/types/items/shipdecos/lisetpropmandolingrineer": {
    "value": "Corbu Shawzin"
  },
  "/lotus/types/items/shipdecos/lisetpropmandolinsentient": {
    "value": "Tiamat Shawzin"
  },
  "/lotus/types/items/shipdecos/nezhabobblehead": {
    "value": "Nezha - Noggle Statue"
  },
  "/lotus/types/items/shipdecos/wukongbobblehead": {
    "value": "Wukong - Noggle Statue"
  },
  "/lotus/types/keys/disruptioneventkeya": {
    "value": "Disruption Key A"
  },
  "/lotus/types/keys/disruptioneventkeyb": {
    "value": "Disruption Key B"
  },
  "/lotus/types/keys/disruptioneventkeyc": {
    "value": "Disruption Key C"
  },
  "/lotus/types/keys/disruptioneventkeyd": {
    "value": "Disruption Key D"
  },
  "/lotus/types/keys/orokincapturekeya": {
    "value": "Orokin Void Tier I Capture Key"
  },
  "/lotus/types/keys/orokinkeya": {
    "value": "Tower I Exterminate"
  },
  "/lotus/types/keys/raidkeys/raid01stage01keyitem": {
    "value": "Raid01 Stage01 Key Item"
  },
  "/lotus/types/keys/raidkeys/raid01stage01nightmarekeyitem": {
    "value": "Raid01 Stage01 Nightmare Key Item"
  },
  "/lotus/types/keys/raidkeys/raid01stage02keyitem": {
    "value": "Raid01 Stage02 Key Item"
  },
  "/lotus/types/keys/raidkeys/raid01stage02nightmarekeyitem": {
    "value": "Raid01 Stage02 Nightmare Key Item"
  },
  "/lotus/types/keys/raidkeys/raid01stage03keyitem": {
    "value": "Raid01 Stage03 Key Item"
  },
  "/lotus/types/keys/raidkeys/raid01stage03nightmarekeyitem": {
    "value": "Raid01 Stage03 Nightmare Key Item"
  },
  "/lotus/types/keys/raidkeys/raidgolemstage01keyitem": {
    "value": "Raid Golem Stage01 Key Item"
  },
  "/lotus/types/keys/raidkeys/raidgolemstage02keyitem": {
    "value": "Raid Golem Stage02 Key Item"
  },
  "/lotus/types/keys/raidkeys/raidgolemstage03keyitem": {
    "value": "Raid Golem Stage03 Key Item"
  },
  "/lotus/types/keys/tacalertkeyanniversary2017a": {
    "value": "Enemy forces have obtained information on some of the Lotus' artifacts. Stop them before they get away!\n\nYou may only use Secondary weapons on this mission."
  },
  "/lotus/types/keys/tacalertkeyanniversary2017b": {
    "value": "Enemy forces have obtained information on some of the Lotus' artifacts. Stop them before they get away!\n\nYou may only use Primary weapons on this mission."
  },
  "/lotus/types/keys/tacalertkeyanniversary2017c": {
    "value": "Enemy forces have obtained information on some of the Lotus' artifacts. Stop them before they get away!\n\nYou may only use Melee weapons on this mission.!"
  },
  "/lotus/types/keys/tacalertkeyanniversary2018d": {
    "value": "--"
  },
  "/lotus/types/levelobjects/corpusbreakablevent": {
    "value": "Corpus Breakable Vent"
  },
  "/lotus/types/levelobjects/grineerbreakablefan": {
    "value": "Grineer Breakable Fan"
  },
  "/lotus/types/lore/lorefragmentscandeco": {
    "value": "Lore Fragment Scan Deco"
  },
  "/lotus/types/neutralcreatures/catbrow/catbrowavatar": {
    "value": "Catbrow Avatar"
  },
  "/lotus/types/neutralcreatures/creatureavatars/sandrayavatar": {
    "value": "Sand Ray Avatar"
  },
  "/lotus/types/neutralcreatures/kubrow/kubrowavatar": {
    "value": "Kubrow Avatar"
  },
  "/lotus/types/neutralcreatures/kubrow/kubrowden": {
    "value": "Kubrow Den"
  },
  "/lotus/types/pickups/basemediumlootcrate": {
    "value": "Base Medium Loot Crate"
  },
  "/lotus/types/pickups/derelictorokinlootcrate": {
    "value": "Derelict Orokin Loot Crate"
  },
  "/lotus/types/pickups/lootcontainers/corpuslootcratecommon": {
    "value": "Corpus Loot Crate Common"
  },
  "/lotus/types/pickups/lootcontainers/corpuslootcrateuncommon": {
    "value": "Corpus Loot Crate Uncommon"
  },
  "/lotus/types/pickups/mediumlootcrate": {
    "value": "Medium Loot Crate"
  },
  "/lotus/types/pickups/mediumlootcrategrna": {
    "value": "Medium Loot Crate Grn A"
  },
  "/lotus/types/pickups/mediumlootcrategrnb": {
    "value": "Medium Loot Crate Grn B"
  },
  "/lotus/types/pickups/mediumlootcrategrnforta": {
    "value": "Medium Loot Crate Grn Fort A"
  },
  "/lotus/types/pickups/mediumlootcrategrnfortb": {
    "value": "Medium Loot Crate Grn Fort B"
  },
  "/lotus/types/pickups/orokinlootcrate": {
    "value": "Orokin Loot Crate"
  },
  "/lotus/types/pickups/rarecorpuslootcrate": {
    "value": "Rare Corpus Loot Crate"
  },
  "/lotus/types/pickups/raregrineerlootcrate": {
    "value": "Rare Grineer Loot Crate"
  },
  "/lotus/types/pickups/resourcecontainers/alloyplatecontainer": {
    "value": "Alloy Plate Container"
  },
  "/lotus/types/pickups/resourcecontainers/circuitscontainer": {
    "value": "Circuits Container"
  },
  "/lotus/types/pickups/resourcecontainers/controlmodulecontainer": {
    "value": "Control Module Container"
  },
  "/lotus/types/pickups/resourcecontainers/ferritecontainer": {
    "value": "Ferrite Container"
  },
  "/lotus/types/pickups/resourcecontainers/nanosporescontainer": {
    "value": "Nano Spores Container"
  },
  "/lotus/types/pickups/resourcecontainers/neurodescontainer": {
    "value": "Neurodes Container"
  },
  "/lotus/types/pickups/resourcecontainers/orokincellcontainer": {
    "value": "Orokin Cell Container"
  },
  "/lotus/types/pickups/resourcecontainers/plastidscontainer": {
    "value": "Plastids Container"
  },
  "/lotus/types/pickups/resourcecontainers/polymerbundlecontainer": {
    "value": "Polymer Bundle Container"
  },
  "/lotus/types/pickups/resourcecontainers/rubedocontainer": {
    "value": "Rubedo Container"
  },
  "/lotus/types/pickups/resourcecontainers/salvagecontainer": {
    "value": "Salvage Container"
  },
  "/lotus/types/pickups/ultrararegrineerlootcrate": {
    "value": "Ultra Rare Grineer Loot Crate"
  },
  "/lotus/types/player/pvptennoavatar": {
    "value": "Pvp Tenno Avatar"
  },
  "/lotus/types/recipes/components/formablueprint": {
    "value": "Forma Blueprint"
  },
  "/lotus/types/recipes/components/orokincatalystblueprint": {
    "value": "Orokin Catalyst Blueprint"
  },
  "/lotus/types/recipes/components/orokinreactorblueprint": {
    "value": "Orokin Reactor Blueprint"
  },
  "/lotus/types/recipes/components/utilityunlockerblueprint": {
    "value": "Exilus Adapter Blueprint"
  },
  "/lotus/types/recipes/helmets/statlesslokialthelmetblueprint": {
    "value": "Essence Loki Helmet Blueprint"
  },
  "/lotus/types/recipes/helmets/statlessnyxalthelmetblueprint": {
    "value": "Menticide Nyx Helmet Blueprint"
  },
  "/lotus/types/recipes/helmets/statlessv2nyxalthelmetblueprint": {
    "value": "Vespa Nyx Helmet Blueprint"
  },
  "/lotus/types/recipes/helmets/v2animaalthelmetblueprint": {
    "value": "Clisthert Equinox Helmet Blueprint"
  },
  "/lotus/types/recipes/weapons/deravandalblueprint": {
    "value": "Dera Vandal Blueprint"
  },
  "/lotus/types/recipes/weapons/grineercombatknifeprint": {
    "value": "Sheev Blueprint"
  },
  "/lotus/types/recipes/weapons/grineercombatknifesortieblueprint": {
    "value": "Sheev Blueprint"
  },
  "/lotus/types/recipes/weapons/karakwraithblueprint": {
    "value": "Karak Wraith Blueprint"
  },
  "/lotus/types/recipes/weapons/latronwraithblueprint": {
    "value": "Latron Wraith Blueprint"
  },
  "/lotus/types/recipes/weapons/snipetronvandalblueprint": {
    "value": "Snipetron Vandal Blueprint"
  },
  "/lotus/types/recipes/weapons/strunwraithblueprint": {
    "value": "Strun Wraith Blueprint"
  },
  "/lotus/types/recipes/weapons/twinviperswraithblueprint": {
    "value": "Wraith Twin Vipers Blueprint"
  },
  "/lotus/types/recipes/weapons/weaponparts/deravandalbarrel": {
    "value": "Dera Vandal Barrel"
  },
  "/lotus/types/recipes/weapons/weaponparts/deravandalreceiver": {
    "value": "Dera Vandal Receiver"
  },
  "/lotus/types/recipes/weapons/weaponparts/deravandalstock": {
    "value": "Dera Vandal Stock"
  },
  "/lotus/types/recipes/weapons/weaponparts/grineercombatknifeblade": {
    "value": "Sheev Blade"
  },
  "/lotus/types/recipes/weapons/weaponparts/grineercombatknifehandle": {
    "value": "Sheev Handle"
  },
  "/lotus/types/recipes/weapons/weaponparts/grineercombatknifeheatsink": {
    "value": "Sheev Heatsink"
  },
  "/lotus/types/recipes/weapons/weaponparts/grineercombatknifehilt": {
    "value": "Sheev Hilt"
  },
  "/lotus/types/recipes/weapons/weaponparts/karakwraithbarrel": {
    "value": "Karak Wraith Barrel"
  },
  "/lotus/types/recipes/weapons/weaponparts/karakwraithreceiver": {
    "value": "Karak Wraith Receiver"
  },
  "/lotus/types/recipes/weapons/weaponparts/karakwraithstock": {
    "value": "Karak Wraith Stock"
  },
  "/lotus/types/recipes/weapons/weaponparts/latronwraithbarrel": {
    "value": "Latron Wraith Barrel"
  },
  "/lotus/types/recipes/weapons/weaponparts/latronwraithreceiver": {
    "value": "Latron Wraith Receiver"
  },
  "/lotus/types/recipes/weapons/weaponparts/latronwraithstock": {
    "value": "Latron Wraith Stock"
  },
  "/lotus/types/recipes/weapons/weaponparts/snipetronvandalbarrel": {
    "value": "Snipetron Vandal Barrel"
  },
  "/lotus/types/recipes/weapons/weaponparts/snipetronvandalreceiver": {
    "value": "Snipetron Vandal Receiver"
  },
  "/lotus/types/recipes/weapons/weaponparts/snipetronvandalstock": {
    "value": "Snipetron Vandal Stock"
  },
  "/lotus/types/recipes/weapons/weaponparts/strunwraithbarrel": {
    "value": "Strun Wraith Barrel"
  },
  "/lotus/types/recipes/weapons/weaponparts/strunwraithreceiver": {
    "value": "Strun Wraith Receiver"
  },
  "/lotus/types/recipes/weapons/weaponparts/strunwraithstock": {
    "value": "Strun Wraith Stock"
  },
  "/lotus/types/recipes/weapons/weaponparts/twinviperswraithbarrel": {
    "value": "Wraith Twin Vipers Barrel"
  },
  "/lotus/types/recipes/weapons/weaponparts/twinviperswraithlink": {
    "value": "Wraith Twin Vipers Link"
  },
  "/lotus/types/recipes/weapons/weaponparts/twinviperswraithreceiver": {
    "value": "Wraith Twin Vipers Receiver"
  },
  "/lotus/types/restoratives/deployables/lisetturretavatar": {
    "value": "Liset Turret Avatar"
  },
  "/lotus/types/sentinels/sentinelavatar": {
    "value": "Sentinel Avatar"
  },
  "/lotus/types/sentinels/sentinelpowersuits/arcdronepowersuit": {
    "value": "Diriga"
  },
  "/lotus/types/sentinels/sentinelpowersuits/carrierpowersuit": {
    "value": "Carrier"
  },
  "/lotus/types/sentinels/sentinelpowersuits/dethcubepowersuit": {
    "value": "Deth Cube"
  },
  "/lotus/types/sentinels/sentinelpowersuits/empyreansentinelpowersuit": {
    "value": "Nautilus"
  },
  "/lotus/types/sentinels/sentinelpowersuits/gubberpowersuit": {
    "value": "Djinn"
  },
  "/lotus/types/sentinels/sentinelpowersuits/meleepetpowersuit": {
    "value": "Helios"
  },
  "/lotus/types/sentinels/sentinelpowersuits/primecarrierpowersuit": {
    "value": "Carrier Prime"
  },
  "/lotus/types/sentinels/sentinelpowersuits/primeheliospowersuit": {
    "value": "Helios Prime"
  },
  "/lotus/types/sentinels/sentinelpowersuits/primewyrmpowersuit": {
    "value": "Wyrm Prime"
  },
  "/lotus/types/sentinels/sentinelpowersuits/prismashadepowersuit": {
    "value": "Prisma Shade"
  },
  "/lotus/types/sentinels/sentinelpowersuits/shadepowersuit": {
    "value": "Shade"
  },
  "/lotus/types/sentinels/sentinelpowersuits/tnsentinelcrosspowersuit": {
    "value": "Artax"
  },
  "/lotus/types/sentinels/sentinelpowersuits/wyrmpowersuit": {
    "value": "Wyrm"
  },
  "/lotus/types/sentinels/sentinelweapons/burstlaserpistol": {
    "value": "Burst Laser Pistol"
  },
  "/lotus/types/sentinels/sentinelweapons/deconstructorprime/primeheliosglaiveweapon": {
    "value": "Deconstructor Prime"
  },
  "/lotus/types/sentinels/sentinelweapons/dethmachinerifle": {
    "value": "Deth Machine Rifle"
  },
  "/lotus/types/sentinels/sentinelweapons/gremlin": {
    "value": "Gremlin"
  },
  "/lotus/types/sentinels/sentinelweapons/laserrifle": {
    "value": "Laser Rifle"
  },
  "/lotus/types/sentinels/sentinelweapons/primelaserrifle": {
    "value": "Laser Rifle Prime"
  },
  "/lotus/types/sentinels/sentinelweapons/primesentshotgun": {
    "value": "Sweeper Prime"
  },
  "/lotus/types/sentinels/sentinelweapons/prismaburstlaserpistol": {
    "value": "Prisma Burst Laser"
  },
  "/lotus/types/sentinels/sentinelweapons/sentbioweapon": {
    "value": "Stinger"
  },
  "/lotus/types/sentinels/sentinelweapons/sentelecrailgun": {
    "value": "Vulklok"
  },
  "/lotus/types/sentinels/sentinelweapons/sentglaiveweapon": {
    "value": "Deconstructor"
  },
  "/lotus/types/sentinels/sentinelweapons/sentshotgun": {
    "value": "Sweeper"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagegrineerqueensved": {
    "value": "Grineer Queens Avatar"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagehalloween2016a": {
    "value": "Day of the Dead Avatar"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagehalloween2016b": {
    "value": "Day of the Dead Avatar"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagehalloween2016c": {
    "value": "Day of the Dead Avatar"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagehalloween2016d": {
    "value": "Day of the Dead Avatar"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem1": {
    "value": "Excalibur Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem2": {
    "value": "Volt Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem3": {
    "value": "Trinity Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem4": {
    "value": "Rhino Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem5": {
    "value": "Mag Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem6": {
    "value": "Ash Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem7": {
    "value": "Ember Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitem8": {
    "value": "Loki Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageitemfrostprime": {
    "value": "Loki Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagepack1": {
    "value": "Profile Icon Pack 1"
  },
  "/lotus/types/storeitems/avatarimages/avatarimagepack2": {
    "value": "Profile Icon Pack 2"
  },
  "/lotus/types/storeitems/avatarimages/avatarimageteshinved": {
    "value": "Teshin Glyph"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackash": {
    "value": "Ash Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackashlocust": {
    "value": "Ash Locust Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackbanshee": {
    "value": "Banshee Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackbansheechorus": {
    "value": "Banshee Chorus Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackchroma": {
    "value": "Chroma Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackchromaamaru": {
    "value": "Chroma Amaru Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackember": {
    "value": "Ember Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackemberbackdraft": {
    "value": "Ember Backdraft Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackexcalibur": {
    "value": "Excalibur Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackexcaliburmordred": {
    "value": "Excalibur Mordred Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackexcaliburpendragon": {
    "value": "Excalibur Pendragon Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackfrost": {
    "value": "Frost Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackfrostprime": {
    "value": "Frost Prime Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackfrostsquall": {
    "value": "Frost Squall Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackgrineer": {
    "value": "Grineer Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackgunslinger": {
    "value": "Mesa Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacklimbo": {
    "value": "Limbo Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacklimbograeae": {
    "value": "Limbo Magrite Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackloki": {
    "value": "Loki Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacklokienigma": {
    "value": "Loki Enigma Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacklokiswindle": {
    "value": "Loki Swindle Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackmag": {
    "value": "Mag Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackmaggauss": {
    "value": "Mag Gauss Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackmagprime": {
    "value": "Mag Prime Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackmesacortes": {
    "value": "Mesa Ovis Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackmirage": {
    "value": "Mirage Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackmiragetravelin": {
    "value": "Mirage Trivelin Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknekros": {
    "value": "Nekros Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknekrosshroud": {
    "value": "Nekros Shroud Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknova": {
    "value": "Nova Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknovaquantum": {
    "value": "Nova Quantum Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknovaslipstream": {
    "value": "Nova Slipstream Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknyx": {
    "value": "Nyx Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacknyxvespa": {
    "value": "Nyx Vespa Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackoberon": {
    "value": "Oberon Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackoberonmarkhor": {
    "value": "Oberon Markhor Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackpirate": {
    "value": "Hydroid Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackpirateketos": {
    "value": "Hydroid Ketos Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackrhino": {
    "value": "Rhino Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackrhinovanguard": {
    "value": "Rhino Vanguard Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacksaryn": {
    "value": "Saryn Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacksarynchlora": {
    "value": "Saryn Chlora Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacksyndicate": {
    "value": "Syndicate Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacktrapper": {
    "value": "Vauban Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacktrappergambit": {
    "value": "Vauban Gambit Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacktrappersoldier": {
    "value": "Vauban Armistice Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacktrinity": {
    "value": "Trinity Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpacktrinitymeridian": {
    "value": "Trinity Meridian Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackvalkyr": {
    "value": "Valkyr Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackvalkyrkara": {
    "value": "Valkyr Kara Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackvolt": {
    "value": "Volt Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackvoltpulse": {
    "value": "Volt Pulse Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackzephyr": {
    "value": "Zephyr Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/avatarpackzephyrtengu": {
    "value": "Zephyr Tengu Profile Icon Pack"
  },
  "/lotus/types/storeitems/avatarimages/imageashbright": {
    "value": "Ash Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashdark": {
    "value": "Ash Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashlocustbright": {
    "value": "Ash Locust Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashlocustdark": {
    "value": "Ash Locust Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashprimebright": {
    "value": "Ash Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashprimedark": {
    "value": "Ash Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashscorpionbright": {
    "value": "Ash Scorpion Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageashscorpiondark": {
    "value": "Ash Scorpion Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagebansheebright": {
    "value": "Banshee Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagebansheechorusbright": {
    "value": "Banshee Chorus Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagebansheechorusdark": {
    "value": "Banshee Chorus Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagebansheedark": {
    "value": "Banshee Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagebansheereverbbright": {
    "value": "Banshee Reverb Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagebansheereverbdark": {
    "value": "Banshee Reverb Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagechromaamarubright": {
    "value": "Chroma Amaru Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagechromaamarudark": {
    "value": "Chroma Amaru Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagechromabright": {
    "value": "Chroma Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagechromadark": {
    "value": "Chroma Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagechromadracbright": {
    "value": "Chroma Drac Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagechromadracdark": {
    "value": "Chroma Drac Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberbackdraftbright": {
    "value": "Ember Backdraft Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberbackdraftdark": {
    "value": "Ember Backdraft Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberbright": {
    "value": "Ember Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberdark": {
    "value": "Ember Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberpheonixbright": {
    "value": "Phoenix Ember Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberpheonixdark": {
    "value": "Phoenix Ember Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberprimebright": {
    "value": "Ember Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageemberprimedark": {
    "value": "Ember Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburavalonbright": {
    "value": "Excalibur Avalon Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburavalondark": {
    "value": "Excalibur Avalon Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburbright": {
    "value": "Excalibur Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburdark": {
    "value": "Excalibur Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburmordredbright": {
    "value": "Excalibur Mordred Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburmordreddark": {
    "value": "Excalibur Mordred Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburpendragonbright": {
    "value": "Excalibur Pendragon Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburpendragondark": {
    "value": "Excalibur Pendragon Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburprimebright": {
    "value": "Excalibur Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburprimedark": {
    "value": "Excalibur Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageexcaliburproto": {
    "value": "Excalibur Proto-suit Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostaurorabright": {
    "value": "Frost Aurora Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostauroradark": {
    "value": "Frost Aurora Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostbright": {
    "value": "Frost Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostdark": {
    "value": "Frost Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostprimebright": {
    "value": "Frost Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostprimedark": {
    "value": "Frost Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostsquallbright": {
    "value": "Frost Squall Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagefrostsqualldark": {
    "value": "Frost Squall Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegraeaelimbobright": {
    "value": "Limbo Magrite Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegraeaelimbodark": {
    "value": "Limbo Magrite Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegrineerballista": {
    "value": "Grineer Ballista Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegrineercaptainvor": {
    "value": "Captain Vor Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegrineerkeladethaym": {
    "value": "Kela De Thaym Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegrineerlancer": {
    "value": "Grineer Lancer Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegrineerroller": {
    "value": "Grineer Roller Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegrineersargusruk": {
    "value": "Sargas Ruk Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegunslingeraltbright": {
    "value": "Mesa Longhorn Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegunslingeraltdark": {
    "value": "Mesa Longhorn Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegunslingerbright": {
    "value": "Mesa Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagegunslingerdark": {
    "value": "Mesa Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelimboaristeasbright": {
    "value": "Limbo Aristeas Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelimboaristeasdark": {
    "value": "Limbo Aristeas Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelimbobright": {
    "value": "Limbo Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelimbodark": {
    "value": "Limbo Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokibright": {
    "value": "Loki Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokidark": {
    "value": "Loki Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokienigmabright": {
    "value": "Loki Enigma Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokienigmadark": {
    "value": "Loki Enigma Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokiessencebright": {
    "value": "Loki Essence Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokiessencedark": {
    "value": "Loki Essence Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokiprimebright": {
    "value": "Loki Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokiprimedark": {
    "value": "Loki Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokiswindlebright": {
    "value": "Loki Swindle Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagelokiswindledark": {
    "value": "Loki Swindle Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemagbright": {
    "value": "Mag Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemagcoilbright": {
    "value": "Mag Coil Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemagcoildark": {
    "value": "Mag Coil Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemagdark": {
    "value": "Mag Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemaggaussbright": {
    "value": "Mag Gauss Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemaggaussdark": {
    "value": "Mag Gauss Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemagprimebright": {
    "value": "Mag Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemagprimedark": {
    "value": "Mag Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemesacortesbright": {
    "value": "Mesa Ovis Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemesacortesdark": {
    "value": "Mesa Ovis Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemiragebright": {
    "value": "Mirage Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemiragedark": {
    "value": "Mirage Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemirageharlequinbright": {
    "value": "Mirage Harlequin Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagemirageharlequindark": {
    "value": "Mirage Harlequin Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenekrosaraknidbright": {
    "value": "Nekros Raknis Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenekrosarakniddark": {
    "value": "Nekros Raknis Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenekrosbright": {
    "value": "Nekros Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenekrosdark": {
    "value": "Nekros Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenekrosshroudbright": {
    "value": "Nekros Shroud Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenekrosshrouddark": {
    "value": "Nekros Shroud Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaaltbright": {
    "value": "Nova Flux Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaaltdark": {
    "value": "Nova Flux Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovabright": {
    "value": "Nova Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovadark": {
    "value": "Nova Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaprimebright": {
    "value": "Nova Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaprimedark": {
    "value": "Nova Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaquantumbright": {
    "value": "Nova Quantum Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaquantumdark": {
    "value": "Nova Quantum Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaslipstreambright": {
    "value": "Nova Slipstream Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenovaslipstreamdark": {
    "value": "Nova Slipstream Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxbright": {
    "value": "Nyx Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxdark": {
    "value": "Nyx Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxmenticidebright": {
    "value": "Nyx Menticide Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxmenticidedark": {
    "value": "Nyx Menticide Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxprimebright": {
    "value": "Nyx Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxprimedark": {
    "value": "Nyx Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxvespabright": {
    "value": "Nyx Vespa Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagenyxvespadark": {
    "value": "Nyx Vespa Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageoberonaltbright": {
    "value": "Oberon Oryx Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageoberonaltdark": {
    "value": "Oberon Oryx Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageoberonbright": {
    "value": "Oberon Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageoberondark": {
    "value": "Oberon Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageoberonmarkhorbright": {
    "value": "Oberon Markhor Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imageoberonmarkhordark": {
    "value": "Oberon Markhor Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagepiratebright": {
    "value": "Hydroid Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagepiratedark": {
    "value": "Hydroid Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagepirateketosbright": {
    "value": "Hydroid Ketos Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagepirateketosdark": {
    "value": "Hydroid Ketos Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagepiratetritonbright": {
    "value": "Hydroid Triton Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagepiratetritondark": {
    "value": "Hydroid Triton Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinobright": {
    "value": "Rhino Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinodark": {
    "value": "Rhino Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinoprimebright": {
    "value": "Rhino Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinoprimedark": {
    "value": "Rhino Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinothrakbright": {
    "value": "Rhino Thrak Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinothrakdark": {
    "value": "Rhino Thrak Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinovanguardbright": {
    "value": "Rhino Vanguard Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagerhinovanguarddark": {
    "value": "Rhino Vanguard Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesarynbright": {
    "value": "Saryn Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesarynchlorabright": {
    "value": "Saryn Chlora Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesarynchloradark": {
    "value": "Saryn Chlora Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesaryndark": {
    "value": "Saryn Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesarynhemlockbright": {
    "value": "Saryn Hemlock Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesarynhemlockdark": {
    "value": "Saryn Hemlock Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesyndicateah": {
    "value": "Arbiters Of Hexis Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesyndicatecs": {
    "value": "Cephalon Suda Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesyndicatenl": {
    "value": "New Loka Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesyndicateps": {
    "value": "Perrin Sequence Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesyndicaterv": {
    "value": "Red Veil Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagesyndicatesm": {
    "value": "Steel Meridian Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrapperaltbright": {
    "value": "Vauban Esprit Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrapperaltdark": {
    "value": "Vauban Esprit Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrapperbright": {
    "value": "Vauban Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrapperdark": {
    "value": "Vauban Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrappergambitbright": {
    "value": "Vauban Gambit Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrappergambitdark": {
    "value": "Vauban Gambit Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrappersoldierbright": {
    "value": "Vauban Armistice Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrappersoldierdark": {
    "value": "Vauban Armistice Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetravelinmiragebright": {
    "value": "Mirage Trivelin Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetravelinmiragedark": {
    "value": "Mirage Trivelin Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrinityaurabright": {
    "value": "Trinity Aura Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrinityauradark": {
    "value": "Trinity Aura Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrinitybright": {
    "value": "Trinity Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrinitydark": {
    "value": "Trinity Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrinitymeridianbright": {
    "value": "Trinity Meridian Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagetrinitymeridiandark": {
    "value": "Trinity Meridian Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevalkyrbastetbright": {
    "value": "Valkyr Bastet Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevalkyrbastetdark": {
    "value": "Valkyr Bastet Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevalkyrbright": {
    "value": "Valkyr Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevalkyrdark": {
    "value": "Valkyr Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevalkyrkarabright": {
    "value": "Valkyr Kara Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevalkyrkaradark": {
    "value": "Valkyr Kara Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltbright": {
    "value": "Volt Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltdark": {
    "value": "Volt Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltprimebright": {
    "value": "Volt Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltprimedark": {
    "value": "Volt Prime Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltpulsebright": {
    "value": "Volt Pulse Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltpulsedark": {
    "value": "Volt Pulse Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltstormbright": {
    "value": "Volt Storm Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagevoltstormdark": {
    "value": "Volt Storm Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagezephyrbright": {
    "value": "Zephyr Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagezephyrcierzobright": {
    "value": "Zephyr Cierzo Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagezephyrcierzodark": {
    "value": "Zephyr Cierzo Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagezephyrdark": {
    "value": "Zephyr Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagezephyrtengubright": {
    "value": "Zephyr Tengu Profile Icon"
  },
  "/lotus/types/storeitems/avatarimages/imagezephyrtengudark": {
    "value": "Zephyr Tengu Profile Icon"
  },
  "/lotus/types/storeitems/boosters/affinitybooster3daystoreitem": {
    "value": "3 Day Affinity Booster"
  },
  "/lotus/types/storeitems/boosters/affinitybooster7daystoreitem": {
    "value": "7 Day Affinity Booster"
  },
  "/lotus/types/storeitems/boosters/affinityboosterstoreitem": {
    "value": "Affinity Booster"
  },
  "/lotus/types/storeitems/boosters/creditbooster3daystoreitem": {
    "value": "3 Day Credit Booster"
  },
  "/lotus/types/storeitems/boosters/creditbooster7daystoreitem": {
    "value": "7 Day Credit Booster"
  },
  "/lotus/types/storeitems/boosters/creditboosterstoreitem": {
    "value": "Credit Booster"
  },
  "/lotus/types/storeitems/boosters/goodstuffdropchanceboosterstoreitem": {
    "value": "Drop Chance Booster"
  },
  "/lotus/types/storeitems/boosters/moddropchancebooster3daystoreitem": {
    "value": "3 Day Mod Drop Chance Booster"
  },
  "/lotus/types/storeitems/boosters/moddropchanceboosterstoreitem": {
    "value": "Mod Drop Chance Booster"
  },
  "/lotus/types/storeitems/boosters/resourceamount3daystoreitem": {
    "value": "3 Day Resource Booster"
  },
  "/lotus/types/storeitems/boosters/resourceamount7daystoreitem": {
    "value": "7 Day Resource Booster"
  },
  "/lotus/types/storeitems/boosters/resourceamountboosterstoreitem": {
    "value": "Resource Booster"
  },
  "/lotus/types/storeitems/boosters/resourcedropchance3daystoreitem": {
    "value": "3 Day Resource Drop Chance Booster"
  },
  "/lotus/types/storeitems/boosters/resourcedropchance7daystoreitem": {
    "value": "7 Day Resource Drop Chance Booster"
  },
  "/lotus/types/storeitems/boosters/resourcedropchanceboosterstoreitem": {
    "value": "Resource Drop Chance Booster"
  },
  "/lotus/types/storeitems/boosters/reviveboosterstoreitem": {
    "value": "Revive Booster"
  },
  "/lotus/types/storeitems/consumables/restoratives/creditchiplargeblueprint": {
    "value": "Passionate Void Offering"
  },
  "/lotus/types/storeitems/consumables/restoratives/creditchipmediumblueprint": {
    "value": "Faithful Void Offering"
  },
  "/lotus/types/storeitems/creditbundles/creditbundlea": {
    "value": "Frugal Credit Bundle"
  },
  "/lotus/types/storeitems/creditbundles/creditbundleb": {
    "value": "Prodigal Credit Bundle"
  },
  "/lotus/types/storeitems/creditbundles/creditbundlec": {
    "value": "High Roller Credit Bundle"
  },
  "/lotus/types/storeitems/packages/acolytenogglebundle": {
    "value": "Acolyte Noggle Pack"
  },
  "/lotus/types/storeitems/packages/alchemistframeitemsbundle": {
    "value": "Lavos Collection"
  },
  "/lotus/types/storeitems/packages/alternatearrowskinsbundle": {
    "value": "Adventus Arrow Collection"
  },
  "/lotus/types/storeitems/packages/antitoxinpack": {
    "value": "Cicero Crisis Antidote Pack"
  },
  "/lotus/types/storeitems/packages/ashdeluxeiiskinbundle": {
    "value": "Ash Shroud Collection"
  },
  "/lotus/types/storeitems/packages/ashdeluxeskinbundle": {
    "value": "Koga Bundle"
  },
  "/lotus/types/storeitems/packages/atlasdeluxeskinbundle": {
    "value": "Atlas Karst Collection"
  },
  "/lotus/types/storeitems/packages/auraformathreepack": {
    "value": "Aura Forma Bundle"
  },
  "/lotus/types/storeitems/packages/bansheedeluxeskinbundle": {
    "value": "Banshee Soprana Bundle"
  },
  "/lotus/types/storeitems/packages/bansheepack": {
    "value": "Dead Silence Pack"
  },
  "/lotus/types/storeitems/packages/bardbundle": {
    "value": "Octavia Collection"
  },
  "/lotus/types/storeitems/packages/berserkerpack": {
    "value": "Berserker Bundle"
  },
  "/lotus/types/storeitems/packages/billowingskinsbundle": {
    "value": "Cumulus Collection"
  },
  "/lotus/types/storeitems/packages/boltorbundle": {
    "value": "Ballistic Blades Bundle"
  },
  "/lotus/types/storeitems/packages/brassandgoldbundle": {
    "value": "Ormolu Skin Bundle"
  },
  "/lotus/types/storeitems/packages/brokenframeitemsbundle": {
    "value": "Xaku Collection"
  },
  "/lotus/types/storeitems/packages/candycanescythepack": {
    "value": "Spearmint Scythes"
  },
  "/lotus/types/storeitems/packages/colorpack": {
    "value": "Color Pack: Alpha"
  },
  "/lotus/types/storeitems/packages/colorpackb": {
    "value": "Color Pack: Beta"
  },
  "/lotus/types/storeitems/packages/comicglyphsbundlea": {
    "value": "Halftone Glyph Pack"
  },
  "/lotus/types/storeitems/packages/consoletennogenabundle": {
    "value": "TennoGen Mega Bundle"
  },
  "/lotus/types/storeitems/packages/consumablespack": {
    "value": "Survival Kit"
  },
  "/lotus/types/storeitems/packages/corpusdazzlecamocestraskinpack": {
    "value": "Shock Camo Cestra"
  },
  "/lotus/types/storeitems/packages/corpusdazzlecamoskinpack": {
    "value": "Shock Camo Pack"
  },
  "/lotus/types/storeitems/packages/corpusdazzlecamosniperskinpack": {
    "value": "Shock Camo Lanka"
  },
  "/lotus/types/storeitems/packages/corpushigharmorbundle": {
    "value": "Arca Armor Bundle"
  },
  "/lotus/types/storeitems/packages/corpusweaponbundlea": {
    "value": "Arca Bundle"
  },
  "/lotus/types/storeitems/packages/crpcircarmorpack": {
    "value": "Porta Armor Bundle"
  },
  "/lotus/types/storeitems/packages/crpcubinatorarmorbundle": {
    "value": "Shi Armor Bundle"
  },
  "/lotus/types/storeitems/packages/crpdeadlockitemsbundle": {
    "value": "Corpus Advantage Bundle"
  },
  "/lotus/types/storeitems/packages/crpfncarmorpack": {
    "value": "Dendra Armor Set"
  },
  "/lotus/types/storeitems/packages/crpindextwoarmorpack": {
    "value": "Quaro Armor Collection"
  },
  "/lotus/types/storeitems/packages/crpindextwoitempack": {
    "value": "Quaro Collection"
  },
  "/lotus/types/storeitems/packages/deimositemsbundle": {
    "value": "Deimos Infested Bundle"
  },
  "/lotus/types/storeitems/packages/deimossupporterpack3storeitem": {
    "value": "Deimos Swarm Supporter Pack"
  },
  "/lotus/types/storeitems/packages/defenseeventpack": {
    "value": "Weekend Event Dethcube Deal"
  },
  "/lotus/types/storeitems/packages/deluxebundles/zephyrdeluxeskinbundle": {
    "value": "Zephyr Harrier Collection"
  },
  "/lotus/types/storeitems/packages/deluxebundles/zephyrdlxoperatorbundle": {
    "value": "Operator Harrier Collection"
  },
  "/lotus/types/storeitems/packages/demolitionarchwingbundle": {
    "value": "Elytron Ultimatum Bundle"
  },
  "/lotus/types/storeitems/packages/djinndeluxearmorpack": {
    "value": "Gazal Armor Pack"
  },
  "/lotus/types/storeitems/packages/djinndeluxecompletebundle": {
    "value": "Gazal Complete Collection"
  },
  "/lotus/types/storeitems/packages/discordprimeaccesstier3storeitem": {
    "value": "Discord Prime Access Complete Bundle"
  },
  "/lotus/types/storeitems/packages/domestikdronesbundle": {
    "value": "Domestik Drones Bundle"
  },
  "/lotus/types/storeitems/packages/doubleaffinitypack": {
    "value": "Double Affinity Weekend Pack"
  },
  "/lotus/types/storeitems/packages/dragonpack": {
    "value": "Dragon Bundle"
  },
  "/lotus/types/storeitems/packages/electricpack": {
    "value": "Volt Value Pack"
  },
  "/lotus/types/storeitems/packages/empyreansentaccessorybundle": {
    "value": "Nautilus Sentinel Cosmetic Bundle"
  },
  "/lotus/types/storeitems/packages/empyreansentinelbundle": {
    "value": "Nautilus Sentinel Bundle"
  },
  "/lotus/types/storeitems/packages/equinoxdeluxeskinbundle": {
    "value": "Equinox Antonym Collection"
  },
  "/lotus/types/storeitems/packages/essentialdamagemodpack": {
    "value": "Essential Base Damage Mod Pack"
  },
  "/lotus/types/storeitems/packages/excaliburdeluxeskinbundle": {
    "value": "Excalibur Zato Collection"
  },
  "/lotus/types/storeitems/packages/excaliburxbonepack": {
    "value": "Prestige Pack I - Exclusive"
  },
  "/lotus/types/storeitems/packages/falseprofitaccessories": {
    "value": "False Profit Accessories"
  },
  "/lotus/types/storeitems/packages/falseprofiteventmodpack": {
    "value": "False Profit Mod Pack"
  },
  "/lotus/types/storeitems/packages/females2helmetpack": {
    "value": "Female Helmet Pack"
  },
  "/lotus/types/storeitems/packages/femalesuitpack": {
    "value": "Female Warframe Pack"
  },
  "/lotus/types/storeitems/packages/femalesuitpackb": {
    "value": "Femme Fatale Pack"
  },
  "/lotus/types/storeitems/packages/fomorianrevengemodpack": {
    "value": "Eyes Of Blight Mod Pack"
  },
  "/lotus/types/storeitems/packages/fomorianrevengeskinpack": {
    "value": "Eyes Of Blight Skin Pack"
  },
  "/lotus/types/storeitems/packages/fortunamegabundle": {
    "value": "Fortuna Grand Bundle"
  },
  "/lotus/types/storeitems/packages/fortunatwoweaponbundle": {
    "value": "Vallis Domination Collection"
  },
  "/lotus/types/storeitems/packages/frostdeluxeskinbundle": {
    "value": "Frost Harka Bundle"
  },
  "/lotus/types/storeitems/packages/frostpack": {
    "value": "Stay Frosty Pack"
  },
  "/lotus/types/storeitems/packages/garadeluxeskinbundle": {
    "value": "Gara Collection"
  },
  "/lotus/types/storeitems/packages/garudabundle": {
    "value": "Garuda Collection"
  },
  "/lotus/types/storeitems/packages/garudadeluxeskinbundle": {
    "value": "Garuda Hinsa Collection"
  },
  "/lotus/types/storeitems/packages/gaussbundle": {
    "value": "Gauss Collection"
  },
  "/lotus/types/storeitems/packages/glassbundle": {
    "value": "Gara Collection"
  },
  "/lotus/types/storeitems/packages/glyphsbundlea": {
    "value": "Adau Glyph Pack"
  },
  "/lotus/types/storeitems/packages/glyphsbundleb": {
    "value": "Emblematic Glyph Pack"
  },
  "/lotus/types/storeitems/packages/glyphsessential": {
    "value": "Essential Glyphs Bundle"
  },
  "/lotus/types/storeitems/packages/grendelbundle": {
    "value": "Grendel Collection"
  },
  "/lotus/types/storeitems/packages/grineercamoskinpack": {
    "value": "Grineer Desert Tactics Pack"
  },
  "/lotus/types/storeitems/packages/grineerforestskinpack": {
    "value": "Forest-camo Skin Pack"
  },
  "/lotus/types/storeitems/packages/grineerpack": {
    "value": "Grineer Assault"
  },
  "/lotus/types/storeitems/packages/grineerturbinesarmorpack": {
    "value": "Harkonar Armor Set"
  },
  "/lotus/types/storeitems/packages/grineervharmourbundle": {
    "value": "Maggor Armor Bundle"
  },
  "/lotus/types/storeitems/packages/grineervhitemsbundle": {
    "value": "Maggor Assault Pack"
  },
  "/lotus/types/storeitems/packages/grnamphisarmorbundle": {
    "value": "Galvanik Armor Bundle"
  },
  "/lotus/types/storeitems/packages/grnamphisitemsbundle": {
    "value": "Quatz Collection"
  },
  "/lotus/types/storeitems/packages/grnsealabeventweaponpack": {
    "value": "Dera Vandal Vs. Karak Wraith"
  },
  "/lotus/types/storeitems/packages/gunslingerbundle": {
    "value": "Gunslinger Bundle"
  },
  "/lotus/types/storeitems/packages/halloweencrpcircarmorpack": {
    "value": "Day of the Dead Porta Armor Pack"
  },
  "/lotus/types/storeitems/packages/halloweenglyphbundle": {
    "value": "Day of the Dead Calavera Glyph Pack"
  },
  "/lotus/types/storeitems/packages/halloweenlatoskinpack": {
    "value": "Lato Day Of The Dead Skin"
  },
  "/lotus/types/storeitems/packages/halloweenscarfbundle": {
    "value": "Day of the Dead Threads"
  },
  "/lotus/types/storeitems/packages/halloweenscarfbundleb": {
    "value": "Day of the Dead Threads II"
  },
  "/lotus/types/storeitems/packages/halloweenshipskinbundle": {
    "value": "Day of the Dead Skin Rides"
  },
  "/lotus/types/storeitems/packages/halloweenskinpack": {
    "value": "Day Of The Dead Weapon Skin Pack"
  },
  "/lotus/types/storeitems/packages/halloweenskinpackc": {
    "value": "Day of the Dead Weapon Skin Pack III"
  },
  "/lotus/types/storeitems/packages/halloweenskinpackd": {
    "value": "Day of the Dead Weapon Skin Pack IV"
  },
  "/lotus/types/storeitems/packages/halloweenskinpackii": {
    "value": "Day Of The Dead Weapon Skin Pack II"
  },
  "/lotus/types/storeitems/packages/halloweenvastoskinpack": {
    "value": "Vasto Day Of The Dead Skin"
  },
  "/lotus/types/storeitems/packages/harrowdeluxeskinbundle": {
    "value": "Harrow Reliquary Collection"
  },
  "/lotus/types/storeitems/packages/hildrynbundle": {
    "value": "Hildryn Collection"
  },
  "/lotus/types/storeitems/packages/holsterseriesonepack": {
    "value": "Adi Holster Collection"
  },
  "/lotus/types/storeitems/packages/huntertoolpack": {
    "value": "Kinetic Siphon Trap"
  },
  "/lotus/types/storeitems/packages/iceeventmodpack": {
    "value": "Cryotic Mod Pack"
  },
  "/lotus/types/storeitems/packages/immortalskinpack": {
    "value": "Immortal Skin Bundle"
  },
  "/lotus/types/storeitems/packages/indexteamanogglebundle": {
    "value": "Anyocorp Claims Investigation Noggle Pack"
  },
  "/lotus/types/storeitems/packages/indexteambnogglebundle": {
    "value": "Anyocorp Investor Relations Noggle Pack"
  },
  "/lotus/types/storeitems/packages/indexteamcnogglebundle": {
    "value": "Anyocorp Reclamation Unit Pack"
  },
  "/lotus/types/storeitems/packages/indexteamdnogglebundle": {
    "value": "Anyocorp Trading Group Noggle Pack"
  },
  "/lotus/types/storeitems/packages/infembolistarmourbundle": {
    "value": "Embolist Armour Bundle"
  },
  "/lotus/types/storeitems/packages/infembolistcompletebundle": {
    "value": "Embolist Collection"
  },
  "/lotus/types/storeitems/packages/infestedfinsarmorpack": {
    "value": "Iliac Armor Bundle"
  },
  "/lotus/types/storeitems/packages/infestedincursionsmodpack": {
    "value": "Mutalist Incursions Mod Pack"
  },
  "/lotus/types/storeitems/packages/ivaradeluxeskinbundle": {
    "value": "Ivara Skathi Collection"
  },
  "/lotus/types/storeitems/packages/jadepack": {
    "value": "Nyx Pack"
  },
  "/lotus/types/storeitems/packages/kavatcolorpackhyekka": {
    "value": "Hyekka Kavat Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kavatcolorpackkrest": {
    "value": "Krest Kavat Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kavatcolorpacknesyr": {
    "value": "Nesyr Kavat Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kavatcolorpacknexus": {
    "value": "Nexus Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kavatcolorpacksolstice": {
    "value": "Winter Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kavatcolorpackxmas": {
    "value": "Argyl Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kavatstarterkit": {
    "value": "Kavat Starter Kit"
  },
  "/lotus/types/storeitems/packages/kintsukuroiskinbundle": {
    "value": "Kintsugi Weapon Skin Collection"
  },
  "/lotus/types/storeitems/packages/kubrowbasecolorpack": {
    "value": "Basic Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackbold": {
    "value": "Doveran Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackcandycane": {
    "value": "Nistlebrush Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackdiamond": {
    "value": "Atrox Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackliquid": {
    "value": "Arklut Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpacklotus": {
    "value": "Averal Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpacknexus": {
    "value": "Nexus Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackreindeer": {
    "value": "Nart-deer Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpacksolstice": {
    "value": "Solstice Gene-Masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackspeckled": {
    "value": "Telmatian Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpackstriped": {
    "value": "Savenga Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowcolorpacktiger": {
    "value": "Tigrol Gene-masking Kit"
  },
  "/lotus/types/storeitems/packages/kubrowstarterkit": {
    "value": "Kubrow Starter Kit"
  },
  "/lotus/types/storeitems/packages/kuvaarmorpack": {
    "value": "Kuva Armor Pack"
  },
  "/lotus/types/storeitems/packages/kuvamegabundle": {
    "value": "Continuity Complete Collection"
  },
  "/lotus/types/storeitems/packages/lichhunterbundle": {
    "value": "Kuva Lich Hunter Collection"
  },
  "/lotus/types/storeitems/packages/lightningsheathpack": {
    "value": "Gemini Nikana Sheath"
  },
  "/lotus/types/storeitems/packages/limbodeluxeskinbundle": {
    "value": "Limbo Limina Collection"
  },
  "/lotus/types/storeitems/packages/lokipack": {
    "value": "Loki Pack"
  },
  "/lotus/types/storeitems/packages/lunaroarmorcpack": {
    "value": "Riv Elite-Guard Armor Pack"
  },
  "/lotus/types/storeitems/packages/magdeluxeskinbundle": {
    "value": "Mag Pneuma Collection"
  },
  "/lotus/types/storeitems/packages/males2helmetpack": {
    "value": "Male Helmet Pack"
  },
  "/lotus/types/storeitems/packages/mashedglyphbundle": {
    "value": "Mashed Glyph Pack"
  },
  "/lotus/types/storeitems/packages/meleedanglepack": {
    "value": "Sugatra Pack"
  },
  "/lotus/types/storeitems/packages/memeglyphbundlea": {
    "value": "Memetica Glyph Pack"
  },
  "/lotus/types/storeitems/packages/mesadeluxeskinbundle": {
    "value": "Mesa Presidio Collection"
  },
  "/lotus/types/storeitems/packages/nemesisnyxbundle": {
    "value": "Nemesis Complete Bundle"
  },
  "/lotus/types/storeitems/packages/newplayerxpcosmeticsbundle": {
    "value": "Oscira Collection"
  },
  "/lotus/types/storeitems/packages/nezhadeluxeskinbundle": {
    "value": "Nezha Empyrean Collection"
  },
  "/lotus/types/storeitems/packages/nidusbundle": {
    "value": "Nidus Collection"
  },
  "/lotus/types/storeitems/packages/nightwatchweaponskinbundle": {
    "value": "Nightwatch Skin Bundle"
  },
  "/lotus/types/storeitems/packages/novadeluxeiiskinbundle": {
    "value": "Nova Atomica Collection"
  },
  "/lotus/types/storeitems/packages/novadeluxeskinbundle": {
    "value": "Nova Asuri Bundle"
  },
  "/lotus/types/storeitems/packages/nyxdeluxeskinbundle": {
    "value": "Nyx Pasithea Collection"
  },
  "/lotus/types/storeitems/packages/oberondeluxeskinbundle": {
    "value": "Oberon Feyarch Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundleapparatist": {
    "value": "Outrider Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundlegrease": {
    "value": "Vent Rat Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundlemage": {
    "value": "Vahd Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundlemonk": {
    "value": "Ceno Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundleseer": {
    "value": "Zauba Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundlesmelter": {
    "value": "Smelter Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorarmourbundletechnomancer": {
    "value": "Haztech Armor Bundle"
  },
  "/lotus/types/storeitems/packages/operatorsuitdbundle": {
    "value": "Manduka Operator Suit Bundle"
  },
  "/lotus/types/storeitems/packages/operatorsuitsbundle": {
    "value": "Operator Suit Bundle"
  },
  "/lotus/types/storeitems/packages/orbiterdisplaybundle": {
    "value": "Display Pack"
  },
  "/lotus/types/storeitems/packages/ornateweaponbundle": {
    "value": "Tekelu Weapon Bundle"
  },
  "/lotus/types/storeitems/packages/orokinreactorandcatalystbundle": {
    "value": "Orokin Upgrade Pack"
  },
  "/lotus/types/storeitems/packages/orokinsabotagemodpack": {
    "value": "Gate Crash Mod Pack"
  },
  "/lotus/types/storeitems/packages/ostronshipdecopacka": {
    "value": "Reclamator Pack"
  },
  "/lotus/types/storeitems/packages/ostronshipdecopackb": {
    "value": "Artisan Pack"
  },
  "/lotus/types/storeitems/packages/pacifistbundle": {
    "value": "Baruuk Collection"
  },
  "/lotus/types/storeitems/packages/paladindeluxeskinbundle": {
    "value": "Oberon Feyarch Bundle"
  },
  "/lotus/types/storeitems/packages/paladinpack": {
    "value": "Paladin Bundle"
  },
  "/lotus/types/storeitems/packages/parisweaponbundle": {
    "value": "Forged Artistry Weapon Pack"
  },
  "/lotus/types/storeitems/packages/petattachmentspacka": {
    "value": "Sentinel Accessory Pack"
  },
  "/lotus/types/storeitems/packages/petattachmentspackb": {
    "value": "Sentinel Accessory Pack2"
  },
  "/lotus/types/storeitems/packages/petattachmentspackcoltek": {
    "value": "Coltek Sentinel Pack"
  },
  "/lotus/types/storeitems/packages/petattachmentspackictus": {
    "value": "Ictus Sentinel Pack"
  },
  "/lotus/types/storeitems/packages/piratepack": {
    "value": "Update 13 Mega Pack"
  },
  "/lotus/types/storeitems/packages/pistolpack": {
    "value": "Pistoleer Special"
  },
  "/lotus/types/storeitems/packages/prestigepackseven": {
    "value": "Prestige Pack VII"
  },
  "/lotus/types/storeitems/packages/prestigepacksix": {
    "value": "XB1 Prestige Pack VI"
  },
  "/lotus/types/storeitems/packages/prestigepacktwo": {
    "value": "Prestige Pack II"
  },
  "/lotus/types/storeitems/packages/priestbundle": {
    "value": "Harrow Collection"
  },
  "/lotus/types/storeitems/packages/primeaccess1tier3storeitem": {
    "value": "Prime Access Complete Bundle"
  },
  "/lotus/types/storeitems/packages/primeaccess2storeitem": {
    "value": "Saryn Prime Access Pack"
  },
  "/lotus/types/storeitems/packages/primeaccessory2storeitem": {
    "value": "Saryn Prime Accessories Pack"
  },
  "/lotus/types/storeitems/packages/primeaccessorystoreitem": {
    "value": "Vauban Prime Accessories Pack"
  },
  "/lotus/types/storeitems/packages/primeaccessstoreitem": {
    "value": "Prime Access Pack"
  },
  "/lotus/types/storeitems/packages/primevaulta": {
    "value": "Prime Vault Pack"
  },
  "/lotus/types/storeitems/packages/primevaultc": {
    "value": "Prime Unvaulted: Fire & Ice Packs"
  },
  "/lotus/types/storeitems/packages/prismaexcaliburpack": {
    "value": "Prisma Excalibur Bundle"
  },
  "/lotus/types/storeitems/packages/proteaitemsbundle": {
    "value": "Protea Collection"
  },
  "/lotus/types/storeitems/packages/railjackarmourbundle": {
    "value": "Sigma Series Armor Bundle"
  },
  "/lotus/types/storeitems/packages/railjackarmourpistolbundle": {
    "value": "Empyrean Grand Bundle"
  },
  "/lotus/types/storeitems/packages/railjackbundle": {
    "value": "Railjack Captain's Bundle"
  },
  "/lotus/types/storeitems/packages/revenantbundle": {
    "value": "Revenant Collection"
  },
  "/lotus/types/storeitems/packages/rhinowreckpack": {
    "value": "Wrecking Rhino Pack"
  },
  "/lotus/types/storeitems/packages/sanctuaryinitiationkit": {
    "value": "Sanctuary Initiation Kit"
  },
  "/lotus/types/storeitems/packages/sandmanbundle": {
    "value": "Inaros Bundle"
  },
  "/lotus/types/storeitems/packages/sarynpack": {
    "value": "Poisonous Attitude Pack"
  },
  "/lotus/types/storeitems/packages/setonearmorpack": {
    "value": "Eos Armor Bundle"
  },
  "/lotus/types/storeitems/packages/setthreearmorpack": {
    "value": "Daedalus Armor Bundle"
  },
  "/lotus/types/storeitems/packages/settwoarmorpack": {
    "value": "Edo Armor Bundle"
  },
  "/lotus/types/storeitems/packages/solarisposterbundle": {
    "value": "Solaris Poster Pack"
  },
  "/lotus/types/storeitems/packages/solsticesetthreearmorpack": {
    "value": "Solstice Daedalus Armor Bundle"
  },
  "/lotus/types/storeitems/packages/stalkerpack": {
    "value": "What Stalker?"
  },
  "/lotus/types/storeitems/packages/stalkertwobundle": {
    "value": "Hunhow`s Gift Pack"
  },
  "/lotus/types/storeitems/packages/starryskinbundle": {
    "value": "Nocturne Weapon Skin Bundle"
  },
  "/lotus/types/storeitems/packages/stealtharchwingbundle": {
    "value": "Itzal Raider Pack"
  },
  "/lotus/types/storeitems/packages/stealthpack": {
    "value": "Stealth Pack"
  },
  "/lotus/types/storeitems/packages/superchargepack": {
    "value": "Super Charge Pack"
  },
  "/lotus/types/storeitems/packages/supremesomabundle": {
    "value": "Supreme Soma Set"
  },
  "/lotus/types/storeitems/packages/tekeluweaponbundleii": {
    "value": "The Tekelu Collection II"
  },
  "/lotus/types/storeitems/packages/tekeluweaponbundleiii": {
    "value": "The Tekelu Collection III"
  },
  "/lotus/types/storeitems/packages/tengupack": {
    "value": "Update 12 Mega Bundle"
  },
  "/lotus/types/storeitems/packages/tennosaisbundle": {
    "value": "Okina Weapon Bundle"
  },
  "/lotus/types/storeitems/packages/threedayaffinitypack": {
    "value": "3 Day Affinity Booster"
  },
  "/lotus/types/storeitems/packages/threedaycreditpack": {
    "value": "3 Day Credit Booster"
  },
  "/lotus/types/storeitems/packages/threedayresourcepack": {
    "value": "3 Day Resource Booster"
  },
  "/lotus/types/storeitems/packages/tigrisredeemersetpack": {
    "value": "Razor Gunplay Bundle"
  },
  "/lotus/types/storeitems/packages/titaniabundle": {
    "value": "Silver Grove Bundle"
  },
  "/lotus/types/storeitems/packages/titaniadeluxeskinbundle": {
    "value": "Titania Empress Collection"
  },
  "/lotus/types/storeitems/packages/tnguandaobundle": {
    "value": "Guandao Collection"
  },
  "/lotus/types/storeitems/packages/tnhvarmourbundle": {
    "value": "Syrinx Armor Bundle"
  },
  "/lotus/types/storeitems/packages/tnhvitemsbundle": {
    "value": "Baza Collection"
  },
  "/lotus/types/storeitems/packages/translatorpack": {
    "value": "Dead Silence Pack"
  },
  "/lotus/types/storeitems/packages/translatorpacktwo": {
    "value": "Dead Silence Pack"
  },
  "/lotus/types/storeitems/packages/trinitydeluxeskinbundle": {
    "value": "Trinity Strega Bundle"
  },
  "/lotus/types/storeitems/packages/twitchprimestoreitem": {
    "value": "Free Prime with Twitch Prime"
  },
  "/lotus/types/storeitems/packages/update10megapack": {
    "value": "Update 10 Mega Bundle"
  },
  "/lotus/types/storeitems/packages/update12cosmeticpack": {
    "value": "U12 Cosmetic Pack"
  },
  "/lotus/types/storeitems/packages/update14megapack": {
    "value": "Mirage Bundle"
  },
  "/lotus/types/storeitems/packages/update15bundle": {
    "value": "Limbo Bundle"
  },
  "/lotus/types/storeitems/packages/urubundle": {
    "value": "Uru Templar Bundle"
  },
  "/lotus/types/storeitems/packages/vaultraiderpack": {
    "value": "Vault Raider Package"
  },
  "/lotus/types/storeitems/packages/venuscrpweaponbundle": {
    "value": "Orb Vallis Survival Collection"
  },
  "/lotus/types/storeitems/packages/voidskinpack": {
    "value": "[Placeholder]"
  },
  "/lotus/types/storeitems/packages/vteosarmourbundle": {
    "value": "Eos Prime Armor Set"
  },
  "/lotus/types/storeitems/packages/vulkardealpack": {
    "value": "Vulkar Deal Pack"
  },
  "/lotus/types/storeitems/packages/warframepack": {
    "value": "Ultimate Warframe Pack"
  },
  "/lotus/types/storeitems/packages/waterfightnogglebundle": {
    "value": "Dog Days Noggle Pack"
  },
  "/lotus/types/storeitems/packages/weaponskincontestbundle": {
    "value": "Tennogen Weapon Skin Bundle"
  },
  "/lotus/types/storeitems/packages/winter2016bundle": {
    "value": "Winter Solstice Skin Bundle"
  },
  "/lotus/types/storeitems/packages/winteraccessoriesbundle": {
    "value": "Winter Accessories Bundle"
  },
  "/lotus/types/storeitems/packages/winterbundle": {
    "value": "Winter Bundle"
  },
  "/lotus/types/storeitems/packages/winterglyphbundle": {
    "value": "Solstice Glyph Pack"
  },
  "/lotus/types/storeitems/packages/winterglyphbundleb": {
    "value": "Winter Glyph Pack"
  },
  "/lotus/types/storeitems/packages/wispbundle": {
    "value": "Wisp Collection"
  },
  "/lotus/types/storeitems/packages/wukongdeluxeskinbundle": {
    "value": "Wukong Samadhi Collection"
  },
  "/lotus/types/storeitems/slotitems/kubrowslotitem": {
    "value": "Stasis Slot"
  },
  "/lotus/types/storeitems/slotitems/suitslotitem": {
    "value": "Warframe Slot"
  },
  "/lotus/types/storeitems/slotitems/weaponslotitem": {
    "value": "Weapon Slot"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerbastilleitem": {
    "value": "Bastille"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerdaybreakitema": {
    "value": "Daybreak"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerdefaultsitema": {
    "value": "Tenno"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerdefaultsitemb": {
    "value": "Tenno II"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickereasteritema": {
    "value": "Easter"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickereximus": {
    "value": "Eximus"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerfireitema": {
    "value": "Fire"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickergammaitema": {
    "value": "Gamma"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickergrineeritema": {
    "value": "Grineer"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerhalloweenitema": {
    "value": "Halloween"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickericeitema": {
    "value": "Ice"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerinfesteditema": {
    "value": "Infested"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickeritem": {
    "value": "Classic"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickeritemb": {
    "value": "Classic Saturated"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickeritemc": {
    "value": "Storm"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickeritemd": {
    "value": "Color Picker D"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerlotus": {
    "value": "Lotus"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerorokin": {
    "value": "Orokin"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerps4itema": {
    "value": "Psiv"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerrollers": {
    "value": "Rollers"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickerrwbitem": {
    "value": "Red/white/blue"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickershamrockitem": {
    "value": "Shamrock"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickertwilightitema": {
    "value": "Twilight"
  },
  "/lotus/types/storeitems/suitcustomizations/colourpickervalitema": {
    "value": "Valentine"
  },
  "/lotus/types/storeitems/suitcustomizations/ninjacolourpickeritem": {
    "value": "Smoke Colors"
  },
  "/lotus/upgrades/mods/aura/infestationspeedreductionauramod": {
    "value": "Infested Impedance"
  },
  "/lotus/upgrades/mods/aura/playerlootradarauramod": {
    "value": "Loot Radar"
  },
  "/lotus/upgrades/mods/fusionbundles/alertfusionbundlelarge": {
    "value": "150 Endo"
  },
  "/lotus/upgrades/mods/fusionbundles/alertfusionbundlemedium": {
    "value": "100 Endo"
  },
  "/lotus/upgrades/mods/fusionbundles/alertfusionbundlesmall": {
    "value": "80 Endo"
  },
  "/lotus/upgrades/mods/fusionbundles/markettier3fusionbundle": {
    "value": "1000 Endo"
  },
  "/lotus/upgrades/mods/pvpmods/warframe/morehealthlessbulletjumpmod": {
    "value": "More Health Less Bullet Jump Mod"
  },
  "/lotus/upgrades/skins/antimatter/novaalternateskin": {
    "value": "Nova Immortal Skin"
  },
  "/lotus/upgrades/skins/antimatter/novadeluxeiisuit": {
    "value": "Nova Atomica Skin"
  },
  "/lotus/upgrades/skins/antimatter/novadeluxesuit": {
    "value": "Nova Asuri Skin"
  },
  "/lotus/upgrades/skins/archer/ivaradeluxesuit": {
    "value": "Ivara Skathi Skin"
  },
  "/lotus/upgrades/skins/archer/wintersolsticesalix": {
    "value": "Solstice Salix Syandana"
  },
  "/lotus/upgrades/skins/armor/crpcirclearmour/crpcirca": {
    "value": "Porta Shoulder Plate"
  },
  "/lotus/upgrades/skins/armor/crpcirclearmour/crpcircc": {
    "value": "Porta Chest Plate"
  },
  "/lotus/upgrades/skins/armor/crpcirclearmour/crpcircl": {
    "value": "Porta Leg Plates"
  },
  "/lotus/upgrades/skins/armor/crpcirclearmour/halloweencrpcirca": {
    "value": "Day of the Dead Porta Armor"
  },
  "/lotus/upgrades/skins/armor/crpcirclearmour/halloweencrpcircc": {
    "value": "Day of the Dead Porta Chest Armor"
  },
  "/lotus/upgrades/skins/armor/crpcirclearmour/halloweencrpcircl": {
    "value": "Day of the Dead Porta Leg Plates"
  },
  "/lotus/upgrades/skins/armor/crpindextwo/crpindextwoaarmor": {
    "value": "Quaro Shoulder Armor"
  },
  "/lotus/upgrades/skins/armor/crpindextwo/crpindextwocarmor": {
    "value": "Quaro Chest Armor"
  },
  "/lotus/upgrades/skins/armor/crpindextwo/crpindextwolarmor": {
    "value": "Quaro Leg Armor"
  },
  "/lotus/upgrades/skins/armor/halloween2014wings/halloween2014armarmor": {
    "value": "Naeberus Wings"
  },
  "/lotus/upgrades/skins/armor/setthreewinged/solsticesetthreearmarmor": {
    "value": "Solstice Daedalus Shoulder Plates"
  },
  "/lotus/upgrades/skins/armor/setthreewinged/solsticesetthreechestarmor": {
    "value": "Solstice Daedalus Chest Plate"
  },
  "/lotus/upgrades/skins/armor/setthreewinged/solsticesetthreelegarmor": {
    "value": "Solstice Daedalus Knee Plates"
  },
  "/lotus/upgrades/skins/armor/settwosamurai/settwochestarmor": {
    "value": "Set Two Chest Armor"
  },
  "/lotus/upgrades/skins/armor/warframedefaults/frostdeluxearmarmor": {
    "value": "Frost Deluxe Arm Armor"
  },
  "/lotus/upgrades/skins/armor/warframedefaults/frostprimearmarmor": {
    "value": "Frost Prime Arm Armor"
  },
  "/lotus/upgrades/skins/asp/sarynalternateskin": {
    "value": "Saryn Immortal Skin"
  },
  "/lotus/upgrades/skins/berserker/berserkerdeluxesuit": {
    "value": "Valkyr Gersemi Skin"
  },
  "/lotus/upgrades/skins/berserker/valkyralternateskin": {
    "value": "Valkyr Immortal Skin"
  },
  "/lotus/upgrades/skins/brawler/atlasdeluxeskin": {
    "value": "Atlas Karst Skin"
  },
  "/lotus/upgrades/skins/catbrows/armor/catbrowarmorc": {
    "value": "Myrdin Kavat Armor"
  },
  "/lotus/upgrades/skins/catbrows/armor/empyreankavatarmor": {
    "value": "Sigma Series Kavat Armor"
  },
  "/lotus/upgrades/skins/catbrows/armor/grnamphiskavatarmor": {
    "value": "Amphix Kavat Armor"
  },
  "/lotus/upgrades/skins/catbrows/armor/grnqueencatbrowarmor": {
    "value": "Kuva Kavat Armor"
  },
  "/lotus/upgrades/skins/catbrows/armor/wispkavatarmor": {
    "value": "Sirocco Kavat Armor"
  },
  "/lotus/upgrades/skins/clan/shipyardseventquantumbadgeitem": {
    "value": "Shipyards Event Quantum Badge Item"
  },
  "/lotus/upgrades/skins/cowgirl/mesadeluxeskin": {
    "value": "Mesa Presidio Skin"
  },
  "/lotus/upgrades/skins/decree/bansheealternateskin": {
    "value": "Banshee Immortal Skin"
  },
  "/lotus/upgrades/skins/decree/bansheedeluxesuit": {
    "value": "Banshee Soprana Skin"
  },
  "/lotus/upgrades/skins/dragon/chromadeluxeskin": {
    "value": "Chroma Dynasty Skin"
  },
  "/lotus/upgrades/skins/effects/footstepseastereggs": {
    "value": "Spring Step Ephemera"
  },
  "/lotus/upgrades/skins/ember/emberalternateskin": {
    "value": "Ember Immortal Skin"
  },
  "/lotus/upgrades/skins/events/bunnyears": {
    "value": "Lepus Headgear"
  },
  "/lotus/upgrades/skins/excalibur/excaliburalternateskin": {
    "value": "Excalibur Immortal Skin"
  },
  "/lotus/upgrades/skins/excalibur/excaliburprotosuit": {
    "value": "Excalibur Protoskin"
  },
  "/lotus/upgrades/skins/fairy/faeriealthelm": {
    "value": "Titania Mab Helmet"
  },
  "/lotus/upgrades/skins/fairy/fairyalthelmet": {
    "value": "Titania Aurai Helmet"
  },
  "/lotus/upgrades/skins/fairy/solsticefairyskin": {
    "value": "Titania Solstice Skin"
  },
  "/lotus/upgrades/skins/festivities/jingleknuckles": {
    "value": "Ringers"
  },
  "/lotus/upgrades/skins/festivities/pumpkinhead": {
    "value": "Dullahan Mask"
  },
  "/lotus/upgrades/skins/festivities/xmasglaxion": {
    "value": "Festive Glaxion Skin"
  },
  "/lotus/upgrades/skins/festivities/xmassonicor": {
    "value": "Festive Sonicor Skin"
  },
  "/lotus/upgrades/skins/frost/frostalternateskin": {
    "value": "Frost Immortal Skin"
  },
  "/lotus/upgrades/skins/frost/frostdeluxehelmet": {
    "value": "Frost Deluxe Helmet"
  },
  "/lotus/upgrades/skins/frost/frostdeluxesuit": {
    "value": "Frost Harka Skin"
  },
  "/lotus/upgrades/skins/frost/frostnobleanims": {
    "value": "Frost Noble Anims"
  },
  "/lotus/upgrades/skins/frost/frostxmasskin": {
    "value": "Festive Frost Skin"
  },
  "/lotus/upgrades/skins/frost/swrfourfrostjotunhelmet": {
    "value": "S W R Four Frost Jotun Helmet"
  },
  "/lotus/upgrades/skins/frost/swrthreefrostgrostskin": {
    "value": "S W R Three Frost Grost Skin"
  },
  "/lotus/upgrades/skins/frost/swrthreefrostzastrugahelmet": {
    "value": "S W R Three Frost Zastruga Helmet"
  },
  "/lotus/upgrades/skins/garuda/garudadeluxeskin": {
    "value": "Garuda Hinsa Skin"
  },
  "/lotus/upgrades/skins/glass/glassalthelmet": {
    "value": "Gara Virago Helmet"
  },
  "/lotus/upgrades/skins/halloween/halloweenaklato": {
    "value": "AkLato Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenamprex": {
    "value": "Amprex Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenangstrum": {
    "value": "Angstrum Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenarchsword": {
    "value": "Veritux Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenboltor": {
    "value": "Boltor Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenbraton": {
    "value": "Braton Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenbuzlok": {
    "value": "Buzlok Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweendaikyu": {
    "value": "Daiku Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweendarkdagger": {
    "value": "Dark Dagger Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweendarksplitsword": {
    "value": "Dark Split Sword Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweendragonnikana": {
    "value": "Dragon Nikana Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweendread": {
    "value": "Dread Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweendualzoren": {
    "value": "Dual Zoren Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweengalatine": {
    "value": "Galatine Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenglaive": {
    "value": "Glaive Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenglaxion": {
    "value": "Glaxion Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweengorgon": {
    "value": "Gorgon Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweengrakata": {
    "value": "Grakata Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweengrinlok": {
    "value": "Grinlok Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenimperator": {
    "value": "Imperator Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenjatkittag": {
    "value": "Jat Kittag Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenkronen": {
    "value": "Kronen Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenkunai": {
    "value": "Kunai Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenlato": {
    "value": "Lato Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenmarelok": {
    "value": "Marelok Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweennikana": {
    "value": "Nikana Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweennukor": {
    "value": "Nukor Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenopticor": {
    "value": "Opticor Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenorthos": {
    "value": "Orthos Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenparis": {
    "value": "Paris Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenregoraxeshield": {
    "value": "Ack & Brunt Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweensarpa": {
    "value": "Sarpa Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenscindo": {
    "value": "Scindo Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweensilvaandaegis": {
    "value": "Silva & Aegis Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweensimulor": {
    "value": "Simulor Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenskana": {
    "value": "Skana Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweensobek": {
    "value": "Sobek Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweensoma": {
    "value": "Soma Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweensonicor": {
    "value": "Sarpa Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenspira": {
    "value": "Spira Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenstradavar": {
    "value": "Stradavar Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweentonkor": {
    "value": "Tonkor Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweentwingrakatas": {
    "value": "Twin Grakata Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweentwingremlins": {
    "value": "Twin Gremlins Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/halloween/halloweenvasto": {
    "value": "Vasto Day of the Dead Skin"
  },
  "/lotus/upgrades/skins/hammer/solsticeheliocor": {
    "value": "Heliocor Solstice Skin"
  },
  "/lotus/upgrades/skins/harlequin/miragexmasskin": {
    "value": "Mirage Winter Skin"
  },
  "/lotus/upgrades/skins/holstercustomizations/heavyupperback": {
    "value": "Heavy Upper Back"
  },
  "/lotus/upgrades/skins/holstercustomizations/pistolhipsdual": {
    "value": "Pistol Hips Dual"
  },
  "/lotus/upgrades/skins/holstercustomizations/rifleupperback": {
    "value": "Rifle Upper Back"
  },
  "/lotus/upgrades/skins/infestation/nidusalthelmet": {
    "value": "Nidus Myxini Helmet"
  },
  "/lotus/upgrades/skins/ironframe/shieldalthelmet": {
    "value": "Hildryn Asuron Helmet"
  },
  "/lotus/upgrades/skins/jade/nyxalternateskin": {
    "value": "Nyx Immortal Skin"
  },
  "/lotus/upgrades/skins/jade/nyxdeluxesuit": {
    "value": "Nyx Pasithea Skin"
  },
  "/lotus/upgrades/skins/jade/nyxnemesissuit": {
    "value": "Nyx Nemesis Skin"
  },
  "/lotus/upgrades/skins/kubrows/armor/grineerqueenarmor": {
    "value": "Kuva Armor Collection"
  },
  "/lotus/upgrades/skins/kubrows/armor/grnamphiskubrowarmor": {
    "value": "Amphatz Kubrow Armor"
  },
  "/lotus/upgrades/skins/kubrows/armor/pacifistkubrowarmor": {
    "value": "Sloughi Kubrow Armor"
  },
  "/lotus/upgrades/skins/kubrows/collars/kubrowcollarxmas": {
    "value": "Little Helper Hat"
  },
  "/lotus/upgrades/skins/liset/gyroscope/lisetgyroscopegrineerqueens": {
    "value": "Kuva Xiphos Skin"
  },
  "/lotus/upgrades/skins/liset/gyroscope/lisetgyroscopeskinifrit": {
    "value": "Xiphos Ifrit Skin"
  },
  "/lotus/upgrades/skins/liset/gyroscope/lisetgyroscopeskinnekrognos": {
    "value": "Xiphos Henipa Skin"
  },
  "/lotus/upgrades/skins/liset/lisetblueskyskingrineerqueens": {
    "value": "Kuva Scimitar Skin"
  },
  "/lotus/upgrades/skins/liset/lisetinsectskingrineerqueens": {
    "value": "Kuva Mantis Skin"
  },
  "/lotus/upgrades/skins/liset/lisetinsectskinhalloween": {
    "value": "Day of the Dead Mantis Skin"
  },
  "/lotus/upgrades/skins/liset/lisetskingrineerqueens": {
    "value": "Kuva Liset Skin"
  },
  "/lotus/upgrades/skins/liset/lisetskinhalloween": {
    "value": "Day of the Dead Liset Skin"
  },
  "/lotus/upgrades/skins/loki/lokialternateskin": {
    "value": "Loki Immortal Skin"
  },
  "/lotus/upgrades/skins/loki/lokideluxesuit": {
    "value": "Loki Knave Skin"
  },
  "/lotus/upgrades/skins/lunaro/arcataskina": {
    "value": "Arcata Riv Skin"
  },
  "/lotus/upgrades/skins/mag/magalternateskin": {
    "value": "Mag Immortal Skin"
  },
  "/lotus/upgrades/skins/magician/limbodeluxeskin": {
    "value": "Limbo Limina Skin"
  },
  "/lotus/upgrades/skins/meleedangles/esgrnsugatrameleedangle": {
    "value": "Boloket Sugatra"
  },
  "/lotus/upgrades/skins/meleedangles/grnqueensmeleedangle": {
    "value": "Kuva Braid"
  },
  "/lotus/upgrades/skins/meleedangles/tnrailjacksugatra": {
    "value": "Sigma Series Sugatra"
  },
  "/lotus/upgrades/skins/moapet/moapetpersonalityd": {
    "value": "Emotion Module: Tenacious"
  },
  "/lotus/upgrades/skins/monkeyking/monkeykingalthelmetb": {
    "value": "Wukong Macak Helmet"
  },
  "/lotus/upgrades/skins/monkeyking/wukongdeluxeskin": {
    "value": "Wukong Samadhi Skin"
  },
  "/lotus/upgrades/skins/necramech/necramechcskin": {
    "value": "Bruntspar Necramech Skin"
  },
  "/lotus/upgrades/skins/necro/nekrosalternateskin": {
    "value": "Nekros Immortal Skin"
  },
  "/lotus/upgrades/skins/nezha/nezhaalt2helmet": {
    "value": "Nezha Jinza Helmet"
  },
  "/lotus/upgrades/skins/ninja/ashalternateskin": {
    "value": "Ash Immortal Skin"
  },
  "/lotus/upgrades/skins/ninja/ashdeluxeskin": {
    "value": "Ash Shroud Skin"
  },
  "/lotus/upgrades/skins/ninja/ninjadeluxesuit": {
    "value": "Koga Ash Skin"
  },
  "/lotus/upgrades/skins/odalisk/odaliskalt2helmet": {
    "value": "Protea Mavv Helmet"
  },
  "/lotus/upgrades/skins/odalisk/odaliskalthelmet": {
    "value": "Protea Telema Helmet"
  },
  "/lotus/upgrades/skins/operator/accessories/baromouthpiecea": {
    "value": "Baro Mouth Piece A"
  },
  "/lotus/upgrades/skins/operator/bodies/femalebody": {
    "value": "Female Body"
  },
  "/lotus/upgrades/skins/operator/bodysuits/nobodysuit": {
    "value": "No Body Suit"
  },
  "/lotus/upgrades/skins/operator/facialmarkings/facialmarkingd": {
    "value": "Facial Marking D"
  },
  "/lotus/upgrades/skins/operator/hair/hairj": {
    "value": "Hair J"
  },
  "/lotus/upgrades/skins/operator/heads/femaleheadc": {
    "value": "Female Head C"
  },
  "/lotus/upgrades/skins/operator/heads/femaleheadj": {
    "value": "Female Head J"
  },
  "/lotus/upgrades/skins/operator/hoods/nohood": {
    "value": "No Hood"
  },
  "/lotus/upgrades/skins/operator/leggings/noleggings": {
    "value": "No Leggings"
  },
  "/lotus/upgrades/skins/operator/skirts/hipsocketb": {
    "value": "Operator Hip Socket Bundle"
  },
  "/lotus/upgrades/skins/operator/skirts/noskirt": {
    "value": "No Skirt"
  },
  "/lotus/upgrades/skins/operator/sleeves/nosleeves": {
    "value": "No Sleeves"
  },
  "/lotus/upgrades/skins/pacifist/pacifistalthelmet": {
    "value": "Baruuk Meroe Helmet"
  },
  "/lotus/upgrades/skins/paladin/oberonalternateskin": {
    "value": "Oberon Immortal Skin"
  },
  "/lotus/upgrades/skins/paladin/paladindeluxesuit": {
    "value": "Oberon Feyarch Skin"
  },
  "/lotus/upgrades/skins/parazon/tnrailjackdataknife": {
    "value": "Sigma Series Parazon Skin"
  },
  "/lotus/upgrades/skins/priest/harrowdeluxesuit": {
    "value": "Harrow Reliquary Skin"
  },
  "/lotus/upgrades/skins/promo/seasonal/candycanescytheskin": {
    "value": "Spearmint Scythe"
  },
  "/lotus/upgrades/skins/ranger/rangeralt02helmet": {
    "value": "Ivara Zirastra Helmet"
  },
  "/lotus/upgrades/skins/rhino/rhinoalternateskin": {
    "value": "Rhino Immortal Skin"
  },
  "/lotus/upgrades/skins/rhino/rhinodeluxesuit": {
    "value": "Rhino Palatine Skin"
  },
  "/lotus/upgrades/skins/runner/runneralthelmet": {
    "value": "Gauss Mag Helmet"
  },
  "/lotus/upgrades/skins/sandman/sandmanalt02helmet": {
    "value": "Inaros Canopic Helmet"
  },
  "/lotus/upgrades/skins/saryn/saryndeluxesuit": {
    "value": "Saryn Orphid Skin"
  },
  "/lotus/upgrades/skins/scarves/april2015scarf": {
    "value": "Kyroptera Syandana"
  },
  "/lotus/upgrades/skins/scarves/crpaladscarf": {
    "value": "Opulas Rope"
  },
  "/lotus/upgrades/skins/scarves/crpcubinatorscarf": {
    "value": "Quaro Syandana"
  },
  "/lotus/upgrades/skins/scarves/crpmbundlesyandana": {
    "value": "Flox Syandana"
  },
  "/lotus/upgrades/skins/scarves/crpmodularscarf": {
    "value": "Vexillus Cloak"
  },
  "/lotus/upgrades/skins/scarves/energyscarf": {
    "value": "Asa Syandana"
  },
  "/lotus/upgrades/skins/scarves/flamescarf": {
    "value": "Pyra Synadana"
  },
  "/lotus/upgrades/skins/scarves/grnamphisscarf": {
    "value": "Amphor Syandana"
  },
  "/lotus/upgrades/skins/scarves/grnqueenscarf": {
    "value": "Kuva Cloak"
  },
  "/lotus/upgrades/skins/scarves/grnstrapsscarf": {
    "value": "Laddak Cloak"
  },
  "/lotus/upgrades/skins/scarves/grnvhcape": {
    "value": "Maggor Syandana"
  },
  "/lotus/upgrades/skins/scarves/halloweenerosioncape": {
    "value": "Day of the Dead Abrasys Syandana"
  },
  "/lotus/upgrades/skins/scarves/halloweenfireflyscarf": {
    "value": "Day of the Dead Igaro Synandana"
  },
  "/lotus/upgrades/skins/scarves/halloweengrnbannerscarf": {
    "value": "Day of the Dead Vanquished Banner"
  },
  "/lotus/upgrades/skins/scarves/halloweenkyropterascarf": {
    "value": "Day of the Dead Kyroptera Syandana"
  },
  "/lotus/upgrades/skins/scarves/holidayturtleneckscarf": {
    "value": "Festive Imperator Syandana"
  },
  "/lotus/upgrades/skins/scarves/infscarfribcage": {
    "value": "Thorac Syandana"
  },
  "/lotus/upgrades/skins/scarves/kazinfestedscarf": {
    "value": "Apoxys Syandana"
  },
  "/lotus/upgrades/skins/scarves/magdeluxescarf": {
    "value": "Vasa Syandana"
  },
  "/lotus/upgrades/skins/scarves/sapientcape": {
    "value": "Altra Syandana"
  },
  "/lotus/upgrades/skins/scarves/shieldframecape": {
    "value": "Surator Syandana"
  },
  "/lotus/upgrades/skins/scarves/swrthreeaquirosscarf": {
    "value": "S W R Three Aquiros Scarf"
  },
  "/lotus/upgrades/skins/scarves/swrthreensaruscarf": {
    "value": "S W R Three Nsaru Scarf"
  },
  "/lotus/upgrades/skins/scarves/tnglasssyandana": {
    "value": "Hyalus Syandana"
  },
  "/lotus/upgrades/skins/scarves/tnguandaoscarf": {
    "value": "Mozi Syandana"
  },
  "/lotus/upgrades/skins/scarves/tnodalisksyandana": {
    "value": "Rhoptron Syandana"
  },
  "/lotus/upgrades/skins/scarves/tnrailjacksyandana": {
    "value": "Sigma Series Syandana"
  },
  "/lotus/upgrades/skins/sentinels/masks/ictusmask": {
    "value": "Ictus Sentinel Mask"
  },
  "/lotus/upgrades/skins/sentinels/persiandjinnskin": {
    "value": "Djinn Gazal Skin"
  },
  "/lotus/upgrades/skins/sentinels/tails/ictustail": {
    "value": "Ictus Sentinel Tail"
  },
  "/lotus/upgrades/skins/sentinels/wings/ictuswings": {
    "value": "Ictus Sentinel Wings"
  },
  "/lotus/upgrades/skins/sigils/projectsinistersigil": {
    "value": "Project Sinister Sigil"
  },
  "/lotus/upgrades/skins/sigils/scarsigil": {
    "value": "Scar Sigil"
  },
  "/lotus/upgrades/skins/sigils/syndicatesigilsteelmeridianj": {
    "value": "Syndicate Sigil Steel Meridian J"
  },
  "/lotus/upgrades/skins/sigils/syndicatesigilsteelmeridiank": {
    "value": "Syndicate Sigil Steel Meridian K"
  },
  "/lotus/upgrades/skins/tengu/zephyrdeluxeskin": {
    "value": "Zephyr Harrier Skin"
  },
  "/lotus/upgrades/skins/trapper/vaubanalternateskin": {
    "value": "Vauban Immortal Skin"
  },
  "/lotus/upgrades/skins/trinity/trinityalternateskin": {
    "value": "Trinity Immortal Skin"
  },
  "/lotus/upgrades/skins/trinity/trinitydeluxesuit": {
    "value": "Trinity Strega Skin"
  },
  "/lotus/upgrades/skins/voices/operatorvoicecitem": {
    "value": "Operator Voice C Item"
  },
  "/lotus/upgrades/skins/voidtrader/vtexcaliburskin": {
    "value": "Excalibur Prisma Skin"
  },
  "/lotus/upgrades/skins/volt/voltalternateskin": {
    "value": "Volt Immortal Skin"
  },
  "/lotus/upgrades/skins/weapons/dualdaggers/tnmilitarydualdaggerskin": {
    "value": "Zastra Dual Dagger Skin"
  },
  "/lotus/upgrades/skins/weapons/pistols/tnsubmachinegunpistolskin": {
    "value": "Zundi Pistol Skin"
  },
  "/lotus/upgrades/skins/wisp/wispalthelmet": {
    "value": "Wisp Gaoth Helmet"
  },
  "/lotus/weapons/cephalon/melee/hammer/cephhammerweapon": {
    "value": "Heliocor"
  },
  "/lotus/weapons/cephalon/primary/cephprimary/cephprimary": {
    "value": "Simulor"
  },
  "/lotus/weapons/clantech/bio/aciddartpistol": {
    "value": "Acrid"
  },
  "/lotus/weapons/clantech/bio/bioweapon": {
    "value": "Torid"
  },
  "/lotus/weapons/clantech/chemical/flamethrower": {
    "value": "Ignis"
  },
  "/lotus/weapons/clantech/chemical/flamethrowerwraith": {
    "value": "Ignis Wraith"
  },
  "/lotus/weapons/clantech/chemical/rocketlauncher": {
    "value": "Ogris"
  },
  "/lotus/weapons/clantech/energy/crpheavyrifle": {
    "value": "Supra"
  },
  "/lotus/weapons/clantech/energy/crplaserpistol": {
    "value": "Spectra"
  },
  "/lotus/weapons/clantech/energy/crplaserrifle": {
    "value": "Prova"
  },
  "/lotus/weapons/clantech/energy/deravandal": {
    "value": "Dera Vandal"
  },
  "/lotus/weapons/clantech/energy/electroprod": {
    "value": "Electro Prod"
  },
  "/lotus/weapons/clantech/energy/energyrifle": {
    "value": "Dera"
  },
  "/lotus/weapons/clantech/energy/railgun": {
    "value": "Lanka"
  },
  "/lotus/weapons/clantech/energy/vandalelectroprod": {
    "value": "Prova Vandal"
  },
  "/lotus/weapons/corpus/bow/longbow/crpbow": {
    "value": "Crp Bow"
  },
  "/lotus/weapons/corpus/longguns/chainlightninggun/chainlightningrifle": {
    "value": "Amprex"
  },
  "/lotus/weapons/corpus/longguns/corpusump/corpusump": {
    "value": "Tetra"
  },
  "/lotus/weapons/corpus/longguns/corpusump/prismacorpusump": {
    "value": "Prisma Tetra"
  },
  "/lotus/weapons/corpus/longguns/crpbfg/conclavebfg": {
    "value": "Conclave B F G"
  },
  "/lotus/weapons/corpus/longguns/crpbfg/crpbfg": {
    "value": "Opticor"
  },
  "/lotus/weapons/corpus/longguns/crpfreezeray/crpfreezerayrifle": {
    "value": "Glaxion"
  },
  "/lotus/weapons/corpus/longguns/crprubanrifle/crprubanrifle": {
    "value": "Stahlta"
  },
  "/lotus/weapons/corpus/longguns/crpsentamlgsniper/crpsentamlgsniper": {
    "value": "Komorex"
  },
  "/lotus/weapons/corpus/longguns/crpshapeblast/crpshapeblastshotgun": {
    "value": "Exergis"
  },
  "/lotus/weapons/corpus/longguns/crpshockrifle/crpshockrifle": {
    "value": "Quanta"
  },
  "/lotus/weapons/corpus/longguns/crpshockrifle/quantavandal": {
    "value": "Quanta Vandal"
  },
  "/lotus/weapons/corpus/longguns/crpshotgun/crpshotgun": {
    "value": "Arca Plasmor"
  },
  "/lotus/weapons/corpus/longguns/crpsplitlaser/crpsplitlaser": {
    "value": "Convectrix"
  },
  "/lotus/weapons/corpus/longguns/grenadelauncher/grenadelauncher": {
    "value": "Penta"
  },
  "/lotus/weapons/corpus/longguns/machinegun/supravandal": {
    "value": "Supra Vandal"
  },
  "/lotus/weapons/corpus/longguns/spears/railgun/corpusrailgun": {
    "value": "Corpus Railgun"
  },
  "/lotus/weapons/corpus/melee/crptonfa/crptonfa": {
    "value": "Ohma"
  },
  "/lotus/weapons/corpus/melee/glaive/crpglaive/crpglaive": {
    "value": "Falcor"
  },
  "/lotus/weapons/corpus/melee/gunblade/crpgunblade/crpgunbladeweapon": {
    "value": "Stropha"
  },
  "/lotus/weapons/corpus/melee/hammer/corpushammerweapon": {
    "value": "Arca Titron"
  },
  "/lotus/weapons/corpus/melee/kickandpunch/kickpunchweapon": {
    "value": "Obex"
  },
  "/lotus/weapons/corpus/melee/kickandpunch/prismaobex": {
    "value": "Prisma Obex"
  },
  "/lotus/weapons/corpus/melee/polearm/corpuspolearm01/corpuspolearmweapon": {
    "value": "Serro"
  },
  "/lotus/weapons/corpus/melee/whip/corpuswhipweapon": {
    "value": "Lecta"
  },
  "/lotus/weapons/corpus/melee/whips/crpshockgrip/crpshockgripwhipweapon": {
    "value": "Galvacord"
  },
  "/lotus/weapons/corpus/pistols/corpushandshotgun/corpushandcannon": {
    "value": "Detron"
  },
  "/lotus/weapons/corpus/pistols/corpusminigun/corpusminigun": {
    "value": "Cestra"
  },
  "/lotus/weapons/corpus/pistols/corpusminigun/dualcorpusminigun": {
    "value": "Dual Cestra"
  },
  "/lotus/weapons/corpus/pistols/crpairpistol/crpairpistolarray": {
    "value": "Sonicor"
  },
  "/lotus/weapons/corpus/pistols/crpchargegun/crpchargegun": {
    "value": "Crp Charge Gun"
  },
  "/lotus/weapons/corpus/pistols/crpelectromag/crpelectromag": {
    "value": "Staticor"
  },
  "/lotus/weapons/corpus/pistols/crphandrl/corpushandrocketlauncher": {
    "value": "Angstrum"
  },
  "/lotus/weapons/corpus/pistols/crpsentamalgpistol/crpsentamalgpistol": {
    "value": "Cyanex"
  },
  "/lotus/weapons/corpus/pistols/crpsonificblastor/crpblastorweapon": {
    "value": "Plinx"
  },
  "/lotus/weapons/corpus/pistols/sniperpistol/crpscopegun": {
    "value": "Arca Scisco"
  },
  "/lotus/weapons/grineer/emplacements/grndeployablecover/aridgrndeployablecover": {
    "value": "Arid Grn Deployable Cover"
  },
  "/lotus/weapons/grineer/emplacements/grndeployablecover/grineerdeployablecover": {
    "value": "Grineer Deployable Cover"
  },
  "/lotus/weapons/grineer/emplacements/grndeployablecoverqueen/queengrndeployablecover": {
    "value": "Queen Grn Deployable Cover"
  },
  "/lotus/weapons/grineer/emplacements/grnemplcmntstndng/grineeremplacementstanding": {
    "value": "Grineer Emplacement Standing"
  },
  "/lotus/weapons/grineer/emplacements/grnemplcmntstndng/grineerfortressemplacementstanding": {
    "value": "Grineer Fortress Emplacement Standing"
  },
  "/lotus/weapons/grineer/grineerpistol/grineerakimbopistol": {
    "value": "Twin Gremlins"
  },
  "/lotus/weapons/grineer/grineerpistol/grineerlightpistol": {
    "value": "Viper"
  },
  "/lotus/weapons/grineer/grineerpistol/grnheavypistol": {
    "value": "Kracken"
  },
  "/lotus/weapons/grineer/grineerpistol/grnscopedpistolplayer": {
    "value": "Seer"
  },
  "/lotus/weapons/grineer/longguns/burstrifle/grnburstrifle": {
    "value": "Hind"
  },
  "/lotus/weapons/grineer/longguns/grineerassaultrifle/grnassaultrifle": {
    "value": "Grinlok"
  },
  "/lotus/weapons/grineer/longguns/grineerassaultrifle/twingrakatas": {
    "value": "Twin Grakatas"
  },
  "/lotus/weapons/grineer/longguns/grineerflakcannon/flakcannon": {
    "value": "Flak Cannon"
  },
  "/lotus/weapons/grineer/longguns/grineerleveractionrifle/glarifle": {
    "value": "G L A Rifle"
  },
  "/lotus/weapons/grineer/longguns/grineerm16homage/grineerm16rifle": {
    "value": "Karak"
  },
  "/lotus/weapons/grineer/longguns/grineerm16homage/karakwraith": {
    "value": "Velocitus"
  },
  "/lotus/weapons/grineer/longguns/grineersawbladegun/sawbladegun": {
    "value": "Miter"
  },
  "/lotus/weapons/grineer/longguns/grineersniperrifle/grnsniperrifle": {
    "value": "Vulkor"
  },
  "/lotus/weapons/grineer/longguns/grineersniperrifle/vulkarwraith": {
    "value": "Vulkar Wraith"
  },
  "/lotus/weapons/grineer/longguns/grncannon/grncannonweapon": {
    "value": "Zarr"
  },
  "/lotus/weapons/grineer/longguns/grnflamespear/grnflamespear": {
    "value": "Javlok"
  },
  "/lotus/weapons/grineer/longguns/grnfourbarrelrifle/grnfourbarrelrifleweapon": {
    "value": "Quartakk"
  },
  "/lotus/weapons/grineer/longguns/grngorgsniperrifle/grngorgsniperrifle": {
    "value": "Buzlok"
  },
  "/lotus/weapons/grineer/longguns/grngrenadelauncher/grngrenadelauncher": {
    "value": "Tonkor"
  },
  "/lotus/weapons/grineer/longguns/grnharpoongun/grnharpoongun": {
    "value": "Harpack"
  },
  "/lotus/weapons/grineer/longguns/grnspark/grnsparkrifle": {
    "value": "Kohm"
  },
  "/lotus/weapons/grineer/longguns/laseraimrifle/laseraimrifle": {
    "value": "Argonak"
  },
  "/lotus/weapons/grineer/longguns/voidtradergorgon/vtgorgon": {
    "value": "Prisma Gorgon"
  },
  "/lotus/weapons/grineer/longguns/wraithgorgon/wraithgorgon": {
    "value": "Gorgon Wraith"
  },
  "/lotus/weapons/grineer/melee/grineerclaws/grnclaws": {
    "value": "Ripkas"
  },
  "/lotus/weapons/grineer/melee/grineercombatknife/grineercombatknife": {
    "value": "Sheev"
  },
  "/lotus/weapons/grineer/melee/grineerhalberd/grnhalberd": {
    "value": "Kesheg"
  },
  "/lotus/weapons/grineer/melee/grineerjetpoweredpolearm/grineerjetpolearm": {
    "value": "Jat Kittag"
  },
  "/lotus/weapons/grineer/melee/grineermachetteandcleaver/dualcleaverweapon": {
    "value": "Dual Cleavers"
  },
  "/lotus/weapons/grineer/melee/grineermachetteandcleaver/machete": {
    "value": "Machete"
  },
  "/lotus/weapons/grineer/melee/grineermachetteandcleaver/prismadualcleavers": {
    "value": "Prisma Dual Cleavers"
  },
  "/lotus/weapons/grineer/melee/grineermachetteandcleaver/wraithmacheteweapon": {
    "value": "Machete Wraith"
  },
  "/lotus/weapons/grineer/melee/grineertylaxeandboar/regoraxeshield": {
    "value": "Ack & Brunt"
  },
  "/lotus/weapons/grineer/melee/grineerwhip/grineerwhip": {
    "value": "Atterak"
  },
  "/lotus/weapons/grineer/melee/grnboomerang/grnboomerang": {
    "value": "Halikar Boomerang"
  },
  "/lotus/weapons/grineer/melee/grndualfireaxe/grndualfireaxe": {
    "value": "Twin Basolk"
  },
  "/lotus/weapons/grineer/melee/grnegyptswd/grnegyptswdweapon": {
    "value": "Krohkur"
  },
  "/lotus/weapons/grineer/melee/grnkusarigama/grnkusarigamaweapon": {
    "value": "Grn Kusarigama Weapon"
  },
  "/lotus/weapons/grineer/melee/grnqueensceptre/grnqueensceptreweapon": {
    "value": "Broken Scepter"
  },
  "/lotus/weapons/grineer/melee/grnsparring/grnspidersparring/grnspidersparring": {
    "value": "Korrudo"
  },
  "/lotus/weapons/grineer/melee/grntrident/grntridentweapon": {
    "value": "Sydon"
  },
  "/lotus/weapons/grineer/pistols/grineercrossbow/grineergoogun": {
    "value": "Stug"
  },
  "/lotus/weapons/grineer/pistols/grineerhandshotgun/grineerhandcannon": {
    "value": "Grineer Hand Cannon"
  },
  "/lotus/weapons/grineer/pistols/grineerleveractionpistol/glapistol": {
    "value": "Marelok"
  },
  "/lotus/weapons/grineer/pistols/grineermicrowavegun/grnmicrowavepistol": {
    "value": "Nukor"
  },
  "/lotus/weapons/grineer/pistols/grnamphispistol/grnamphispistol": {
    "value": "Quatz"
  },
  "/lotus/weapons/grineer/pistols/grndwuniques/grntwinkohmaks": {
    "value": "Twin Kohmak"
  },
  "/lotus/weapons/grineer/pistols/grnkohmpistol/grnkohmpistol": {
    "value": "Kohmak"
  },
  "/lotus/weapons/grineer/pistols/grnqueenguarddualpistol/grnqueenguarddualpistols": {
    "value": "Twin Rogga"
  },
  "/lotus/weapons/grineer/pistols/grntorpedopistol/grntorpedopistol": {
    "value": "Kulstar"
  },
  "/lotus/weapons/grineer/pistols/grnuzi/grnuziweapon": {
    "value": "Stubba"
  },
  "/lotus/weapons/grineer/pistols/heatgun/grnheatgun": {
    "value": "Atomos"
  },
  "/lotus/weapons/grineer/pistols/wraithtwinvipers/wraithtwinvipers": {
    "value": "Wraith Twin Vipers"
  },
  "/lotus/weapons/grineer/shield/shieldattachment": {
    "value": "Shield Attachment"
  },
  "/lotus/weapons/infested/bow/infcernosbow/infcernos": {
    "value": "Mutalist Cernos"
  },
  "/lotus/weapons/infested/longguns/infcrpshockswarm/infcrpshockswarmrifle": {
    "value": "Mutalist Quanta"
  },
  "/lotus/weapons/infested/longguns/infestedrifle": {
    "value": "Synapse"
  },
  "/lotus/weapons/infested/longguns/infwfaccompanyingpri/infestedburstrifle": {
    "value": "Hema"
  },
  "/lotus/weapons/infested/longguns/quantafullyinfested/infquantarifle": {
    "value": "Mutalist Quanta"
  },
  "/lotus/weapons/infested/longguns/tentacluster/infestedshotgun": {
    "value": "Phage"
  },
  "/lotus/weapons/infested/melee/glaives/punctureglaive/punctureglaiveweapon": {
    "value": "Cerata"
  },
  "/lotus/weapons/infested/melee/infembolistscythe/infestedscythe": {
    "value": "Caustacyst"
  },
  "/lotus/weapons/infested/melee/infwfaccompanyingsparring/infestedkogake": {
    "value": "Hirudo"
  },
  "/lotus/weapons/infested/melee/swords/mios/mios": {
    "value": "Mios"
  },
  "/lotus/weapons/infested/melee/swords/mire/miresword": {
    "value": "Mire"
  },
  "/lotus/weapons/infested/melee/tipedostaff/inftipedostaff": {
    "value": "Lesion"
  },
  "/lotus/weapons/infested/melee/whip/infestedwhip/infestedwhipweapon": {
    "value": "Mios"
  },
  "/lotus/weapons/infested/pistols/infesteddartpistol/infesteddartpistol": {
    "value": "Tysis"
  },
  "/lotus/weapons/infested/pistols/infestedpistol": {
    "value": "Embolist"
  },
  "/lotus/weapons/infested/pistols/infproximitystars/infproximitystars": {
    "value": "Pox"
  },
  "/lotus/weapons/infested/pistols/infvomitgun/infvomitgunwep": {
    "value": "Dual Toxocyst"
  },
  "/lotus/weapons/mk1series/mk1bo": {
    "value": "MK1-Bo"
  },
  "/lotus/weapons/mk1series/mk1braton": {
    "value": "MK1-Braton"
  },
  "/lotus/weapons/mk1series/mk1furax": {
    "value": "MK1-Furax"
  },
  "/lotus/weapons/mk1series/mk1furis": {
    "value": "MK1-Furis"
  },
  "/lotus/weapons/mk1series/mk1kunai": {
    "value": "MK1-Kunai"
  },
  "/lotus/weapons/mk1series/mk1strun": {
    "value": "MK1 Strun"
  },
  "/lotus/weapons/syndicates/arbitersofhexis/longguns/ahboltor": {
    "value": "Telos Boltor"
  },
  "/lotus/weapons/syndicates/arbitersofhexis/melee/ahboltace": {
    "value": "Telos Boltace"
  },
  "/lotus/weapons/syndicates/arbitersofhexis/pistols/ahakbolto": {
    "value": "Telos Akbolto"
  },
  "/lotus/weapons/syndicates/cephalonsuda/longguns/cssimulor": {
    "value": "Synoid Simulor"
  },
  "/lotus/weapons/syndicates/cephalonsuda/melee/csheliocor": {
    "value": "Synoid Heliocor"
  },
  "/lotus/weapons/syndicates/cephalonsuda/pistols/csdroidarray": {
    "value": "Gammacor"
  },
  "/lotus/weapons/syndicates/cephalonsuda/pistols/cssynoidgammacor": {
    "value": "Synoid Synoid Gammacor"
  },
  "/lotus/weapons/syndicates/newloka/longguns/nltigris": {
    "value": "Sancti Tigris"
  },
  "/lotus/weapons/syndicates/newloka/melee/nlmagistar": {
    "value": "Sancti Magistar"
  },
  "/lotus/weapons/syndicates/newloka/pistols/nlcastanas": {
    "value": "Sancti Castanas"
  },
  "/lotus/weapons/syndicates/perrinsequence/longguns/pspenta": {
    "value": "Secura Penta"
  },
  "/lotus/weapons/syndicates/perrinsequence/melee/pslecta": {
    "value": "Secura Lecta"
  },
  "/lotus/weapons/syndicates/perrinsequence/pistols/psdualcestra": {
    "value": "Secura Dual Cestra"
  },
  "/lotus/weapons/syndicates/redveil/bows/rvcernos": {
    "value": "Rakta Cernos"
  },
  "/lotus/weapons/syndicates/redveil/melee/rvdarkdagger": {
    "value": "Rakta Dark Dagger"
  },
  "/lotus/weapons/syndicates/redveil/pistols/rvballistica": {
    "value": "Rakta Ballistica"
  },
  "/lotus/weapons/syndicates/steelmeridian/longguns/smhek": {
    "value": "Vaykor Hek"
  },
  "/lotus/weapons/syndicates/steelmeridian/melee/smsydon": {
    "value": "Vaykor Sydon"
  },
  "/lotus/weapons/syndicates/steelmeridian/pistols/smmarelok": {
    "value": "Vaykor Marelok"
  },
  "/lotus/weapons/tenno/akimbo/akimboautopistols": {
    "value": "Afuris"
  },
  "/lotus/weapons/tenno/akimbo/akimbobolto": {
    "value": "AkBolto"
  },
  "/lotus/weapons/tenno/akimbo/akimbopistol": {
    "value": "AkLato"
  },
  "/lotus/weapons/tenno/akimbo/akimboshotgun": {
    "value": "AkBronco"
  },
  "/lotus/weapons/tenno/akimbo/akimboviperpistols": {
    "value": "Twin Vipers"
  },
  "/lotus/weapons/tenno/akimbo/aklexpistols": {
    "value": "AkLex"
  },
  "/lotus/weapons/tenno/akimbo/aklexprimepistols": {
    "value": "AkLex Prime"
  },
  "/lotus/weapons/tenno/akimbo/dualmagnus": {
    "value": "AkMagnus"
  },
  "/lotus/weapons/tenno/akimbo/dualvastos": {
    "value": "AkVastos"
  },
  "/lotus/weapons/tenno/akimbo/primeakimboshotgun": {
    "value": "AkBronco Prime"
  },
  "/lotus/weapons/tenno/archwing/melee/archaxe/archaxeweapon": {
    "value": "Onorix"
  },
  "/lotus/weapons/tenno/archwing/melee/archhammer/archhammer": {
    "value": "Rathbone"
  },
  "/lotus/weapons/tenno/archwing/melee/archscythe/archscythe": {
    "value": "Kaszas"
  },
  "/lotus/weapons/tenno/archwing/melee/archsword/archswordweapon": {
    "value": "Veritux"
  },
  "/lotus/weapons/tenno/archwing/melee/archswordandshield/archswordshield": {
    "value": "Centaur"
  },
  "/lotus/weapons/tenno/archwing/melee/archswordhook/archhookswordweapon": {
    "value": "Agkuza Arch-melee"
  },
  "/lotus/weapons/tenno/archwing/melee/grnarchhand/grnarchhandweapon": {
    "value": "Knux"
  },
  "/lotus/weapons/tenno/archwing/melee/voidtraderarchsword/vtarchswordweapon": {
    "value": "Prisma Veritux"
  },
  "/lotus/weapons/tenno/archwing/primary/archburstgun/archburstgun": {
    "value": "Cyngas Arch-gun"
  },
  "/lotus/weapons/tenno/archwing/primary/archwingheavypistols/archheavypistols": {
    "value": "Dual Decurion"
  },
  "/lotus/weapons/tenno/archwing/primary/foldingmachinegun/archmachinegun": {
    "value": "Imperator"
  },
  "/lotus/weapons/tenno/archwing/primary/foldingmachinegun/archmachinegunvandal": {
    "value": "Imperator Vandal"
  },
  "/lotus/weapons/tenno/archwing/primary/launchgrenade/archcannon": {
    "value": "Corvas"
  },
  "/lotus/weapons/tenno/archwing/primary/railgun/archrailgun": {
    "value": "Arch Railgun"
  },
  "/lotus/weapons/tenno/archwing/primary/repurposedgrineerantiaircraftgun/archgrnaagun": {
    "value": "Grattler"
  },
  "/lotus/weapons/tenno/archwing/primary/rocketartillery/archrocketcrossbow": {
    "value": "Fluctus"
  },
  "/lotus/weapons/tenno/archwing/primary/tnshieldframearchgun/tnshieldframearchgun": {
    "value": "Larkspur"
  },
  "/lotus/weapons/tenno/bows/antlerbow/antlerbow": {
    "value": "Cernos"
  },
  "/lotus/weapons/tenno/bows/asymetricalbow/asymetricalbow": {
    "value": "Daikyu"
  },
  "/lotus/weapons/tenno/bows/huntingbow": {
    "value": "Paris"
  },
  "/lotus/weapons/tenno/bows/primecernos/primecernos": {
    "value": "Cernos Prime"
  },
  "/lotus/weapons/tenno/bows/primehuntingbow": {
    "value": "Paris Prime"
  },
  "/lotus/weapons/tenno/bows/stalkerbow": {
    "value": "Dread"
  },
  "/lotus/weapons/tenno/bows/valentinesconclavevariantbow": {
    "value": "Valentines Conclave Variant Bow"
  },
  "/lotus/weapons/tenno/longguns/dexthethird/dexthethird": {
    "value": "Dex Sybaris"
  },
  "/lotus/weapons/tenno/longguns/doublebarrelshotgun/tennodoublebarrelshotgun": {
    "value": "Tigris"
  },
  "/lotus/weapons/tenno/longguns/drakerifle/drakerifle": {
    "value": "Tiberon"
  },
  "/lotus/weapons/tenno/longguns/fiveshotsniper/fiveshotsniper": {
    "value": "Rubico"
  },
  "/lotus/weapons/tenno/longguns/loginprimary/sundialrifle": {
    "value": "Sundial Rifle"
  },
  "/lotus/weapons/tenno/longguns/miter/tnomiter": {
    "value": "Panthera"
  },
  "/lotus/weapons/tenno/longguns/primeboltor/primeboltor": {
    "value": "Boltor Prime"
  },
  "/lotus/weapons/tenno/longguns/primeburston/primeburston": {
    "value": "Burston Prime"
  },
  "/lotus/weapons/tenno/longguns/primesoma/primesomarifle": {
    "value": "Soma Prime"
  },
  "/lotus/weapons/tenno/longguns/primesybaris/primesybarisrifle": {
    "value": "Sybaris Prime"
  },
  "/lotus/weapons/tenno/longguns/primetigris/primetigris": {
    "value": "Tigris Prime"
  },
  "/lotus/weapons/tenno/longguns/primevectis/primevectisrifle": {
    "value": "Prime Vectis"
  },
  "/lotus/weapons/tenno/longguns/repeatingcrossbow/repeatingcrossbow": {
    "value": "Zhuge"
  },
  "/lotus/weapons/tenno/longguns/sapientprimary/sapientprimaryweapon": {
    "value": "Acceltra"
  },
  "/lotus/weapons/tenno/longguns/tennotommygun/tennotommygunrifle": {
    "value": "Stradavar"
  },
  "/lotus/weapons/tenno/longguns/tnbardrifle/tnbardrifle": {
    "value": "Tenora"
  },
  "/lotus/weapons/tenno/longguns/tnglassshotgun/tnglassshotgungun": {
    "value": "Astilla"
  },
  "/lotus/weapons/tenno/longguns/tnheavyshotgun/tnheavyshotgungun": {
    "value": "Corinth"
  },
  "/lotus/weapons/tenno/longguns/tnoleveraction/tnoleveractionrifle": {
    "value": "Sybaris"
  },
  "/lotus/weapons/tenno/longguns/tnoprmryxbow/tnoprmryxbowweapon": {
    "value": "Attica"
  },
  "/lotus/weapons/tenno/longguns/tnpriestspear/tnpriestspeargun": {
    "value": "Tn Priest Spear Gun"
  },
  "/lotus/weapons/tenno/longguns/tnrailjackrifle/railjackriflegun": {
    "value": "Quellor"
  },
  "/lotus/weapons/tenno/longguns/tnsmg/tnsmgweapon": {
    "value": "Baza"
  },
  "/lotus/weapons/tenno/longguns/tnwisprifle/tnwisprifle": {
    "value": "Fulmin"
  },
  "/lotus/weapons/tenno/longguns/wraithlatron/wraithlatron": {
    "value": "Latron Wraith"
  },
  "/lotus/weapons/tenno/melee/axe/axeweapon": {
    "value": "Scindo"
  },
  "/lotus/weapons/tenno/melee/axe/dualaxeweapon": {
    "value": "Dual Zoren"
  },
  "/lotus/weapons/tenno/melee/axe/dualinfestedaxesweapon": {
    "value": "Dual Ichor"
  },
  "/lotus/weapons/tenno/melee/axe/primescindo/primescindoweapon": {
    "value": "Scindo Prime"
  },
  "/lotus/weapons/tenno/melee/brass knuckles/brassknuckles": {
    "value": "Kogake"
  },
  "/lotus/weapons/tenno/melee/claws/tennoclaws": {
    "value": "Venka"
  },
  "/lotus/weapons/tenno/melee/cronussword/cronuslongsword": {
    "value": "Cronus"
  },
  "/lotus/weapons/tenno/melee/cronussword/primecronuslongsword": {
    "value": "Dakra Prime"
  },
  "/lotus/weapons/tenno/melee/dagger/ceramicdagger": {
    "value": "Ceramic Dagger"
  },
  "/lotus/weapons/tenno/melee/dagger/dagger": {
    "value": "Heat Dagger"
  },
  "/lotus/weapons/tenno/melee/dagger/darkdagger": {
    "value": "Dark Dagger"
  },
  "/lotus/weapons/tenno/melee/dualdagger/dualdagger": {
    "value": "Fang"
  },
  "/lotus/weapons/tenno/melee/dualdagger/dualetherdagger": {
    "value": "Dual Ether Dagger"
  },
  "/lotus/weapons/tenno/melee/dualdagger/fangprimedagger": {
    "value": "Fang Prime"
  },
  "/lotus/weapons/tenno/melee/dualkamas/dualkamas": {
    "value": "Dual Kamas"
  },
  "/lotus/weapons/tenno/melee/dualkamas/singlekama": {
    "value": "Kama"
  },
  "/lotus/weapons/tenno/melee/dualshortsword/dualethersword": {
    "value": "Dual Ether"
  },
  "/lotus/weapons/tenno/melee/dualshortsword/dualheatswords": {
    "value": "Dual Heat Swords"
  },
  "/lotus/weapons/tenno/melee/dualshortsword/dualshortsword": {
    "value": "Dual Ether"
  },
  "/lotus/weapons/tenno/melee/fist/fist": {
    "value": "Furax"
  },
  "/lotus/weapons/tenno/melee/fist/furaxwraith": {
    "value": "Furax Wraith"
  },
  "/lotus/weapons/tenno/melee/gauntlet/brawlerknuckles/brawlerknuckles": {
    "value": "Tekko"
  },
  "/lotus/weapons/tenno/melee/gauntlet/gauntlet": {
    "value": "Ankyros"
  },
  "/lotus/weapons/tenno/melee/gauntlet/primeankyros/primeankyros": {
    "value": "Ankyros Prime"
  },
  "/lotus/weapons/tenno/melee/glaives/boomerang/boomerangweapon": {
    "value": "Kestrel"
  },
  "/lotus/weapons/tenno/melee/glaives/lightglaive/lightglaiveweapon": {
    "value": "Glaive"
  },
  "/lotus/weapons/tenno/melee/glaives/primeglaive/primeglaiveweapon": {
    "value": "Glaive Prime"
  },
  "/lotus/weapons/tenno/melee/glaives/teshinglaive/tnteshinglaivewep": {
    "value": "Orvius"
  },
  "/lotus/weapons/tenno/melee/greatsword/greatsword": {
    "value": "Gram"
  },
  "/lotus/weapons/tenno/melee/gunblade/gunbladeautomatic/tnogunbladeautomatic": {
    "value": "Gunblade"
  },
  "/lotus/weapons/tenno/melee/gunblade/tnogunblade": {
    "value": "Redeemer"
  },
  "/lotus/weapons/tenno/melee/hammer/glasshammer/glasshammer": {
    "value": "Volnus"
  },
  "/lotus/weapons/tenno/melee/hammer/hammerweapon": {
    "value": "Fragor"
  },
  "/lotus/weapons/tenno/melee/hammer/icehammer/icehammer": {
    "value": "Sibear"
  },
  "/lotus/weapons/tenno/melee/longsword/ethersword": {
    "value": "Ether Sword"
  },
  "/lotus/weapons/tenno/melee/longsword/longsword": {
    "value": "Skana"
  },
  "/lotus/weapons/tenno/melee/longsword/skanaprime": {
    "value": "Skana Prime"
  },
  "/lotus/weapons/tenno/melee/maces/paladinmace/paladinmaceweapon": {
    "value": "Magistar"
  },
  "/lotus/weapons/tenno/melee/nunchaku/nunchaku/nunchaku": {
    "value": "Nonkondi"
  },
  "/lotus/weapons/tenno/melee/nunchaku/tnonunchaku/tnonunchaku": {
    "value": "Shaku"
  },
  "/lotus/weapons/tenno/melee/persianmachete/djinnmachete": {
    "value": "Gazal"
  },
  "/lotus/weapons/tenno/melee/polearms/flowerpowerpolearm/flowerpowerpolearmwep": {
    "value": "Tonbo"
  },
  "/lotus/weapons/tenno/melee/polearms/polearmweapon": {
    "value": "Orthos"
  },
  "/lotus/weapons/tenno/melee/polearms/primepolearmweapon": {
    "value": "Orthos Prime"
  },
  "/lotus/weapons/tenno/melee/polearms/tnguandaopolearm/tnguandaopolearmweapon": {
    "value": "Tn Guandao Polearm Weapon"
  },
  "/lotus/weapons/tenno/melee/polearms/tnhalberdpolearm/tnhalberdpolearmweapon": {
    "value": "Cassowar"
  },
  "/lotus/weapons/tenno/melee/primedualkamas/primedualkamas": {
    "value": "Dual Kamas Prime"
  },
  "/lotus/weapons/tenno/melee/primefragor/primefragor": {
    "value": "Fragor Prime"
  },
  "/lotus/weapons/tenno/melee/primevenka/primevenkaclaws": {
    "value": "Venka Prime"
  },
  "/lotus/weapons/tenno/melee/scythe/etherscytheweapon": {
    "value": "Ether Reaper"
  },
  "/lotus/weapons/tenno/melee/scythe/parisscythe/parisscythe": {
    "value": "Anku"
  },
  "/lotus/weapons/tenno/melee/scythe/parisscythe/variantxmasscythe": {
    "value": "Variant Xmas Scythe"
  },
  "/lotus/weapons/tenno/melee/scythe/reaperweapon": {
    "value": "Reaper Prime"
  },
  "/lotus/weapons/tenno/melee/scythe/stalkerscytheweapon": {
    "value": "Hate"
  },
  "/lotus/weapons/tenno/melee/soma/somadualkamas": {
    "value": "Dual Raza"
  },
  "/lotus/weapons/tenno/melee/staff/grnstaff": {
    "value": "Amphis"
  },
  "/lotus/weapons/tenno/melee/staff/monkspade/tnomonkstaff": {
    "value": "Tipedo"
  },
  "/lotus/weapons/tenno/melee/staff/primebo/primeboweapon": {
    "value": "Bo Prime"
  },
  "/lotus/weapons/tenno/melee/staff/staff": {
    "value": "Bo"
  },
  "/lotus/weapons/tenno/melee/sundialaxe/sundialaxeweapon": {
    "value": "Zenistar"
  },
  "/lotus/weapons/tenno/melee/swords/cutlassandpoignard/cutlasspoignardswords": {
    "value": "Nami Skyla"
  },
  "/lotus/weapons/tenno/melee/swords/cutlassandpoignard/tennocutlass": {
    "value": "Nami Solo"
  },
  "/lotus/weapons/tenno/melee/swords/darksword/darklongsword": {
    "value": "Dark Sword"
  },
  "/lotus/weapons/tenno/melee/swords/darksword/darksworddaggerhybridweapon": {
    "value": "Dark Split-Sword"
  },
  "/lotus/weapons/tenno/melee/swords/dexthesecond/dexthesecond": {
    "value": "Dex Dakra"
  },
  "/lotus/weapons/tenno/melee/swords/greatsword/tennogreatsword": {
    "value": "Galatine"
  },
  "/lotus/weapons/tenno/melee/swords/heatsword/heatlongsword": {
    "value": "Heat Sword"
  },
  "/lotus/weapons/tenno/melee/swords/jawsword/jawlongsword": {
    "value": "Jaw Sword"
  },
  "/lotus/weapons/tenno/melee/swords/katanaandwakizashi/katana": {
    "value": "Nikana"
  },
  "/lotus/weapons/tenno/melee/swords/katanaandwakizashi/lowkatana": {
    "value": "Dragon Nikana"
  },
  "/lotus/weapons/tenno/melee/swords/katanaandwakizashi/variantkatana": {
    "value": "Variant Katana"
  },
  "/lotus/weapons/tenno/melee/swords/krisdagger/krisdagger": {
    "value": "Karyst"
  },
  "/lotus/weapons/tenno/melee/swords/pangolinsword/pangolinlongsword": {
    "value": "Pangolin Sword"
  },
  "/lotus/weapons/tenno/melee/swords/plasmasword/plasmalongsword": {
    "value": "Plasma Sword"
  },
  "/lotus/weapons/tenno/melee/swords/primegalatine/primegalatine": {
    "value": "Galatine Prime"
  },
  "/lotus/weapons/tenno/melee/swords/primekatana/primenikana": {
    "value": "Nikana Prime"
  },
  "/lotus/weapons/tenno/melee/swords/stalkermios/stalkermios": {
    "value": "Lacera"
  },
  "/lotus/weapons/tenno/melee/swords/stalkertwo/stalkertwogreatsword": {
    "value": "War"
  },
  "/lotus/weapons/tenno/melee/swords/stalkertwo/stalkertwosmallsword": {
    "value": "Broken War"
  },
  "/lotus/weapons/tenno/melee/swords/tennosai/tennosais": {
    "value": "Okina"
  },
  "/lotus/weapons/tenno/melee/swords/threeleaf/threeleaf": {
    "value": "Three Leaf"
  },
  "/lotus/weapons/tenno/melee/swords/tnorapier/tnorapier": {
    "value": "Destreza"
  },
  "/lotus/weapons/tenno/melee/swords/tnrailjackgreatkatana/tnrailjackgreatkatanaweapon": {
    "value": "Pennant"
  },
  "/lotus/weapons/tenno/melee/swords/tntwohandedkatana/tntwohandedkatana": {
    "value": "Tatsu"
  },
  "/lotus/weapons/tenno/melee/swordsandboards/meleecontestwinnerone/tennoswordshield": {
    "value": "Silva & Aegis"
  },
  "/lotus/weapons/tenno/melee/swordsandboards/pacifistshieldandsword/pacifistshieldsword": {
    "value": "Cobra & Crane"
  },
  "/lotus/weapons/tenno/melee/tonfa/boltonfa/boltonfa": {
    "value": "Boltace"
  },
  "/lotus/weapons/tenno/melee/tonfa/tonfacontestwinner/tennotonfa": {
    "value": "Kronen"
  },
  "/lotus/weapons/tenno/pistol/autopistol": {
    "value": "Furis"
  },
  "/lotus/weapons/tenno/pistol/broncoprime": {
    "value": "Bronco Prime"
  },
  "/lotus/weapons/tenno/pistol/burstpistol": {
    "value": "Sicarus"
  },
  "/lotus/weapons/tenno/pistol/crossbow": {
    "value": "Ballistica"
  },
  "/lotus/weapons/tenno/pistol/handshotgun": {
    "value": "Pyrana"
  },
  "/lotus/weapons/tenno/pistol/heavypistol": {
    "value": "Lex"
  },
  "/lotus/weapons/tenno/pistol/latoprime": {
    "value": "Lato Prime"
  },
  "/lotus/weapons/tenno/pistol/latovandal": {
    "value": "Lato Vandal"
  },
  "/lotus/weapons/tenno/pistol/lotuspistol": {
    "value": "Secondary Only"
  },
  "/lotus/weapons/tenno/pistol/pistol": {
    "value": "Bolto"
  },
  "/lotus/weapons/tenno/pistol/revolverpistol": {
    "value": "Vasto"
  },
  "/lotus/weapons/tenno/pistols/allnew1hsg/allnew1hsg": {
    "value": "Euphona Prime"
  },
  "/lotus/weapons/tenno/pistols/automatichandcrossbow/autocrossbow": {
    "value": "Ballistica"
  },
  "/lotus/weapons/tenno/pistols/dexfuris/dexfuris": {
    "value": "Dex Furis"
  },
  "/lotus/weapons/tenno/pistols/harlequingun/harlequinpistols": {
    "value": "Akzani"
  },
  "/lotus/weapons/tenno/pistols/magnum/magnum": {
    "value": "Magnus"
  },
  "/lotus/weapons/tenno/pistols/primeakstiletto/primeakstiletto": {
    "value": "Akstiletto Prime"
  },
  "/lotus/weapons/tenno/pistols/primelex/primelex": {
    "value": "Lex Prime"
  },
  "/lotus/weapons/tenno/pistols/primesicarus/primesicaruspistol": {
    "value": "Sicarus Prime"
  },
  "/lotus/weapons/tenno/pistols/primevasto/primevastopistol": {
    "value": "Vasto Prime"
  },
  "/lotus/weapons/tenno/pistols/sapientpistol/sapientpistol": {
    "value": "Akarius"
  },
  "/lotus/weapons/tenno/pistols/sawnoffshotgun/tennohandshotgun": {
    "value": "Pyrana"
  },
  "/lotus/weapons/tenno/pistols/somasidearm/akimbosomapistols": {
    "value": "Aksomati"
  },
  "/lotus/weapons/tenno/pistols/sundialgun/sundialpistol": {
    "value": "Azima"
  },
  "/lotus/weapons/tenno/pistols/tennouzi/tennouzi": {
    "value": "Akstiletto"
  },
  "/lotus/weapons/tenno/pistols/tigrisredeemersetpistol/tnobladedpistols": {
    "value": "Akjagara"
  },
  "/lotus/weapons/tenno/pistols/tnbardpistol/tnbardpistolgun": {
    "value": "Pandero"
  },
  "/lotus/weapons/tenno/pistols/tnguandopistol/tnguandopistolgun": {
    "value": "Tn Guando Pistol Gun"
  },
  "/lotus/weapons/tenno/pistols/tnodalisksmg/tnodalisksmgpistol": {
    "value": "Velox"
  },
  "/lotus/weapons/tenno/pistols/tnpriestpistolscope/tnpriestpistolweapon": {
    "value": "Tn Priest Pistol Weapon"
  },
  "/lotus/weapons/tenno/rifle/boltorifle": {
    "value": "Boltor"
  },
  "/lotus/weapons/tenno/rifle/bratonprime": {
    "value": "Braton Prime"
  },
  "/lotus/weapons/tenno/rifle/burstrifle": {
    "value": "Burston"
  },
  "/lotus/weapons/tenno/rifle/heavyrifle": {
    "value": "Gorgon"
  },
  "/lotus/weapons/tenno/rifle/latronprime": {
    "value": "Latron Prime"
  },
  "/lotus/weapons/tenno/rifle/rifle": {
    "value": "Braton"
  },
  "/lotus/weapons/tenno/rifle/semiautorifle": {
    "value": "Latron"
  },
  "/lotus/weapons/tenno/rifle/sniperrifle": {
    "value": "Snipetron"
  },
  "/lotus/weapons/tenno/rifle/startingrifle": {
    "value": "MK1-Braton"
  },
  "/lotus/weapons/tenno/rifle/tennoar": {
    "value": "Soma"
  },
  "/lotus/weapons/tenno/rifle/tennosniperrifle": {
    "value": "Vectis"
  },
  "/lotus/weapons/tenno/rifle/vandalsniperrifle": {
    "value": "Snipetron Vandal"
  },
  "/lotus/weapons/tenno/shotgun/doublebarrelshotgun": {
    "value": "Tigris"
  },
  "/lotus/weapons/tenno/shotgun/eviseratorweapon": {
    "value": "Eviserator Weapon"
  },
  "/lotus/weapons/tenno/shotgun/fullautoshotgun": {
    "value": "Boar"
  },
  "/lotus/weapons/tenno/shotgun/primeboar": {
    "value": "Boar Prime"
  },
  "/lotus/weapons/tenno/shotgun/quadshotgun": {
    "value": "Hek"
  },
  "/lotus/weapons/tenno/shotgun/shotgun": {
    "value": "Strun"
  },
  "/lotus/weapons/tenno/shotgun/shotgunvandal": {
    "value": "Strun Wraith"
  },
  "/lotus/weapons/tenno/throwingweapons/glasskunai/glasskunaiweapon": {
    "value": "Fusilai"
  },
  "/lotus/weapons/tenno/throwingweapons/kunai": {
    "value": "Kunai"
  },
  "/lotus/weapons/tenno/throwingweapons/lidagger/lidagger": {
    "value": "Spira"
  },
  "/lotus/weapons/tenno/throwingweapons/primelidagger/primelidagger": {
    "value": "Prime Li Dagger"
  },
  "/lotus/weapons/tenno/throwingweapons/primethrowingstar/primehikou": {
    "value": "Hikou Prime"
  },
  "/lotus/weapons/tenno/throwingweapons/stalkerkunai": {
    "value": "Despair"
  },
  "/lotus/weapons/tenno/throwingweapons/stickybomb/stickybombs": {
    "value": "Hikou"
  },
  "/lotus/weapons/tenno/throwingweapons/tennostars": {
    "value": "Tenno Stars"
  },
  "/lotus/weapons/tenno/throwingweapons/u18throwingknives/u18throwingknives": {
    "value": "Talons"
  },
  "/lotus/weapons/tenno/throwingweapons/variantsnowballs": {
    "value": "Variant Snow Balls"
  },
  "/lotus/weapons/tenno/throwingweapons/varianttennostars": {
    "value": "Variant Tenno Stars"
  },
  "/lotus/weapons/voidtrader/prismagrakata": {
    "value": "Prisma Grakata"
  },
  "/lotus/weapons/voidtrader/prismaskana": {
    "value": "Prisma Skana"
  },
  "/lotus/weapons/voidtrader/vtdetron": {
    "value": "Mara Detron"
  },
  "primevaulttrader": {
    "value": "Varzia Dax"
  },
  "projectindex": {
    "value": "Index Points"
  },
  "ArbitersSyndicate": {
    "value": "Arbiters of Hexis"
  },
  "CephalonSudaSyndicate": {
    "value": "Cephalon Suda"
  },
  "NewLokaSyndicate": {
    "value": "New Loka"
  },
  "PerrinSyndicate": {
    "value": "Perrin Sequence"
  },
  "SteelMeridianSyndicate": {
    "value": "Steel Meridian"
  },
  "RedVeilSyndicate": {
    "value": "Red Veil"
  },
  "CetusSyndicate": {
    "value": "Ostrons"
  },
  "QuillsSyndicate": {
    "value": "Quills"
  },
  "AssassinsSyndicate": {
    "value": "Assassins"
  },
  "EventSyndicate": {
    "value": "Operations Syndicate"
  },
  "SolarisSyndicate": {
    "value": "Solaris United"
  },
  "VoxSyndicate": {
    "value": "Vox Solaris"
  },
  "VentKidsSyndicate": {
    "value": "Vent Kids"
  },
  "EntratiSyndicate": {
    "value": "Entrati"
  },
  "NecraloidSyndicate": {
    "value": "Necraloid"
  },
  "KahlSyndicate": {
    "value": "Kahl's Garrison"
  },
  "ZarimanSyndicate": {
    "value": "The Holdfasts"
  },
  "RadioLegionSyndicate": {
    "value": "The Wolf of Saturn Six"
  },
  "RadioLegion2Syndicate": {
    "value": "The Emissary"
  },
  "RadioLegion3Syndicate": {
    "value": "Glassmaker"
  },
  "RadioLegionIntermissionSyndicate": {
    "value": "Intermission"
  },
  "RadioLegionIntermission2Syndicate": {
    "value": "Intermission II"
  },
  "RadioLegionIntermission3Syndicate": {
    "value": "Intermission III"
  },
  "RadioLegionIntermission4Syndicate": {
    "value": "Nora's Choice"
  },
  "RadioLegionIntermission5Syndicate": {
    "value": "Nora's Mix Volume 1"
  },
  "RadioLegionIntermission6Syndicate": {
    "value": "Nora's Mix Volume 2"
  },
  "/Lotus/Types/StoreItems/Packages/DeluxeBundles/TitaniaDeluxeIISkinBundle": {
    "value": "Titania Donann Collection"
  },
  "/Lotus/Weapons/Grineer/ThrowingWeapons/GrnVorStickyBomb/GrnVorStickyBomb": {
    "value": "Aegrit"
  },
  "/Lotus/Types/StoreItems/Packages/VeilbreakerVoidshellBundle": {
    "value": "Void Adornment Bundle II"
  },
  "/Lotus/Upgrades/Skins/Armor/SWPiercingEyeShoulderArmor/SWPiercingEyeShoulderArmor": {
    "value": "Piercing Eye Shoulder Armor"
  },
  "/Lotus/Upgrades/Skins/Odalisk/ProteaDeluxeSkin": {
    "value": "Protea Caladrius Skin"
  },
  "/Lotus/Types/StoreItems/Packages/DeluxeBundles/ProteaDeluxeSkinBundle": {
    "value": "Proteus Caladrius Collection"
  },
  "/Lotus/Upgrades/Skins/Effects/NarmerEvolvingEphemeraA": {
    "value": "Fog of War Ephemera"
  },
  "/Lotus/Types/StoreItems/Packages/StyanaxVoidshellSkinBundle": {
    "value": "Styanax Voidshell Collection"
  },
  "/Lotus/Upgrades/Skins/Weapons/LongGuns/CorpusSpearGunSkin": {
    "value": "Monitivus Thrown Weapon Skin"
  },
  "/Lotus/Types/StoreItems/Packages/FormaPack": {
    "value": "Forma 3-Pack"
  },
  "/Lotus/Weapons/Tenno/LongGuns/TnHopliteSpear/TnHopliteSpearGunWeapon": {
    "value": "Afentis"
  },
  "/Lotus/Types/StoreItems/Packages/VeilbreakerCommunityPack": {
    "value": "Styanax Gallantry Collection"
  },
  "/Lotus/Types/StoreItems/Packages/StyanaxBundle": {
    "value": "Styanax Gallantry Collection"
  },
  "/Lotus/Types/StoreItems/Packages/VeilbreakerSupporterPack": {
    "value": "Veilbreaker Warrior Pack"
  },
  "/Lotus/Types/StoreItems/Packages/AOTZSupporterPackB": {
    "value": "Chrysalith Pack"
  },
  "/Lotus/Types/StoreItems/Packages/AOTZSupporterPackA": {
    "value": "Emergence Pack"
  },
  "/Lotus/Types/StoreItems/Packages/PrimeTokenPackC": {
    "value": "15 Regal Aya"
  },
  "/Lotus/Types/StoreItems/Packages/PrimeTokenPackB": {
    "value": "7 Regal Aya"
  },
  "/Lotus/Types/StoreItems/Packages/PrimeTokenPackA": {
    "value": "3 Regal Aya"
  },
  "/Lotus/Weapons/Grineer/Melee/GrnSharbola/GrnSharbolaWeapon": {
    "value": "Slaytra"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Effects/FootstepsMaple":  {
    "value": "Fae Path Ephemera"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Leverian/NezhaLeverian/NezhaLeverianPolearm": {
    "value": "Reshantur Cult Spear Skin"
  },
  "/Lotus/StoreItems/Weapons/Grineer/Melee/GrnBoomerang/HalikarWraithWeapon": {
    "value": "Halikar Wraith"
  },
  "/Lotus/StoreItems/Weapons/Tenno/Archwing/Primary/ArchwingHeavyPistols/Prisma/PrismaArchHeavyPistols": {
    "value": "Prisma Dual Decurions"
  },
  "/Lotus/StoreItems/Types/Items/ShipDecos/DomsFinalDrink": {
    "value": "Aged Claret of Denas"
  },
  "/Lotus/StoreItems/Upgrades/Skins/Sentinels/Masks/GaussSentinelMask": {
    "value": "Altra Sentinel Mask"
  }
}

},{}],194:[function(require,module,exports){
module.exports={
  "MT_ARENA": {
    "value": "Rathuum"
  },
  "MT_ARTIFACT": {
    "value": "Disruption"
  },
  "MT_ASSAULT": {
    "value": "Assault"
  },
  "MT_ASSASSINATION": {
    "value": "Assassination"
  },
  "MT_CAPTURE": {
    "value": "Capture"
  },
  "MT_DEFENSE": {
    "value": "Defense"
  },
  "MT_DISRUPTION": {
    "value": "Disruption"
  },
  "MT_EVACUATION": {
    "value": "Defection"
  },
  "MT_EXCAVATE": {
    "value": "Excavation"
  },
  "MT_EXTERMINATION": {
    "value": "Extermination"
  },
  "MT_HIVE": {
    "value": "Hive"
  },
  "MT_INTEL": {
    "value": "Spy"
  },
  "MT_LANDSCAPE": {
    "value": "Free Roam"
  },
  "MT_MOBILE_DEFENSE": {
    "value": "Mobile Defense"
  },
  "MT_PVP": {
    "value": "Conclave"
  },
  "MT_RESCUE": {
    "value": "Rescue"
  },
  "MT_RETRIEVAL": {
    "value": "Hijack"
  },
  "MT_SABOTAGE": {
    "value": "Sabotage"
  },
  "MT_SECTOR": {
    "value": "Dark Sector"
  },
  "MT_SURVIVAL": {
    "value": "Survival"
  },
  "MT_TERRITORY": {
    "value": "Interception"
  },
  "MT_DEFAULT": {
    "value": "Unknown"
  }
}
},{}],195:[function(require,module,exports){
module.exports={
  "MULTIPLY": {
    "value": "is multiplied by",
    "symbol": "x"
  }
}

},{}],196:[function(require,module,exports){
module.exports={
  "regions": [
    "0",
    "1",
    "2",
    "Mars",
    "Jupiter",
    "Saturn",
    "6",
    "7",
    "Pluto",
    "Ceres",
    "10",
    "Sedna",
    "12",
    "13",
    "14",
    "Phobos",
    "16"
  ]
}

},{}],197:[function(require,module,exports){
module.exports={
  "SolNode0": {
    "value": "SolNode0",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "SolNode1": {
    "value": "Galatea (Neptune)",
    "enemy": "Corpus",
    "type": "Capture"
  },
  "SolNode2": {
    "value": "Aphrodite (Venus)",
    "enemy": "Corpus",
    "type": "Mobile Defense"
  },
  "SolNode3": {
    "value": "Cordelia (Uranus)",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "SolNode4": {
    "value": "Acheron (Pluto)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode5": {
    "value": "Perdita (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode6": {
    "value": "Despina (Neptune)",
    "enemy": "Corpus",
    "type": "Excavation"
  },
  "SolNode7": {
    "value": "Epimetheus (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode8": {
    "value": "Nix (Pluto)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode9": {
    "value": "Rosalind (Uranus)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode10": {
    "value": "Thebe (Jupiter)",
    "enemy": "Corpus",
    "type": "Sabotage"
  },
  "SolNode11": {
    "value": "Tharsis (Mars)",
    "enemy": "Corpus",
    "type": "Hijack"
  },
  "SolNode12": {
    "value": "Elion (Mercury)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode13": {
    "value": "Bianca (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode14": {
    "value": "Ultor (Mars)",
    "enemy": "Crossfire",
    "type": "Extermination"
  },
  "SolNode15": {
    "value": "Pacific (Earth)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode16": {
    "value": "Augustus (Mars)",
    "enemy": "Grineer",
    "type": "Excavation"
  },
  "SolNode17": {
    "value": "Proteus (Neptune)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "SolNode18": {
    "value": "Rhea (Saturn)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode19": {
    "value": "Enceladus (Saturn)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode20": {
    "value": "Telesto (Saturn)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode21": {
    "value": "Narcissus (Pluto)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode22": {
    "value": "Tessera (Venus)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "SolNode23": {
    "value": "Cytherean (Venus)",
    "enemy": "Corpus",
    "type": "Interception"
  },
  "SolNode24": {
    "value": "Oro (Earth)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode25": {
    "value": "Callisto (Jupiter)",
    "enemy": "Corpus",
    "type": "Interception"
  },
  "SolNode26": {
    "value": "Lith (Earth)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode27": {
    "value": "E Prime (Earth)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode28": {
    "value": "Terminus (Mercury)",
    "enemy": "Crossfire",
    "type": "Sabotage"
  },
  "SolNode29": {
    "value": "Oberon (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode30": {
    "value": "Olympus (Mars)",
    "enemy": "Grineer",
    "type": "Disruption"
  },
  "SolNode31": {
    "value": "Anthe (Saturn)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode32": {
    "value": "Tethys (Saturn)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode33": {
    "value": "Ariel (Uranus)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode34": {
    "value": "Sycorax (Uranus)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode35": {
    "value": "Arcadia (Mars)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode36": {
    "value": "Martialis (Mars)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode37": {
    "value": "Pallene (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode38": {
    "value": "Minthe (Pluto)",
    "enemy": "Corpus",
    "type": "Mobile Defense"
  },
  "SolNode39": {
    "value": "Everest (Earth)",
    "enemy": "Grineer",
    "type": "Excavation"
  },
  "SolNode40": {
    "value": "Prospero (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode41": {
    "value": "Arval (Mars)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode42": {
    "value": "Helene (Saturn)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode43": {
    "value": "Cerberus (Pluto)",
    "enemy": "Corpus",
    "type": "Interception"
  },
  "SolNode44": {
    "value": "Mimas (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode45": {
    "value": "Ara (Mars)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode46": {
    "value": "Spear (Mars)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode47": {
    "value": "Janus (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode48": {
    "value": "Regna (Pluto)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SolNode49": {
    "value": "Larissa (Neptune)",
    "enemy": "Corpus",
    "type": "Mobile Defense"
  },
  "SolNode50": {
    "value": "Numa (Saturn)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode51": {
    "value": "Hades (Pluto)",
    "enemy": "Corpus",
    "type": "Assassination"
  },
  "SolNode52": {
    "value": "Portia (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode53": {
    "value": "Themisto (Jupiter)",
    "enemy": "Corpus",
    "type": "Assassination"
  },
  "SolNode54": {
    "value": "Silvanus (Mars)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode55": {
    "value": "Methone (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode56": {
    "value": "Cypress (Pluto)",
    "enemy": "Corpus",
    "type": "Sabotage"
  },
  "SolNode57": {
    "value": "Sao (Neptune)",
    "enemy": "Corpus",
    "type": "Sabotage"
  },
  "SolNode58": {
    "value": "Hellas (Mars)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode59": {
    "value": "Eurasia (Earth)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode60": {
    "value": "Caliban (Uranus)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode61": {
    "value": "Ishtar (Venus)",
    "enemy": "Corpus",
    "type": "Sabotage"
  },
  "SolNode62": {
    "value": "Neso (Neptune)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode63": {
    "value": "Mantle (Earth)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode64": {
    "value": "Umbriel (Uranus)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode65": {
    "value": "Gradivus (Mars)",
    "enemy": "Corpus",
    "type": "Sabotage"
  },
  "SolNode66": {
    "value": "Unda (Venus)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode67": {
    "value": "Dione (Saturn)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode68": {
    "value": "Vallis (Mars)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode69": {
    "value": "Ophelia (Uranus)",
    "enemy": "Grineer",
    "type": "Survival"
  },
  "SolNode70": {
    "value": "Cassini (Saturn)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode71": {
    "value": "Vesper (Venus)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode72": {
    "value": "Outer Terminus (Pluto)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "SolNode73": {
    "value": "Ananke (Jupiter)",
    "enemy": "Corpus",
    "type": "Capture"
  },
  "SolNode74": {
    "value": "Carme (Jupiter)",
    "enemy": "Corpus",
    "type": "Mobile Defense"
  },
  "SolNode75": {
    "value": "Cervantes (Earth)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode76": {
    "value": "Hydra (Pluto)",
    "enemy": "Corpus",
    "type": "Capture"
  },
  "SolNode77": {
    "value": "Cupid (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode78": {
    "value": "Triton (Neptune)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SolNode79": {
    "value": "Cambria (Earth)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode80": {
    "value": "Phoebe (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode81": {
    "value": "Palus (Pluto)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "SolNode82": {
    "value": "Calypso (Saturn)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode83": {
    "value": "Cressida (Uranus)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode84": {
    "value": "Nereid (Neptune)",
    "enemy": "Corpus",
    "type": "Hijack"
  },
  "SolNode85": {
    "value": "Gaia (Earth)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode86": {
    "value": "Aegaeon (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode87": {
    "value": "Ganymede (Jupiter)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "SolNode88": {
    "value": "Adrastea (Jupiter)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode89": {
    "value": "Mariana (Earth)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode90": {
    "value": "Miranda",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "SolNode91": {
    "value": "Iapetus (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode92": {
    "value": "Charon (Pluto)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode93": {
    "value": "Keeler (Saturn)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode94": {
    "value": "Apollodorus (Mercury)",
    "enemy": "Infested",
    "type": "Survival"
  },
  "SolNode95": {
    "value": "Thalassa (Neptune)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode96": {
    "value": "Titan (Saturn)",
    "enemy": "Grineer",
    "type": "Survival"
  },
  "SolNode97": {
    "value": "Amalthea (Jupiter)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode98": {
    "value": "Desdemona (Uranus)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode99": {
    "value": "War (Mars)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode100": {
    "value": "Elara (Jupiter)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "SolNode101": {
    "value": "Kiliken (Venus)",
    "enemy": "Corpus",
    "type": "Excavation"
  },
  "SolNode102": {
    "value": "Oceanum (Pluto)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode103": {
    "value": "M Prime (Mercury)",
    "enemy": "Crossfire",
    "type": "Extermination"
  },
  "SolNode104": {
    "value": "Fossa (Venus)",
    "enemy": "Corpus",
    "type": "Assassination"
  },
  "SolNode105": {
    "value": "Titania (Uranus)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode106": {
    "value": "Alator (Mars)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode107": {
    "value": "Venera (Venus)",
    "enemy": "Corpus",
    "type": "Capture"
  },
  "SolNode108": {
    "value": "Tolstoj (Mercury)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode109": {
    "value": "Linea (Venus)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SolNode110": {
    "value": "Hyperion (Saturn)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode111": {
    "value": "Juliet (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode112": {
    "value": "Setebos (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode113": {
    "value": "Ares (Mars)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode114": {
    "value": "Puck (Uranus)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode115": {
    "value": "Quirinus (Mars)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode116": {
    "value": "Mab (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode117": {
    "value": "Naiad (Neptune)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode118": {
    "value": "Laomedeia (Neptune)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "SolNode119": {
    "value": "Caloris (Mercury)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode120": {
    "value": "Halimede (Neptune)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode121": {
    "value": "Carpo (Jupiter)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode122": {
    "value": "Stephano (Uranus)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode123": {
    "value": "V Prime (Venus)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "SolNode124": {
    "value": "Trinculo (Uranus)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode125": {
    "value": "Io (Jupiter)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "SolNode126": {
    "value": "Metis (Jupiter)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SolNode127": {
    "value": "Psamathe (Neptune)",
    "enemy": "Corpus",
    "type": "Assassination"
  },
  "SolNode128": {
    "value": "E Gate (Venus)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode129": {
    "value": "Orb Vallis (Venus)",
    "enemy": "Corpus",
    "type": "Free Roam"
  },
  "SolNode130": {
    "value": "Lares (Mercury)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode131": {
    "value": "Pallas (Ceres)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode132": {
    "value": "Bode (Ceres)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode133": {
    "value": "Vedic (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode134": {
    "value": "Varro (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode135": {
    "value": "Thon (Ceres)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode136": {
    "value": "Olla (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode137": {
    "value": "Nuovo (Ceres)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode138": {
    "value": "Ludi (Ceres)",
    "enemy": "Grineer",
    "type": "Hijack"
  },
  "SolNode139": {
    "value": "Lex (Ceres)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode140": {
    "value": "Kiste (Ceres)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode141": {
    "value": "Ker (Ceres)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode142": {
    "value": "Hapke (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode143": {
    "value": "Gefion (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode144": {
    "value": "Exta (Ceres)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode145": {
    "value": "Egeria (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode146": {
    "value": "Draco (Ceres)",
    "enemy": "Grineer",
    "type": "Survival"
  },
  "SolNode147": {
    "value": "Cinxia (Ceres)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode148": {
    "value": "Cerium (Ceres)"
  },
  "SolNode149": {
    "value": "Casta (Ceres)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode150": {
    "value": "Albedo (Ceres)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode151": {
    "value": "Acanth (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode152": {
    "value": "Ascar (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode153": {
    "value": "Brugia (Eris)",
    "enemy": "Infested",
    "type": "Rescue"
  },
  "SolNode154": {
    "value": "Candiru (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode155": {
    "value": "Cosis (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode156": {
    "value": "Cyath (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode157": {
    "value": "Giardia (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode158": {
    "value": "Gnathos (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode159": {
    "value": "Lepis (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode160": {
    "value": "Histo (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode161": {
    "value": "Hymeno (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode162": {
    "value": "Isos (Eris)",
    "enemy": "Infested",
    "type": "Capture"
  },
  "SolNode163": {
    "value": "Ixodes (Eris)"
  },
  "SolNode164": {
    "value": "Kala-azar (Eris)",
    "enemy": "Infested",
    "type": "Defense"
  },
  "SolNode165": {
    "value": "Sporid (Eris)",
    "enemy": "Infested",
    "type": "Hive Sabotage"
  },
  "SolNode166": {
    "value": "Nimus (Eris)",
    "enemy": "Infested",
    "type": "Survival"
  },
  "SolNode167": {
    "value": "Oestrus (Eris)",
    "enemy": "Infested",
    "type": "Mobile Defense"
  },
  "SolNode168": {
    "value": "Phalan (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode169": {
    "value": "Psoro (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode170": {
    "value": "Ranova (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode171": {
    "value": "Saxis (Eris)",
    "enemy": "Infested",
    "type": "Extermination"
  },
  "SolNode172": {
    "value": "Xini (Eris)",
    "enemy": "Infested",
    "type": "Interception"
  },
  "SolNode173": {
    "value": "Solium (Eris)",
    "enemy": "Infested",
    "type": "Mobile Defense"
  },
  "SolNode174": {
    "value": "Sparga (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode175": {
    "value": "Naeglar (Eris)",
    "enemy": "Infested",
    "type": "Hive"
  },
  "SolNode176": {
    "value": "Viver (Eris)",
    "enemy": "Infested",
    "type": "Ancient Retribution"
  },
  "SolNode177": {
    "value": "Kappa (Sedna)",
    "enemy": "Grineer",
    "type": "Disruption"
  },
  "SolNode178": {
    "value": "Hyosube (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode179": {
    "value": "Jengu (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode180": {
    "value": "Undine (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode181": {
    "value": "Adaro (Sedna)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode182": {
    "value": "Camenae (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode183": {
    "value": "Vodyanoi (Sedna)",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "SolNode184": {
    "value": "Rusalka (Sedna)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode185": {
    "value": "Berehynia (Sedna)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode186": {
    "value": "Phithale (Sedna)",
    "enemy": "Grineer",
    "type": "Sabotage"
  },
  "SolNode187": {
    "value": "Selkie (Sedna)",
    "enemy": "Grineer",
    "type": "Survival"
  },
  "SolNode188": {
    "value": "Kelpie (Sedna)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode189": {
    "value": "Naga (Sedna)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode190": {
    "value": "Nakki (Sedna)",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "SolNode191": {
    "value": "Marid (Sedna)",
    "enemy": "Grineer",
    "type": "Hijack"
  },
  "SolNode192": {
    "value": "Tikoloshe (Sedna)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode193": {
    "value": "Merrow (Sedna)",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "SolNode194": {
    "value": "Ponaturi (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode195": {
    "value": "Hydron (Sedna)",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "SolNode196": {
    "value": "Charybdis (Sedna)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode197": {
    "value": "Graeae (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode198": {
    "value": "Scylla (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode199": {
    "value": "Yam (Sedna)",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "SolNode200": {
    "value": "Veles (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode201": {
    "value": "Tiamat (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode202": {
    "value": "Yemaja (Sedna)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode203": {
    "value": "Abaddon (Europa)",
    "enemy": "Corpus",
    "type": "Capture"
  },
  "SolNode204": {
    "value": "Armaros (Europa)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode205": {
    "value": "Baal (Europa)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SolNode206": {
    "value": "Eligor (Europa)"
  },
  "SolNode207": {
    "value": "Gamygyn (Europa)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode208": {
    "value": "Lillith (Europa)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode209": {
    "value": "Morax (Europa)",
    "enemy": "Corpus",
    "type": "Mobile Defense"
  },
  "SolNode210": {
    "value": "Naamah (Europa)",
    "enemy": "Corpus",
    "type": "Assassination"
  },
  "SolNode211": {
    "value": "Ose (Europa)",
    "enemy": "Corpus",
    "type": "Interception"
  },
  "SolNode212": {
    "value": "Paimon (Europa)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "SolNode213": {
    "value": "Shax (Europa)"
  },
  "SolNode214": {
    "value": "Sorath (Europa)",
    "enemy": "Corpus",
    "type": "Hijack"
  },
  "SolNode215": {
    "value": "Valac (Europa)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode216": {
    "value": "Valefor (Europa)",
    "enemy": "Corpus",
    "type": "Excavation"
  },
  "SolNode217": {
    "value": "Orias (Europa)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SolNode218": {
    "value": "Zagan (Europa)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode219": {
    "value": "Beleth (Europa)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SolNode220": {
    "value": "Kokabiel (Europa)",
    "enemy": "Corpus",
    "type": "Sabotage"
  },
  "SolNode221": {
    "value": "Neruda (Mercury)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode222": {
    "value": "Eminescu (Mercury)",
    "enemy": "Grineer",
    "type": "Ancient Retribution"
  },
  "SolNode223": {
    "value": "Boethius (Mercury)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode224": {
    "value": "Odin (Mercury)",
    "enemy": "Grineer",
    "type": "Interception"
  },
  "SolNode225": {
    "value": "Suisei (Mercury)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode226": {
    "value": "Pantheon (Mercury)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode227": {
    "value": "Verdi (Mercury)"
  },
  "SolNode228": {
    "value": "Plains of Eidolon (Earth)",
    "enemy": "Grineer",
    "type": "Free Roam"
  },
  "SolNode229": {
    "value": "Cambion Drift (Deimos)",
    "enemy": "Infested",
    "type": "Free Roam"
  },
  "SolNode400": {
    "value": "Teshub (Void)",
    "enemy": "Orokin",
    "type": "Extermination"
  },
  "SolNode401": {
    "value": "Hepit (Void)",
    "enemy": "Orokin",
    "type": "Capture"
  },
  "SolNode402": {
    "value": "Taranis (Void)",
    "enemy": "Orokin",
    "type": "Defense"
  },
  "SolNode403": {
    "value": "Tiwaz (Void)",
    "enemy": "Orokin",
    "type": "Mobile Defense"
  },
  "SolNode404": {
    "value": "Stribog (Void)",
    "enemy": "Orokin",
    "type": "Orokin Sabotage"
  },
  "SolNode405": {
    "value": "Ani (Void)",
    "enemy": "Orokin",
    "type": "Survival"
  },
  "SolNode406": {
    "value": "Ukko (Void)",
    "enemy": "Orokin",
    "type": "Capture"
  },
  "SolNode407": {
    "value": "Oxomoco (Void)",
    "enemy": "Orokin",
    "type": "Extermination"
  },
  "SolNode408": {
    "value": "Belenus (Void)",
    "enemy": "Orokin",
    "type": "Defense"
  },
  "SolNode409": {
    "value": "Mot (Void)",
    "enemy": "Orokin",
    "type": "Survival"
  },
  "SolNode410": {
    "value": "Aten (Void)",
    "enemy": "Orokin",
    "type": "Mobile Defense"
  },
  "SolNode411": {
    "value": "Marduk (Void)",
    "enemy": "Orokin",
    "type": "Sabotage"
  },
  "SolNode412": {
    "value": "Mithra (Void)",
    "enemy": "Orokin",
    "type": "Interception"
  },
  "SolNode413": {
    "value": "SolNode413 (Void)",
    "enemy": "Corrupted",
    "type": "Ancient Retribution"
  },
  "SolNode706": {
    "value": "Horend (Deimos)",
    "enemy": "Infested",
    "type": "Capture"
  },
  "SolNode707": {
    "value": "Hyf (Deimos)",
    "enemy": "Infested",
    "type": "Defense"
  },
  "SolNode708": {
    "value": "Phlegyas (Deimos)",
    "enemy": "Infested",
    "type": "Extermination"
  },
  "SolNode709": {
    "value": "Dirus (Deimos)",
    "enemy": "Infested",
    "type": "Mobile Defense"
  },
  "SolNode710": {
    "value": "Formido (Deimos)",
    "enemy": "Infested",
    "type": "Sabotage"
  },
  "SolNode711": {
    "value": "Terrorem (Deimos)",
    "enemy": "Infested",
    "type": "Survival"
  },
  "SolNode712": {
    "value": "Magnacidium (Deimos)",
    "enemy": "Infested",
    "type": "Assassination"
  },
  "SolNode713": {
    "value": "Exequias (Deimos)",
    "enemy": "Infested",
    "type": "Assassination"
  },
  "SolNode740": {
    "value": "The Ropalolyst (Jupiter)",
    "enemy": "Sentient",
    "type": "Assassination"
  },
  "SolNode741": {
    "value": "Koro (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Assault"
  },
  "SolNode742": {
    "value": "Nabuk (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Capture"
  },
  "SolNode743": {
    "value": "Rotuma (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode744": {
    "value": "Taveuni (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Survival"
  },
  "SolNode745": {
    "value": "Tamu (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Disruption"
  },
  "SolNode746": {
    "value": "Dakata (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode747": {
    "value": "Pago (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Spy"
  },
  "SolNode748": {
    "value": "Garus (Kuva Fortress)",
    "enemy": "Grineer",
    "type": "Rescue"
  },
  "SolNode901": {
    "value": "Caduceus",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "SolNode902": {
    "value": "Montes (Venus)",
    "enemy": "Corpus",
    "type": "Extermination (Archwing)"
  },
  "SolNode903": {
    "value": "Erpo (Earth)",
    "enemy": "Grineer",
    "type": "Mobile Defense (Archwing)"
  },
  "SolNode904": {
    "value": "Syrtis (Mars)",
    "enemy": "Grineer",
    "type": "Extermination (Archwing)"
  },
  "SolNode905": {
    "value": "Galilea (Jupiter)",
    "enemy": "Corpus",
    "type": "Sabotage (Archwing)"
  },
  "SolNode906": {
    "value": "Pandora (Saturn)",
    "enemy": "Grineer",
    "type": "Pursuit (Archwing)"
  },
  "SolNode907": {
    "value": "Caelus (Uranus)",
    "enemy": "Grineer",
    "type": "Interception (Archwing)"
  },
  "SolNode908": {
    "value": "Salacia (Neptune)",
    "enemy": "Corpus",
    "type": "Mobile Defense (Archwing)"
  },
  "SolNode300": {
    "value": "Plato (Lua)",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "SolNode301": {
    "value": "Grimaldi (Lua)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode302": {
    "value": "Tycho (Lua)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "SolNode304": {
    "value": "Copernicus (Lua)",
    "enemy": "Grineer",
    "type": "Mobile Defense"
  },
  "SolNode305": {
    "value": "Stöfler (Lua)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "SolNode306": {
    "value": "Pavlov (Lua)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SolNode307": {
    "value": "Zeipel (Lua)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SolNode308": {
    "value": "Apollo (Lua)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "SettlementNode1": {
    "value": "Roche (Phobos)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "SettlementNode2": {
    "value": "Skyresh (Phobos)",
    "enemy": "Corpus",
    "type": "Capture"
  },
  "SettlementNode3": {
    "value": "Stickney (Phobos)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "SettlementNode4": {
    "value": "Drunlo (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode5": {
    "value": "Grildrig (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode6": {
    "value": "Limtoc (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode7": {
    "value": "Hall (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode8": {
    "value": "Reldresal (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode9": {
    "value": "Clustril (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode10": {
    "value": "Kepler (Phobos)",
    "enemy": "Corpus",
    "type": "Rush (Archwing)"
  },
  "SettlementNode11": {
    "value": "Gulliver (Phobos)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "SettlementNode12": {
    "value": "Monolith (Phobos)",
    "enemy": "Corpus",
    "type": "Rescue"
  },
  "SettlementNode13": {
    "value": "D'Arrest (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode14": {
    "value": "Shklovsky (Phobos)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "SettlementNode15": {
    "value": "Sharpless (Phobos)",
    "enemy": "Corpus",
    "type": "Mobile Defense"
  },
  "SettlementNode16": {
    "value": "Wendell (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode17": {
    "value": "Flimnap (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode18": {
    "value": "Opik (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode19": {
    "value": "Todd (Phobos)",
    "enemy": "Corpus",
    "type": "Ancient Retribution"
  },
  "SettlementNode20": {
    "value": "Iliad (Phobos)",
    "enemy": "Corpus",
    "type": "Assassination"
  },
  "MercuryHUB": {
    "value": "Larunda Relay (Mercury)",
    "enemy": "Grineer",
    "type": "Relay"
  },
  "VenusHUB": {
    "value": "Vesper Relay (Venus)",
    "enemy": "Corpus",
    "type": "Relay"
  },
  "EarthHUB": {
    "value": "Strata Relay (Earth)",
    "enemy": "Grineer",
    "type": "Relay"
  },
  "SaturnHUB": {
    "value": "Kronia Relay (Saturn)",
    "enemy": "Grineer",
    "type": "Relay"
  },
  "ErisHUB": {
    "value": "Kuiper Relay (Eris)",
    "enemy": "Infested",
    "type": "Relay"
  },
  "EuropaHUB": {
    "value": "Leonov Relay (Europa)",
    "enemy": "Corpus",
    "type": "Relay"
  },
  "PlutoHUB": {
    "value": "Orcus Relay (Pluto)",
    "enemy": "Corpus",
    "type": "Relay"
  },
  "TradeHUB1": {
    "value": "Maroo's Bazaar (Mars)",
    "enemy": "Corpus",
    "type": "Relay"
  },
  "EventNode0": {
    "value": "Balor",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode1": {
    "value": "Tethra",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode2": {
    "value": "Operation Gate Crash",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode3": {
    "value": "Elatha",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode4": {
    "value": "Proxy Rebellion",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "EventNode5": {
    "value": "Birog",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode6": {
    "value": "Tyl Reygor Seal Lab",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode7": {
    "value": "Proxy Rebellion",
    "enemy": "Corpus",
    "type": "Interception"
  },
  "EventNode8": {
    "value": "Corb",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode9": {
    "value": "Operation Gate Crash Pt. 2",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode10": {
    "value": "Lugh",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode11": {
    "value": "Nemed",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode12": {
    "value": "Operation Cryotic Front",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode13": {
    "value": "Shifting Sands",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode14": {
    "value": "Gate Crash",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode15": {
    "value": "Operation Cryotic Front",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode16": {
    "value": "Operation Cryotic Front",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode17": {
    "value": "Proxy Rebellion",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "EventNode18": {
    "value": "Proxy Rebellion",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "EventNode19": {
    "value": "Mars",
    "enemy": "Grineer",
    "type": "Defense"
  },
  "EventNode20": {
    "value": "Tyl Regor Sea Lab",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode22": {
    "value": "Tyl Regor Sea Lab",
    "enemy": "Sentient",
    "type": "Ancient Retribution"
  },
  "EventNode24": {
    "value": "Earth",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "EventNode25": {
    "value": "Earth",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "EventNode26": {
    "value": "Earth",
    "enemy": "Grineer",
    "type": "Extermination"
  },
  "EventNode27": {
    "value": "Void",
    "enemy": "Corrupted",
    "type": "Survival"
  },
  "EventNode28": {
    "value": "Saturn",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "EventNode29": {
    "value": "Saturn",
    "enemy": "Grineer",
    "type": "Assassination"
  },
  "EventNode30": {
    "value": "Ganymede (Jupiter)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "EventNode31": {
    "value": "Ganymede (Jupiter)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "EventNode32": {
    "value": "Ganymede (Jupiter)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "EventNode33": {
    "value": "Ganymede (Jupiter)",
    "enemy": "Corpus",
    "type": "Disruption"
  },
  "EventNode34": {
    "value": "Earth",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "EventNode35": {
    "value": "Earth",
    "enemy": "Grineer",
    "type": "Arena"
  },
  "EventNode761": {
    "value": "The Index",
    "enemy": "Corpus",
    "type": "Arena"
  },
  "EventNode762": {
    "value": "The Index pt 2",
    "enemy": "Corpus",
    "type": "Arena"
  },
  "EventNode763": {
    "value": "The Index Endurance",
    "enemy": "Corpus",
    "type": "Arena"
  },
  "PvpNode0": {
    "value": "Conclave Capture the Cephalon",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode1": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode2": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode3": {
    "value": "Conclave Capture the Cephalon",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode4": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode5": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode6": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode7": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode8": {
    "value": "Conclave",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode9": {
    "value": "Conclave Team Domination",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode10": {
    "value": "Conclave Domination",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode11": {
    "value": "Conclave Domination",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode12": {
    "value": "Conclave Domination",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode13": {
    "value": "Tactical Alert: Snoball Fight!",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "PvpNode14": {
    "value": "Conclave: Quick Steel",
    "enemy": "Tenno",
    "type": "Conclave"
  },
  "ClanNode0": {
    "value": "Romula (Venus)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode1": {
    "value": "Malva (Venus)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode2": {
    "value": "Coba (Earth)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode3": {
    "value": "Tikal (Earth)",
    "enemy": "Infested",
    "type": "Dark Sector Excavation"
  },
  "ClanNode4": {
    "value": "Sinai (Jupiter)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode5": {
    "value": "Cameria (Jupiter)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode6": {
    "value": "Larzac (Europa)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode7": {
    "value": "Cholistan (Europa)",
    "enemy": "Infested",
    "type": "Dark Sector Excavation"
  },
  "ClanNode8": {
    "value": "Kadesh (Mars)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode9": {
    "value": "Wahiba (Mars)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode10": {
    "value": "Memphis (Phobos)",
    "enemy": "Infested",
    "type": "Dark Sector Defection"
  },
  "ClanNode11": {
    "value": "Zeugma (Phobos)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode12": {
    "value": "Caracol (Saturn)",
    "enemy": "Infested",
    "type": "Dark Sector Defection"
  },
  "ClanNode13": {
    "value": "Piscinas (Saturn)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode14": {
    "value": "Amarna (Sedna)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode15": {
    "value": "Sangeru (Sedna)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode16": {
    "value": "Ur (Uranus)",
    "enemy": "Infested",
    "type": "Dark Sector Disruption"
  },
  "ClanNode17": {
    "value": "Assur (Uranus)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode18": {
    "value": "Akkad (Eris)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode19": {
    "value": "Zabala (Eris)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode20": {
    "value": "Yursa (Neptune)",
    "enemy": "Infested",
    "type": "Dark Sector Defection"
  },
  "ClanNode21": {
    "value": "Kelashin (Neptune)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode22": {
    "value": "Seimeni (Ceres)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode23": {
    "value": "Gabii (Ceres)",
    "enemy": "Infested",
    "type": "Dark Sector Survival"
  },
  "ClanNode24": {
    "value": "Sechura (Pluto)",
    "enemy": "Infested",
    "type": "Dark Sector Defense"
  },
  "ClanNode25": {
    "value": "Hieracon (Pluto)",
    "enemy": "Infested",
    "type": "Dark Sector Excavation"
  },
  "/Lotus/Types/Keys/SortieBossKeyPhorid": {
    "value": "Sortie Boss: Phorid",
    "enemy": "Infested",
    "type": "Assassination"
  },
  "CrewBattleNode501": {
    "value": "Mordo Cluster (Saturn)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode502": {
    "value": "Sover Strait (Earth)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode503": {
    "value": "Bifrost Echo (Venus)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "CrewBattleNode504": {
    "value": "Arva Vector (Neptune)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "CrewBattleNode505": {
    "value": "Ruse War Field (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode509": {
    "value": "Iota Temple (Earth)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode510": {
    "value": "Gian Point (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode511": {
    "value": "Beacon Shield Ring (Venus)",
    "enemy": "Corpus",
    "type": "Volatile"
  },
  "CrewBattleNode512": {
    "value": "Orvin-Haarc (Venus)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "CrewBattleNode513": {
    "value": "Vesper Strait (Venus)",
    "enemy": "Corpus",
    "type": "Orphix"
  },
  "CrewBattleNode514": {
    "value": "Falling Glory (Venus)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "CrewBattleNode515": {
    "value": "Luckless Expanse (Venus)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "CrewBattleNode516": {
    "value": "Nu-gua Mines (Neptune)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "CrewBattleNode518": {
    "value": "Ogal Cluster (Earth)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode519": {
    "value": "Korm's Belt (Earth)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode521": {
    "value": "Enkidu Ice Drifts (Neptune)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "CrewBattleNode522": {
    "value": "Bendar Cluster (Earth)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode523": {
    "value": "Mammon's Prospect (Neptune)",
    "enemy": "Corpus",
    "type": "Orphix"
  },
  "CrewBattleNode524": {
    "value": "Sovereign Grasp (Neptune)",
    "enemy": "Corpus",
    "type": "Volatile"
  },
  "CrewBattleNode525": {
    "value": "Brom Cluster (Neptune)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "CrewBattleNode526": {
    "value": "Khufu Envoy (Pluto)",
    "enemy": "Corpus",
    "type": "Orphix"
  },
  "CrewBattleNode527": {
    "value": "Seven Sirens (Pluto)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "CrewBattleNode528": {
    "value": "Obol Crossing (Pluto)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "CrewBattleNode529": {
    "value": "Profit Margin (Pluto)",
    "enemy": "Corpus",
    "type": "Volatile"
  },
  "CrewBattleNode530": {
    "value": "Kasio's Rest (Saturn)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode531": {
    "value": "Fenton's Field (Pluto)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "CrewBattleNode533": {
    "value": "Nodo Gap (Saturn)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode534": {
    "value": "Lupal Pass (Saturn)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode535": {
    "value": "Vand Cluster (Saturn)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode536": {
    "value": "Peregrine Axis (Pluto)",
    "enemy": "Corpus",
    "type": "Orphix"
  },
  "CrewBattleNode538": {
    "value": "Calabash (Veil)",
    "enemy": "Corpus",
    "type": "Extermination"
  },
  "CrewBattleNode539": {
    "value": "Numina (Veil)",
    "enemy": "Corpus",
    "type": "Volatile"
  },
  "CrewBattleNode540": {
    "value": "Arc Silver (Veil)",
    "enemy": "Corpus",
    "type": "Defense"
  },
  "CrewBattleNode541": {
    "value": "Erato (Veil)",
    "enemy": "Corpus",
    "type": "Orphix"
  },
  "CrewBattleNode542": {
    "value": "Lu-yan (Veil)",
    "enemy": "Corpus",
    "type": "Survival"
  },
  "CrewBattleNode543": {
    "value": "Sambir Cloud (Veil)",
    "enemy": "Corpus",
    "type": "Spy"
  },
  "CrewBattleNode550": {
    "value": "Nsu Grid (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode551": {
    "value": "Ganalen's Grave (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode552": {
    "value": "Rya (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode553": {
    "value": "Flexa (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode554": {
    "value": "H-2 Cloud (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  },
  "CrewBattleNode555": {
    "value": "R-9 Cloud (Veil)",
    "enemy": "Grineer",
    "type": "Skirmish"
  }
}

},{}],198:[function(require,module,exports){
module.exports={
  "modifierTypes": {
    "SORTIE_MODIFIER_LOW_ENERGY": "Energy Reduction",
    "SORTIE_MODIFIER_IMPACT": "Enemy Physical Enhancement: Impact",
    "SORTIE_MODIFIER_SLASH": "Enemy Physical Enhancement: Slash",
    "SORTIE_MODIFIER_PUNCTURE": "Enemy Physical Enhancement: Puncture",
    "SORTIE_MODIFIER_EXIMUS": "Eximus Stronghold",
    "SORTIE_MODIFIER_MAGNETIC": "Enemy Elemental Enhancement: Magnetic",
    "SORTIE_MODIFIER_CORROSIVE": "Enemy Elemental Enhancement: Corrosive",
    "SORTIE_MODIFIER_VIRAL": "Enemy Elemental Enhancement: Viral",
    "SORTIE_MODIFIER_ELECTRICITY": "Enemy Elemental Enhancement: Electricity",
    "SORTIE_MODIFIER_RADIATION": "Enemy Elemental Enhancement: Radiation",
    "SORTIE_MODIFIER_GAS": "Enemy Elemental Enhancement: Gas",
    "SORTIE_MODIFIER_FIRE": "Enemy Elemental Enhancement: Heat",
    "SORTIE_MODIFIER_EXPLOSION": "Enemy Elemental Enhancement: Blast",
    "SORTIE_MODIFIER_FREEZE": "Enemy Elemental Enhancement: Cold",
    "SORTIE_MODIFIER_TOXIN": "Enemy Elemental Enhancement: Toxin",
    "SORTIE_MODIFIER_POISON": "Enemy Elemental Enhancement: Toxin",
    "SORTIE_MODIFIER_HAZARD_RADIATION": "Environmental Hazard: Radiation Pockets",
    "SORTIE_MODIFIER_HAZARD_MAGNETIC": "Environmental Hazard: Electromagnetic Anomalies",
    "SORTIE_MODIFIER_HAZARD_FOG": "Environmental Hazard: Dense Fog",
    "SORTIE_MODIFIER_HAZARD_FIRE": "Environmental Hazard: Fire",
    "SORTIE_MODIFIER_HAZARD_ICE": "Environmental Effect: Cryogenic Leakage",
    "SORTIE_MODIFIER_HAZARD_COLD": "Environmental Effect: Extreme Cold",
    "SORTIE_MODIFIER_ARMOR": "Augmented Enemy Armor",
    "SORTIE_MODIFIER_SHIELDS": "Enhanced Enemy Shields",
    "SORTIE_MODIFIER_SECONDARY_ONLY": "Weapon Restriction: Pistol Only",
    "SORTIE_MODIFIER_SHOTGUN_ONLY": "Weapon Restriction: Shotgun Only",
    "SORTIE_MODIFIER_SNIPER_ONLY": "Weapon Restriction: Sniper Only",
    "SORTIE_MODIFIER_RIFLE_ONLY": "Weapon Restriction: Assault Rifle Only",
    "SORTIE_MODIFIER_MELEE_ONLY": "Weapon Restriction: Melee Only",
    "SORTIE_MODIFIER_BOW_ONLY": "Weapon Restriction: Bow Only"
  },
  "modifierDescriptions": {
    "SORTIE_MODIFIER_LOW_ENERGY": "Maximum Warframe Energy capacity is quartered. Energy Siphon is less effective.",
    "SORTIE_MODIFIER_IMPACT": "Enemies can deal enhanced impact damage. Finishing damage is not resisted.",
    "SORTIE_MODIFIER_SLASH": "Enemies can deal enhanced slash damage. Finishing damage is not resisted.",
    "SORTIE_MODIFIER_PUNCTURE": "Enemies can deal enhanced puncture damage. Finishing damage is not resisted.",
    "SORTIE_MODIFIER_EXIMUS": "Eximus units have a much higher spawn rate in this mission. Some of their auras stack.",
    "SORTIE_MODIFIER_MAGNETIC": "Enemies deal increased Magnetic damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_CORROSIVE": "Enemies deal increased Corrosive damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_VIRAL": "Enemies deal increased Viral damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_ELECTRICITY": "Enemies deal increased Electric damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_RADIATION": "Enemies deal increased Radiation damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_GAS": "Enemies deal increased Gas damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_FIRE": "Enemies deal increased Heat damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_EXPLOSION": "Enemies deal increased Blast damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_FREEZE": "Enemies deal increased Cold damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_TOXIN": "Enemies deal increased Toxin damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_POISON": "Enemies deal increased Toxin damage and also have increased Immunity to said damage type.",
    "SORTIE_MODIFIER_HAZARD_RADIATION": "Any damage received will impart radiation effects, and so will green clouds around the tileset.",
    "SORTIE_MODIFIER_HAZARD_MAGNETIC": "Reduced Gravity. Blue blobs that deal magnetic procs placed through out the tileset.",
    "SORTIE_MODIFIER_HAZARD_FOG": "Limited visibility in the tileset due to dense fog. Forced night cycle on planets like earth.",
    "SORTIE_MODIFIER_HAZARD_FIRE": "The tileset has a fire hazard. Warframe health is halved. Meltdown Iminent.",
    "SORTIE_MODIFIER_HAZARD_ICE": "Maximum Shield Capacity is halved. Ice patches that cause cold procs.",
    "SORTIE_MODIFIER_HAZARD_COLD": "Mobility is significantly reduced. Sprinting is disabled for this mode.",
    "SORTIE_MODIFIER_ARMOR": "Enemies have Improved/Added armor. Corrosive Projection effects are halved.",
    "SORTIE_MODIFIER_SHIELDS": "Enemies have vastly Improved Shields. Magnetic Procs are advised.",
    "SORTIE_MODIFIER_SECONDARY_ONLY": "Only secondary weapons may be used in this mission, any other weapon type is not allowed, and will be removed automatically if equipped.",
    "SORTIE_MODIFIER_SHOTGUN_ONLY": "Only shotguns may be used in this mission, any other weapon type is not allowed, and will be removed automatically if equipped.",
    "SORTIE_MODIFIER_SNIPER_ONLY": "Only snipers may be used in this mission, any other weapon type is not allowed, and will be removed automatically if equipped.",
    "SORTIE_MODIFIER_RIFLE_ONLY": "Only assault rifles may be used in this mission. Surprisingly, launchers work too. Other weapon types will be removed automatically if equipped.",
    "SORTIE_MODIFIER_MELEE_ONLY": "Only melee weapons may be used in this mission, any other weapon type is not allowed, and will be removed automatically if equipped.",
    "SORTIE_MODIFIER_BOW_ONLY": "Only bows may be used in this mission, crossbows however work too! Other weapon types will be removed automatically if equipped."
  },
  "bosses": {
    "SORTIE_BOSS_HYENA": {
      "name": "Hyena Pack",
      "faction": "Corpus"
    },
    "SORTIE_BOSS_KELA": {
      "name": "Kela De Thaym",
      "faction": "Grineer"
    },
    "SORTIE_BOSS_VOR": {
      "name": "Captain Vor",
      "faction": "Grineer"
    },
    "SORTIE_BOSS_RUK": {
      "name": "General Sargas Ruk",
      "faction": "Grineer"
    },
    "SORTIE_BOSS_HEK": {
      "name": "Councilor Vay Hek",
      "faction": "Grineer"
    },
    "SORTIE_BOSS_KRIL": {
      "name": "Lech Kril",
      "faction": "Grineer"
    },
    "SORTIE_BOSS_TYL": {
      "name": "Tyl Regor",
      "faction": "Grineer"
    },
    "SORTIE_BOSS_JACKAL": {
      "name": "Jackal",
      "faction": "Corpus"
    },
    "SORTIE_BOSS_ALAD": {
      "name": "Alad V",
      "faction": "Corpus"
    },
    "SORTIE_BOSS_AMBULAS": {
      "name": "Ambulas",
      "faction": "Corpus"
    },
    "SORTIE_BOSS_NEF": {
      "name": "Nef Anyo",
      "faction": "Corpus"
    },
    "SORTIE_BOSS_RAPTOR": {
      "name": "Raptor",
      "faction": "Corpus"
    },
    "SORTIE_BOSS_PHORID": {
      "name": "Phorid",
      "faction": "Infestation"
    },
    "SORTIE_BOSS_LEPHANTIS": {
      "name": "Lephantis",
      "faction": "Infestation"
    },
    "SORTIE_BOSS_INFALAD": {
      "name": "Mutalist Alad V",
      "faction": "Infestation"
    },
    "SORTIE_BOSS_CORRUPTED_VOR": {
      "name": "Corrupted Vor",
      "faction": "Corrupted"
    },
    "SORTIE_BOSS_BOREAL":  {
      "name": "Archon Boreal",
      "faction": "Narmer"
    },
    "SORTIE_BOSS_AMAR":  {
      "name": "Archon Amar",
      "faction": "Narmer"
    },
    "SORTIE_BOSS_NIRA":  {
      "name": "Archon Nira",
      "faction": "Narmer"
    },
    "SORTIE_BOSS_PAAZUL":  {
      "name": "Archon Paazul",
      "faction": "Narmer"
    }
  },
  "endStates": [
    {
      "bossName": "Captain Vor",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "16",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Vay Hek",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Sargas Ruk",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Defense",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Defense",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Kela de Thaym",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Survival",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Lech Kril",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Tyl Regor",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Jackal",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Alad V",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Ambulas",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Exterminate",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Hyena Pack",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Rescue",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Sabotage",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Spy",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Nef Anyo",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Raptor",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Phorid",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hive",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Lephantis",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Spy",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Spy",
            "Mobile Defense",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Hive",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    },
    {
      "bossName": "Mutalist Alad V",
      "regions": [
        {
          "name": "0",
          "missions": []
        },
        {
          "name": "Mercury",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Venus",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Defense",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Earth",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Mars",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Interception",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Jupiter",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Saturn",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Uranus",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Neptune",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Excavation",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Pluto",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Ceres",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "Eris",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Survival",
            "Hive",
            "Assassination"
          ]
        },
        {
          "name": "Sedna",
          "missions": [
            "Exterminate",
            "Survival",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Spy",
            "Assassination"
          ]
        },
        {
          "name": "Europa",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Hijack",
            "Assassination"
          ]
        },
        {
          "name": "14",
          "missions": []
        },
        {
          "name": "15",
          "missions": []
        },
        {
          "name": "Phobos",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "17",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Lua",
          "missions": [
            "Exterminate",
            "Excavation",
            "Rescue",
            "Sabotage",
            "Spy",
            "Defense",
            "Mobile Defense",
            "Interception",
            "Exterminate",
            "Assassination"
          ]
        },
        {
          "name": "Kuva Fortress",
          "missions": [
            "Defense",
            "Defense",
            "Defense",
            "Exterminate",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Defense",
            "Assassination"
          ]
        }
      ]
    }
  ],
  "modifiers": [
    "+ Enemy armor/shield",
    "Environmental hazard",
    "Enemy damage resistance",
    "Energy reduction",
    "Eximus stronghold",
    "Weapon restriction"
  ]
}

},{}],199:[function(require,module,exports){
module.exports={
  "rotation": [
    { "name": "Umbra Forma Blueprint", "cost": 150 },
    { "name": "50,000 Kuva", "cost": 55 },
    { "name": "Kitgun Riven Mod", "cost": 75 },
    { "name": "3x Forma", "cost": 75 },
    { "name": "Zaw Riven Mod", "cost": 75 },
    { "name": "30,000 Endo", "cost": 150 },
    { "name": "Rifle Riven Mod", "cost": 75 },
    { "name": "Shotgun Riven Mod", "cost": 75 }
  ],
  "evergreen": [
    { "name": "Veiled Riven Cipher", "cost": 20 },
    { "name": "Bishamo Pauldrons Blueprint", "cost": 15 },
    { "name": "Bishamo Cuirass Blueprint", "cost": 25 },
    { "name": "Bishamo Helmet Blueprint", "cost": 20 },
    { "name": "Bishamo Greaves Blueprint", "cost": 25 },
    { "name": "10k Kuva", "cost": 15 },
    { "name": "Primary Arcane Adapter", "cost": 15 },
    { "name": "Secondary Arcane Adapter", "cost": 15 },
    { "name": "Relic Pack", "cost": 15 },
    { "name": "Stance Forma Blueprint", "cost": 10 },
    { "name": "Trio Orbit Ephermera", "cost": 3 },
    { "name": "Crania Ephemera", "cost": 85 },
    { "name": "Counterbalance", "cost": 35 },
    { "name": "Noggle Statue - Teshin", "cost": 35 },
    { "name": "Gauss in Action Glyph", "cost": 15 },
    { "name": "Grendel in Action Glyph", "cost": 15 },
    { "name": "Protea in Action Glyph", "cost": 15 },
    { "name": "Orokin Tea Set", "cost": 15 },
    { "name": "Xaku in Action Glyph", "cost": 15 }
  ]
}

},{}],200:[function(require,module,exports){
module.exports={
  "ArbitersSyndicate": {
    "name": "Arbiters of Hexis"
  },
  "CephalonSudaSyndicate": {
    "name": "Cephalon Suda"
  },
  "NewLokaSyndicate": {
    "name": "New Loka"
  },
  "PerrinSyndicate": {
    "name": "Perrin Sequence"
  },
  "SteelMeridianSyndicate": {
    "name": "Steel Meridian"
  },
  "RedVeilSyndicate": {
    "name": "Red Veil"
  },
  "CetusSyndicate": {
    "name": "Ostrons"
  },
  "QuillsSyndicate": {
    "name": "Quills"
  },
  "AssassinsSyndicate": {
    "name": "Assassins"
  },
  "EventSyndicate": {
    "name": "Operations Syndicate"
  },
  "SolarisSyndicate": {
    "name": "Solaris United"
  },
  "VoxSyndicate": {
    "name": "Vox Solaris"
  },
  "VentKidsSyndicate": {
    "name": "Vent Kids"
  },
  "EntratiSyndicate": {
    "name": "Entrati"
  },
  "NecraloidSyndicate": {
    "name": "Necraloid"
  },
  "KahlSyndicate": {
    "name": "Kahl's Garrison"
  },
  "ZarimanSyndicate": {
    "name": "The Holdfasts"
  },
  "RadioLegionSyndicate": {
    "name": "The Wolf of Saturn Six"
  },
  "RadioLegion2Syndicate": {
    "name": "The Emissary"
  },
  "RadioLegion3Syndicate": {
    "name": "Glassmaker"
  },
  "RadioLegionIntermissionSyndicate": {
    "name": "Intermission"
  },
  "RadioLegionIntermission2Syndicate": {
    "name": "Intermission II"
  },
  "RadioLegionIntermission3Syndicate": {
    "name": "Intermission III"
  },
  "RadioLegionIntermission4Syndicate": {
    "name": "Nora's Choice"
  },
  "RadioLegionIntermission5Syndicate": {
    "name": "Nora's Mix Volume 1"
  },
  "RadioLegionIntermission6Syndicate": {
    "name": "Nora's Mix Volume 2"
  }
}

},{}],201:[function(require,module,exports){
module.exports=[
  {
    "name": "Ancient Disruptor",
    "imageKey": "ancient_disruptor",
    "locations": [
      {
        "last_verified": "2019-02-24",
        "level": "6-16",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Tikal",
        "planet": "Earth",
        "type": "Excavation"
      },
      {
        "last_verified": "2019-02-24",
        "level": "8-10",
        "faction": "Crossfire",
        "spawn_rate": "100%",
        "mission": "Terminus",
        "planet": "Mercury",
        "type": "Sabotage"
      },
      {
        "last_verified": "2019-02-24",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Ancient Healer",
    "imageKey": "ancient_healer",
    "locations": [
      {
        "last_verified": "2018-08-22",
        "level": "10-15",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Hepit (Unconfirmed)",
        "planet": "Void",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Anti MOA [Research]",
    "imageKey": "anti_moa",
    "locations": [
      {
        "last_verified": "2019-07-01",
        "level": "34-38",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Acheron",
        "planet": "Pluto",
        "type": "Extermination"
      },
      {
        "last_verified": "2020-01-28",
        "level": "21-23",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Baal",
        "planet": "Europa",
        "type": "Extermination"
      },
      {
        "last_verified": "0000-00-00",
        "level": "18-33",
        "faction": "Corpus",
        "spawn_rate": "?%",
        "mission": "Valefor",
        "planet": "Europa",
        "type": "Excavation"
      }
    ]
  },
  {
    "name": "Arid Eviscerator [Research]",
    "imageKey": "arid_eviscerator",
    "locations": [
      {
        "last_verified": "2018-04-16",
        "level": "10-12",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Ara",
        "planet": "Mars",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Ballista",
    "imageKey": "ballista",
    "locations": [
      {
        "last_verified": "2019-02-15",
        "level": "2-4",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Mantle",
        "planet": "Earth",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-15",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Boiler",
    "imageKey": "boiler",
    "locations": [
      {
        "last_verified": "2019-01-23",
        "level": "23-33",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Cholistan",
        "planet": "Europa",
        "type": "Excavation"
      },
      {
        "last_verified": "2019-01-23",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-23",
        "level": "25-35",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Orokin Derelict Capture",
        "planet": "Derelict",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Bombard",
    "imageKey": "bombard",
    "locations": [
      {
        "last_verified": "2019-01-20",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Ker",
        "planet": "Ceres",
        "type": "Sabotage"
      },
      {
        "last_verified": "2019-01-08",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-20",
        "level": "13-15",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Nuovo",
        "planet": "Ceres",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-01-20",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Exta",
        "planet": "Ceres",
        "type": "Assassination"
      }
    ]
  },
  {
    "name": "Brood Mother",
    "imageKey": "brood_mother",
    "locations": [
      {
        "last_verified": "2019-04-16",
        "level": "6-16",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Tikal",
        "planet": "Earth",
        "type": "Excavation"
      },
      {
        "last_verified": "2019-01-26",
        "level": "15-25",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Gabii",
        "planet": "Ceres",
        "type": "Survival"
      },
      {
        "last_verified": "2019-01-29",
        "level": "25-35",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Assur",
        "planet": "Uranus",
        "type": "Survival"
      },
      {
        "last_verified": "2019-01-26",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Butcher",
    "imageKey": "butcher",
    "locations": [
      {
        "last_verified": "2019-02-26",
        "level": "2-4",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Mantle",
        "planet": "Earth",
        "type": "Capture"
      },
      {
        "last_verified": "2018-09-25",
        "level": "6-8",
        "faction": "Grineer",
        "spawn_rate": "70%",
        "mission": "Caloris",
        "planet": "Mercury",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-06-26",
        "level": "7-9",
        "faction": "Grineer",
        "spawn_rate": "78%",
        "mission": "Elion",
        "planet": "Mercury",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-26",
        "level": "36-40",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Rusalka",
        "planet": "Sedna",
        "type": "Capture"
      }
    ]
  },
    {
    "name": "Charger",
    "imageKey": "charger",
    "locations": [
      {
        "last_verified": "2019-06-27",
        "level": "8-10",
        "faction": "Crossfire",
        "spawn_rate": "100%",
        "mission": "Terminus",
        "planet": "Mercury",
        "type": "Sabotage"
      },
      {
        "last_verified": "2019-09-01",
        "level": "7-9",
        "faction": "Crossfire",
        "spawn_rate": "100%",
        "mission": "M Prime",
        "planet": "Mercury",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-06-27",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Commander",
    "imageKey": "commander",
    "locations": [
      {
        "last_verified": "2018-05-08",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Telesto",
        "planet": "Saturn",
        "type": "Extermination"
      }
    ]
  },
  {
    "name": "Corrupted Ancient [Research]",
    "imageKey": "corrupted_ancient",
    "locations": [
      {
        "last_verified": "2019-02-05",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Hepit",
        "planet": "Void",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-05",
        "level": "20-25",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Stribog",
        "planet": "Void",
        "type": "Sabotage"
      },
      {
        "last_verified": "2019-02-05",
        "level": "20-25",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Ani",
        "planet": "Void",
        "type": "Survival"
      }
    ]
  },
  {
    "name": "Corrupted Bombard",
    "imageKey": "corrupted_bombard",
    "locations": [
      {
        "last_verified": "2019-06-05",
        "level": "30-35",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Oxomoco",
        "planet": "Void",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-01-12",
        "level": "40-45",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Marduk",
        "planet": "Void",
        "type": "Sabotage"
      }
    ]
  },
  {
    "name": "Corrupted Butcher",
    "imageKey": "corrupted_butcher",
    "locations": [
      {
        "last_verified": "2019-01-25",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "94%",
        "mission": "Hepit",
        "planet": "Void",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-25",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Teshub",
        "planet": "Void",
        "type": "Extermination"
      }
    ]
  },
  {
    "name": "Corrupted Crewman",
    "imageKey": "corrupted_crewman",
    "locations": [
      {
        "last_verified": "2019-01-28",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Teshub",
        "planet": "Void",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-01-28",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Hepit",
        "planet": "Void",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Corrupted Heavy Gunner",
    "imageKey": "corrupted_heavy_gunner",
    "locations": [
      {
        "last_verified": "2019-03-23",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Hepit",
        "planet": "Void",
        "type": "Capture"
      },
      {
        "last_verified": "2019-03-23",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Teshub",
        "planet": "Void",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-03-23",
        "level": "30-35",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Ukko",
        "planet": "Void",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Corrupted Lancer",
    "imageKey": "corrupted_lancer",
    "locations": [
      {
        "last_verified": "2018-04-15",
        "level": "10-15",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Hepit",
        "planet": "Void",
        "type": "Capture"
      },
      {
        "last_verified": "2019-03-17",
        "level": "30-35",
        "faction": "Orokin",
        "spawn_rate": "100%",
        "mission": "Ukko",
        "planet": "Void",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Corrupted Nullifier",
    "imageKey": "corrupted_nullifier",
    "locations": [
      {
        "last_verified": "2019-08-14",
        "level": "30-35",
        "faction": "Orokin",
        "spawn_rate": "78%",
        "mission": "Oxomoco",
        "planet": "Void",
        "type": "Extermination"
      }
    ]
  },
  {
    "name": "Crawler",
    "imageKey": "crawler",
    "locations": [
      {
        "last_verified": "2018-04-06",
        "level": "6-16",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Tikal",
        "planet": "Earth",
        "type": "Excavation"
      },
      {
        "last_verified": "2018-05-13",
        "level": "6-11",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Apollodorus",
        "planet": "Mercury",
        "type": "Survival"
      },
      {
        "last_verified": "2019-05-30",
        "level": "18-20",
        "faction": "Crossfire",
        "spawn_rate": "100%",
        "mission": "Armaros",
        "planet": "Europa",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-03-07",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      },
      {
        "last_verified": "2019-03-07",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Brugia",
        "planet": "Eris",
        "type": "Rescue"
      },
      {
        "last_verified": "2018-03-20",
        "level": "25-35",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Orokin Derelict Assassination",
        "planet": "Derelict",
        "type": "Assassination"
      }
    ]
  },
  {
    "name": "Crewman [Research]",
    "imageKey": "crewman",
    "locations": [
      {
        "last_verified": "2019-08-16",
        "level": "25-30",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Copernicus",
        "planet": "Lua",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Drahk Master",
    "imageKey": "drahk_master",
    "locations": [
      {
        "last_verified": "2019-01-31",
        "level": "21-23",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-31",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "90%",
        "mission": "Anthe",
        "planet": "Saturn",
        "type": "Rescue"
      }
    ]
  },
  {
    "name": "Elite Crewman",
    "imageKey": "elite_crewman",
    "locations": [
      {
        "last_verified": "2019-09-28",
        "level": "25-30",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Copernicus",
        "planet": "Lua",
        "type": "Capture"
      },
      {
        "last_verified": "2019-09-28",
        "level": "25-30",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Zeipel",
        "planet": "Lua",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-08-16",
        "level": "5-7",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Venera",
        "planet": "Venus",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Eviscerator",
    "imageKey": "eviscerator",
    "locations": [
      {
        "last_verified": "2019-01-24",
        "level": "10-12",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Ara",
        "planet": "Mars",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-15",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-15",
        "level": "13-15",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Nuovo",
        "planet": "Ceres",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-09-12",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Ker",
        "planet": "Ceres",
        "type": "Sabotage"
      }
    ]
  },
  {
    "name": "Fusion MOA",
    "imageKey": "fusion_moa",
    "locations": [
      {
        "last_verified": "2019-01-29",
        "level": "9-11",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Gradivus",
        "planet": "Mars",
        "type": "Sabotage"
      },
      {
        "last_verified": "2019-01-29",
        "level": "12-14",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Skyresh",
        "planet": "Phobos",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-29",
        "level": "21-23",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Abaddon",
        "planet": "Europa",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-29",
        "level": "30-34",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Hydra",
        "planet": "Pluto",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Guardsman [Research]",
    "imageKey": "guardsman",
    "locations": [
      {
        "last_verified": "2019-11-23",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-01",
        "level": "13-15",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Nuovo",
        "planet": "Ceres",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-02-01",
        "level": "13-15",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Ludi",
        "planet": "Ceres",
        "type": "Hijack"
      }
    ]
  },
  {
    "name": "Heavy Gunner",
    "imageKey": "heavy_gunner",
    "locations": [
      {
        "last_verified": "2019-08-13",
        "level": "7-9",
        "faction": "Grineer",
        "spawn_rate": "77%",
        "mission": "Elion",
        "planet": "Mercury",
        "type": "Capture"
      },
      {
        "last_verified": "2019-08-13",
        "level": "6-8",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Caloris",
        "planet": "Mercury",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-08-13",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-08-13",
        "level": "32-36",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Rusalka",
        "planet": "Sedna",
        "type": "Sabotage"
      }
    ]
  },
  {
    "name": "Hellion",
    "imageKey": "hellion",
    "locations": [
      {
        "last_verified": "2019-08-15",
        "level": "10-12",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Ara",
        "planet": "Mars",
        "type": "Capture"
      },
      {
        "last_verified": "2019-03-30",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-03-30",
        "level": "32-36",
        "faction": "Grineer",
        "spawn_rate": "90%",
        "mission": "Rusalka",
        "planet": "Sedna",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Lancer [Research]",
    "imageKey": "lancer",
    "locations": [
      {
        "last_verified": "2019-02-14",
        "level": "7-9",
        "faction": "Grineer",
        "spawn_rate": "81%",
        "mission": "Elion",
        "planet": "Mercury",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-14",
        "level": "6-8",
        "faction": "Grineer",
        "spawn_rate": "80%",
        "mission": "Caloris",
        "planet": "Mercury",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-02-14",
        "level": "6-8",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Pantheon",
        "planet": "Mercury",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-06-24",
        "level": "21-23",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-14",
        "level": "34-38",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Kappa",
        "planet": "Sedna",
        "type": "Spy"
      }
    ]
  },
  {
    "name": "Leaper",
    "imageKey": "leaper",
    "locations": [
      {
        "last_verified": "2019-01-13",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      },
      {
        "last_verified": "2018-09-23",
        "level": "6-16",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Tikal",
        "planet": "Earth",
        "type": "Excavation"
      },
      {
        "last_verified": "2019-01-13",
        "level": "8-10",
        "faction": "Crossfire",
        "spawn_rate": "92%",
        "mission": "Terminus",
        "planet": "Mercury",
        "type": "Sabotage"
      },
      {
        "last_verified": "2018-09-23",
        "level": "7-9",
        "faction": "Crossfire",
        "spawn_rate": "33%",
        "mission": "M Prime",
        "planet": "Mercury",
        "type": "Extermination"
      }
    ]
  },
  {
    "name": "MOA",
    "imageKey": "moa",
    "locations": [
      {
        "last_verified": "2019-04-04",
        "level": "5-7",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Venera",
        "planet": "Venus",
        "type": "Capture"
      },
      {
        "last_verified": "2019-04-04",
        "level": "5-7",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Linea",
        "planet": "Venus",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-04-04",
        "level": "3-5",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "E-Gate",
        "planet": "Venus",
        "type": "Extermination"
      }
    ]
  },
  {
    "name": "Napalm",
    "imageKey": "napalm",
    "locations": [
      {
        "last_verified": "2019-01-21",
        "level": "21-23",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      },
      {
        "last_verified": "2018-08-04",
        "level": "30-40",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Selkie (Unconfirmed)",
        "planet": "Sedna",
        "type": "Survival"
      }
    ]
  },
  {
    "name": "Nullifier Crewman",
    "imageKey": "nullifier_crewman",
    "locations": [
      {
        "last_verified": "2019-06-27",
        "level": "21-23",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Abaddon",
        "planet": "Europa",
        "type": "Capture"
      },
      {
        "last_verified": "2019-04-06",
        "level": "21-23",
        "faction": "Corpus",
        "spawn_rate": "100%",
        "mission": "Orias (Unconfirmed)",
        "planet": "Europa",
        "type": "Rescue"
      }
    ]
  },
  {
    "name": "Runner [Research]",
    "imageKey": "runner",
    "locations": [
      {
        "last_verified": "2018-01-06",
        "level": "34-38",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Saxis",
        "planet": "Eris",
        "type": "Extermination"
      },
      {
        "last_verified": "2018-08-31",
        "level": "34-38",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Orokin Derelict Extermination",
        "planet": "Derelict",
        "type": "Extermination"
      }
    ]
  },
  {
    "name": "Scorch",
    "imageKey": "scorch",
    "locations": [
      {
        "last_verified": "2019-08-13",
        "level": "21-23",
        "faction": "Grineer",
        "spawn_rate": "95%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-16",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Numa",
        "planet": "Saturn",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-01-16",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "ANTHE",
        "planet": "Saturn",
        "type": "Rescue"
      }
    ]
  },
  {
    "name": "Scorpion",
    "imageKey": "scorpion",
    "locations": [
      {
        "last_verified": "2019-02-02",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "58%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-03",
        "level": "21-23",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-03",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Numa",
        "planet": "Saturn",
        "type": "Rescue"
      }
    ]
  },
  {
    "name": "Seeker / Frontier Seeker",
    "imageKey": "seeker",
    "locations": [
      {
        "last_verified": "2020-03-10",
        "level": "1-3",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "E-Prime",
        "planet": "Earth",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-11-28",
        "level": "14-16",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Lex",
        "planet": "Ceres",
        "type": "Capture"
      },
      {
        "last_verified": "2019-02-11",
        "level": "13-15",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Nuovo",
        "planet": "Ceres",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-08-09",
        "level": "34-38",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Kappa",
        "planet": "Sedna",
        "type": "Spy"
      }
    ]
  },
  {
    "name": "Shield Lancer",
    "imageKey": "shield_lancer",
    "locations": [
      {
        "last_verified": "2019-01-30",
        "level": "6-8",
        "faction": "Grineer",
        "spawn_rate": "75%",
        "mission": "Pantheon",
        "planet": "Mercury",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-01-30",
        "level": "6-8",
        "faction": "Grineer",
        "spawn_rate": "40%",
        "mission": "Caloris",
        "planet": "Mercury",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-04-18",
        "level": "7-9",
        "faction": "Grineer",
        "spawn_rate": "76%",
        "mission": "Elion",
        "planet": "Mercury",
        "type": "Capture"
      },
      {
        "last_verified": "2019-10-21",
        "level": "21-23",
        "faction": "Grineer",
        "spawn_rate": "88%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      }
    ]
  },
  {
    "name": "Swarm-Mutalist MOA",
    "imageKey": "swarm-mutalist_moa",
    "locations": [
      {
        "last_verified": "2019-01-19",
        "level": "18-20",
        "faction": "Crossfire",
        "spawn_rate": "100%",
        "mission": "Armaros",
        "planet": "Europa",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-01-19",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Isos",
        "planet": "Eris",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-19",
        "level": "32-36",
        "faction": "Infested",
        "spawn_rate": "100%",
        "mission": "Brugia",
        "planet": "Eris",
        "type": "Rescue"
      }
    ]
  },
  {
    "name": "Trooper",
    "imageKey": "trooper",
    "locations": [
      {
        "last_verified": "2019-01-22",
        "level": "2-4",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Mantle",
        "planet": "Earth",
        "type": "Capture"
      },
      {
        "last_verified": "2019-01-22",
        "level": "1-3",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "E Prime",
        "planet": "Earth",
        "type": "Extermination"
      },
      {
        "last_verified": "2019-01-22",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Numa",
        "planet": "Saturn",
        "type": "Rescue"
      },
      {
        "last_verified": "2019-01-22",
        "level": "22-24",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Cassini",
        "planet": "Saturn",
        "type": "Capture"
      },
      {
        "last_verified": "2018-09-14",
        "level": "32-36",
        "faction": "Grineer",
        "spawn_rate": "100%",
        "mission": "Adaro",
        "planet": "Sedna",
        "type": "Extermination"
      }
    ]
  }
]

},{}],202:[function(require,module,exports){
module.exports=[
  {
    "regex": "focus",
    "name": "Focus",
    "url": "https://youtu.be/IMltFZ97oXc"
  },
  {
    "regex": "mods?",
    "name": "Mods",
    "url": "https://youtu.be/ZuYfEJzpR4A"
  },
  {
    "regex": "dojos?",
    "name": "Dojos",
    "url": "https://youtu.be/M28grdARKoQ"
  }
]

},{}],203:[function(require,module,exports){
module.exports={
  "GAMEPLAY_KILL_XP_AMOUNT": {
    "value": "Mission Kill XP"
  },
  "GAMEPLAY_PICKUP_AMOUNT": {
    "value": "Resource Drop Amount"
  },
  "GAMEPLAY_MONEY_REWARD_AMOUNT": {
    "value": "Credit Drop chance"
  },
  "GAMEPLAY_MONEY_PICKUP_AMOUNT": {
    "value": "Credit Drop amount"
  }
}

},{}],204:[function(require,module,exports){
'use strict';

const safeRequire = require('./safeRequire');

const locales = ['de', 'es', 'fr', 'it', 'ko', 'pl', 'pt', 'ru', 'zh', 'cs', 'sr', 'uk'];

/**
 * Synthesis target information
 * @typedef {Object} SynthesisTarget
 * @property {string} name Name of the target
 * @property {Object[]} locations Array of verified locations
 * @property {string} locations.last_verified Date string for the last verified date
 * @property {string} locations.level Level range for enemies on the node.
 * @property {string} locations.spawn_rate Plain text Spawn rate for enemy.
 * @property {string} locations.mission Mission node for the location
 * @property {string} locations.planet Planet the node is on
 * @property {string} locations.type Mission type at this location
 * @property {string} locations.faction Enemy faction that spawns in this location
 */

/**
 * Arcane Data
 * @typedef {Object} Arcane
 * @deprecated
 * @property {string} regex regex string to allow mapping
 * @property {string} name name of Arcane
 * @property {string} effect what the arcane does
 * @property {string} rarity How rare the arcane is
 * @property {string} location Where it drops
 * @property {string} thumbnail Wiki thumbnail url
 * @property {string} info Wiki Page URL
 */

/**
 * Conclave Data
 * @typedef {Object} Conclave
 */

/**
 * Bundles all the data for a particular language
 * @typedef {Object} WorldstateLangBundle
 * @property {Arcane[]} arcanes Deprecated: Array of arcane data
 * @property {Conclave} conclave Data for translating PvP categories and types
 * @property {Object} events Deprecated: Data for converting event tags to useable event data.
 *    Deprecated in favor of keeping values in languages.json
 * @property {Object} factions Faction universal name to plain-usage name
 * @property {Object} fissureModifiers Map of fissures to "Warframeified" tier names and numbers
 * @property {Object} languages Map of "internal" Warframe strings to useable language strings
 * @property {Object} missionTypes Map of Mission Type identifiers to their corresponding values
 * @property {Object} operationTypes Global modifiers for applying operations to things like
 *  credits, affinity, etc.
 * @property {Object} persistentEnemy Region mapping for indicies to planets
 * @property {Object} solNodes Nodes in the Sol system, with enemy type and node information
 * @property {Object} sortie Sortie-specific mapping for modifier type, description, and boss
 * @property {Array<Object>} tutorials Official tutorials.
 *                                      Not many have been released in a long time.
 * @property {Object} upgradeTypes Global upgrade types that are modified by #operationTypes
 * @property {Array<SynthesisTarget>} synthTargets Synthesis target data for
 *  optimal locations to find targets.
 */

/* eslint-disable global-require */
/**
 * English United States translations bundle,
 *  default translations
 * @type {WorldstateLangBundle}
 */
const enUS = {
  arcanes: require('./data/arcanes.json'),
  conclave: require('./data/conclaveData.json'),
  events: require('./data/eventsData.json'),
  factions: require('./data/factionsData.json'),
  fissureModifiers: require('./data/fissureModifiers.json'),
  languages: require('./data/languages.json'),
  missionTypes: require('./data/missionTypes.json'),
  operationTypes: require('./data/operationTypes.json'),
  persistentEnemy: require('./data/persistentEnemyData.json'),
  solNodes: require('./data/solNodes.json'),
  sortie: require('./data/sortieData.json'),
  syndicates: require('./data/syndicatesData.json'),
  tutorials: require('./data/tutorials.json'),
  upgradeTypes: require('./data/upgradeTypes.json'),
  synthTargets: require('./data/synthTargets.json'),
  steelPath: require('./data/steelPath.json'),
};
/* eslint-enable global-require */

const bundle = {
  /**
   * English United States translations
   * @type {WorldstateLangBundle}
   */
  en_US: enUS,
  en: enUS,
  ...enUS,
  locales,
};

locales.forEach((locale) => {
  /**
   * Translations bundle for $locale
   * @type {WorldstateLangBundle}
   */
  bundle[locale] = {
    arcanes: safeRequire(`./data/${locale}/arcanes.json`, []),
    conclave: safeRequire(`./data/${locale}/conclaveData.json`, {}),
    events: safeRequire(`./data/${locale}/eventsData.json`, {}),
    factions: safeRequire(`./data/${locale}/factionsData.json`, {}),
    fissureModifiers: safeRequire(`./data/${locale}/fissureModifiers.json`, {}),
    languages: safeRequire(`./data/${locale}/languages.json`, {}),
    missionTypes: safeRequire(`./data/${locale}/missionTypes.json`, {}),
    operationTypes: safeRequire(`./data/${locale}/operationTypes.json`, {}),
    persistentEnemy: safeRequire(`./data/${locale}/persistentEnemyData.json`, {}),
    solNodes: safeRequire(`./data/${locale}/solNodes.json`, []),
    sortie: safeRequire(`./data/${locale}/sortieData.json`, []),
    syndicates: safeRequire(`./data/${locale}/syndicatesData.json`, []),
    tutorials: safeRequire(`./data/${locale}/tutorials.json`, []),
    upgradeTypes: safeRequire(`./data/${locale}/upgradeTypes.json`, []),
    synthTargets: safeRequire(`./data/${locale}/synthTargets.json`, []),
    steelPath: safeRequire(`./data/${locale}/steelPath.json`, []),
  };
});

locales.push('en');

module.exports = bundle;

},{"./data/arcanes.json":188,"./data/conclaveData.json":189,"./data/eventsData.json":190,"./data/factionsData.json":191,"./data/fissureModifiers.json":192,"./data/languages.json":193,"./data/missionTypes.json":194,"./data/operationTypes.json":195,"./data/persistentEnemyData.json":196,"./data/solNodes.json":197,"./data/sortieData.json":198,"./data/steelPath.json":199,"./data/syndicatesData.json":200,"./data/synthTargets.json":201,"./data/tutorials.json":202,"./data/upgradeTypes.json":203,"./safeRequire":205}],205:[function(require,module,exports){
(function (process){(function (){
'use strict';

/**
 * Safely require path, fall back to fallback if module cannot loa
 * @param  {[type]} path    Path to attempt to load
 * @param  {[type]} fallback [description]
 * @returns {any}         module or the default object
 */
const safeRequire = (path, fallback = {}) => {
  try {
    // eslint-disable-next-line global-require, import/no-dynamic-require
    return require(path);
  } catch (error) {
    if ((process.env.LOG_LEVEL || 'ERROR').toUpperCase() === 'DEBUG') {
      // eslint-disable-next-line no-console
      console.debug(`Failed to load module at ${path} ... returning fallback`);
    }
    return fallback;
  }
};

module.exports = safeRequire;

}).call(this)}).call(this,require('_process'))
},{"_process":150}],206:[function(require,module,exports){
'use strict';

const sortieData = require('warframe-worldstate-data').sortie;

const News = require('./models/News');
const WorldEvent = require('./models/WorldEvent');
const Alert = require('./models/Alert');
const Sortie = require('./models/Sortie');
const SortieVariant = require('./models/SortieVariant');
const SyndicateMission = require('./models/SyndicateMission');
const Fissure = require('./models/Fissure');
const GlobalUpgrade = require('./models/GlobalUpgrade');
const FlashSale = require('./models/FlashSale');
const Invasion = require('./models/Invasion');
const DarkSector = require('./models/DarkSector');
const DarkSectorBattle = require('./models/DarkSectorBattle');
const Mission = require('./models/Mission');
const Reward = require('./models/Reward');
const VoidTrader = require('./models/VoidTrader');
const DailyDeal = require('./models/DailyDeal');
const Simaris = require('./models/Simaris');
const ConclaveChallenge = require('./models/ConclaveChallenge');
const PersistentEnemy = require('./models/PersistentEnemy');
const timeDate = require('./utilities/timeDate');
const translator = require('./utilities/translation');
const EarthCycle = require('./models/EarthCycle');
const CetusCycle = require('./models/CetusCycle');
const ConstructionProgress = require('./models/ConstructionProgress');
const VallisCycle = require('./models/VallisCycle');
const ZarimanCycle = require('./models/ZarimanCycle');
const WeeklyChallenge = require('./models/WeeklyChallenge');
const Nightwave = require('./models/Nightwave');
const Kuva = require('./models/Kuva');
const SentientOutpost = require('./models/SentientOutpost');
const CambionCycle = require('./models/CambionCycle');
const SteelPathOffering = require('./models/SteelPathOffering');
const Dependency = require('./supporting/Dependency'); // eslint-disable-line no-unused-vars
const DuviriCycle = require('./models/DuviriCycle');

// needed for type declarations
const MarkdownSettings = require('./supporting/MarkdownSettings');

const safeArray = (arr) => arr || [];
const safeObj = (obj) => obj || {};

/**
 * Default Dependency object
 * @type {Dependency}
 */
const defaultDeps = {
  News,
  WorldEvent,
  Alert,
  Sortie,
  SortieVariant,
  SyndicateMission,
  Fissure,
  GlobalUpgrade,
  FlashSale,
  Invasion,
  DarkSector,
  DarkSectorBattle,
  Mission,
  Reward,
  VoidTrader,
  DailyDeal,
  Simaris,
  ConclaveChallenge,
  PersistentEnemy,
  WeeklyChallenge,
  timeDate,
  translator,
  sortieData,
  mdConfig: new MarkdownSettings(),
  locale: 'en',
  logger: console,
};

/**
 *
 * @param {Object} ParserClass class for parsing data
 * @param {Array<BaseContentObject>} dataArray array of raw data
 * @param {Dependency} deps shared dependency object
 * @param {*} [uniqueField] field to treat as unique
 * @returns {WorldstateObject[]}
 */
function parseArray(ParserClass, dataArray, deps, uniqueField) {
  const arr = (dataArray || []).map((d) => new ParserClass(d, deps));
  if (uniqueField) {
    const utemp = {};
    arr.sort((a, b) => a.id.localeCompare(b.id));
    arr.forEach((obj) => {
      utemp[obj[uniqueField]] = obj;
    });
    return Array.from(arr).filter((obj) => {
      if (obj && obj.active && typeof obj.active !== 'undefined') return obj.active;
      /* istanbul ignore next */
      return true;
    });
  }
  return arr;
}

/**
 * Parses Warframe Worldstate JSON
 */
module.exports = class WorldState {
  /**
   * Generates the worldstate json as a string into usable objects
   * @param {string} json The worldstate JSON string
   * @param {Dependency} [deps] The options object
   */
  constructor(json, deps = defaultDeps) {
    if (typeof json !== 'string') {
      throw new TypeError(`json needs to be a string, provided ${typeof json} : ${JSON.stringify(json)}`);
    }
    const data = JSON.parse(json);

    // eslint-disable-next-line no-param-reassign
    deps = {
      ...defaultDeps,
      ...deps,
    };

    /**
     * The date and time at which the World State was generated
     * @type {Date}
     */
    this.timestamp = new Date(data.Time * 1000);

    /**
     * The in-game news
     * @type {Array.<News>}
     */
    this.news = parseArray(
      deps.News,
      data.Events
        ? data.Events.filter((e) => typeof e.Messages.find((msg) => msg.LanguageCode === deps.locale) !== 'undefined')
        : [],
      deps
    );

    /**
     * The current events
     * @type {Array.<WorldEvent>}
     */
    this.events = parseArray(deps.WorldEvent, data.Goals, deps);

    /**
     * The current alerts
     * @type {Array.<Alert>}
     */
    this.alerts = parseArray(deps.Alert, data.Alerts, deps);

    /**
     * The current sortie
     * @type {Sortie}
     */
    [this.sortie] = parseArray(deps.Sortie, data.Sorties, deps);

    /**
     * The current syndicate missions
     * @type {Array.<SyndicateMission>}
     */
    this.syndicateMissions = parseArray(deps.SyndicateMission, data.SyndicateMissions, deps, 'syndicate');

    /**
     * The current fissures: 'ActiveMissions' & 'VoidStorms'
     * @type {Array.<Fissure>}
     */
    this.fissures = parseArray(deps.Fissure, data.ActiveMissions, deps).concat(
      parseArray(deps.Fissure, data.VoidStorms, deps)
    );

    /**
     * The current global upgrades
     * @type {Array.<GlobalUpgrade>}
     */
    this.globalUpgrades = parseArray(deps.GlobalUpgrade, data.GlobalUpgrades, deps);

    /**
     * The current flash sales
     * @type {Array.<FlashSale>}
     */
    this.flashSales = parseArray(deps.FlashSale, data.FlashSales, deps);

    /**
     * The current invasions
     * @type {Array.<Invasion>}
     */
    this.invasions = parseArray(deps.Invasion, data.Invasions, deps);

    /**
     * The state of the dark sectors
     * @type {Array.<DarkSector>}
     */
    this.darkSectors = parseArray(deps.DarkSector, data.BadlandNodes, deps);

    /**
     * The state of all Void Traders
     * @type {VoidTrader[]}
     */
    this.voidTraders = parseArray(deps.VoidTrader, data.VoidTraders, deps).sort(
      (a, b) => Date.parse(a.activation) - Date.parse(b.activation)
    );

    /**
     * The state of the Void Trader
     * @type {VoidTrader}
     * @deprecated
     */
    [this.voidTrader] = this.voidTraders;

    /**
     * The current daily deals
     * @type {Array.<DailyDeal>}
     */
    this.dailyDeals = parseArray(deps.DailyDeal, data.DailyDeals, deps);

    /**
     * The state of the sanctuary synthesis targets
     * @type {Simaris}
     */
    this.simaris = new deps.Simaris(safeObj(data.LibraryInfo), deps);

    /**
     * The current conclave challenges
     * @type {Array.<ConclaveChallenge>}
     */
    this.conclaveChallenges = parseArray(deps.ConclaveChallenge, data.PVPChallengeInstances, deps);

    /**
     * The currently active persistent enemies
     * @type {Array.<PersistentEnemy>}
     */
    this.persistentEnemies = parseArray(deps.PersistentEnemy, data.PersistentEnemies, deps);

    /**
     * The current earth cycle
     * @type {EarthCycle}
     */
    this.earthCycle = new EarthCycle(deps);

    const cetusSynd = safeArray(data.SyndicateMissions).filter((syndicate) => syndicate.Tag === 'CetusSyndicate');
    const cetusBountyEnd = timeDate.parseDate(cetusSynd.length > 0 ? cetusSynd[0].Expiry : { $date: 0 });

    /**
     * The current Cetus cycle
     * @type {CetusCycle}
     */
    this.cetusCycle = new CetusCycle(cetusBountyEnd, deps);

    /**
     * Cambion Drift Cycle
     * @type {CambionCycle}
     */
    this.cambionCycle = new CambionCycle(this.cetusCycle, deps);

    const zarimanSynd = safeArray(data.SyndicateMissions).filter((syndicate) => syndicate.Tag === 'ZarimanSyndicate');
    const zarimanBountyEnd = timeDate.parseDate(zarimanSynd.length > 0 ? zarimanSynd[0].Expiry : { $date: 0 });

    /**
     * The current Zariman cycle based off current time
     * @type {ZarimanCycle}
     */
    this.zarimanCycle = new ZarimanCycle(zarimanBountyEnd, deps);

    /**
     * Weekly challenges
     * @type {Array.<WeeklyChallenge>}
     */
    this.weeklyChallenges = data.WeeklyChallenges ? new deps.WeeklyChallenge(data.WeeklyChallenges, deps) : [];

    const projectPCTwithOid = data.ProjectPct
      ? {
          ProjectPct: data.ProjectPct,
          _id: {
            $oid: `${Date.now()}${data.ProjectPct[0]}`,
          },
        }
      : undefined;

    /**
     * The Current construction progress for Fomorians/Razorback/etc.
     * @type {ConstructionProgress}
     */
    this.constructionProgress = projectPCTwithOid ? new ConstructionProgress(projectPCTwithOid, deps) : {};

    /**
     * The current Orb Vallis cycle state
     * @type {VallisCycle}
     */
    this.vallisCycle = new VallisCycle(deps);

    if (data.SeasonInfo) {
      /**
       * The current nightwave season
       * @type {Nightwave}
       */
      this.nightwave = new Nightwave(data.SeasonInfo, deps);
    }

    const externalMissions = new Kuva(deps);

    ({
      /**
       * Kuva missions array
       * @type {ExternalMission[]}
       */
      kuva: this.kuva,
      /**
       * Arbitration mission
       * @type {ExternalMission}
       */
      arbitration: this.arbitration,
    } = externalMissions);

    if (!this.arbitration || !Object.keys(this.arbitration).length) {
      this.arbitration = undefined;
    }

    /**
     * Current syndicate outposts
     * @type {SentientOutpost}
     */
    this.sentientOutposts = new SentientOutpost(data.Tmp, deps);

    /**
     * Steel path offering rotation
     * @type {SteelPathOffering}
     */
    this.steelPath = new SteelPathOffering(deps);

    [this.vaultTrader] = parseArray(deps.VoidTrader, data.PrimeVaultTraders, deps);

    /**
     * The current archon hunt
     * @type {Sortie}
     */
    [this.archonHunt] = parseArray(deps.Sortie, data.LiteSorties, deps);

    this.duviriCycle = new DuviriCycle(deps);
  }
};

},{"./models/Alert":207,"./models/CambionCycle":208,"./models/CetusCycle":209,"./models/ConclaveChallenge":211,"./models/ConstructionProgress":212,"./models/DailyDeal":213,"./models/DarkSector":214,"./models/DarkSectorBattle":215,"./models/DuviriCycle":216,"./models/EarthCycle":217,"./models/Fissure":218,"./models/FlashSale":219,"./models/GlobalUpgrade":220,"./models/Invasion":221,"./models/Kuva":222,"./models/Mission":223,"./models/News":224,"./models/Nightwave":225,"./models/PersistentEnemy":227,"./models/Reward":228,"./models/SentientOutpost":229,"./models/Simaris":230,"./models/Sortie":231,"./models/SortieVariant":232,"./models/SteelPathOffering":233,"./models/SyndicateMission":235,"./models/VallisCycle":236,"./models/VoidTrader":237,"./models/WeeklyChallenge":240,"./models/WorldEvent":241,"./models/ZarimanCycle":243,"./supporting/Dependency":244,"./supporting/MarkdownSettings":245,"./utilities/timeDate":248,"./utilities/translation":249,"warframe-worldstate-data":204}],207:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents an alert
 * @extends {WorldstateObject}
 */
class Alert extends WorldstateObject {
  /**
   * @param   {Object}             data       The alert data
   * @param   {MarkdownSettings}   mdConfig   The markdown settings
   * @param   {Translator}         translator The string translator
   * @param   {TimeDateFunctions}  timeDate   The time and date functions
   * @param   {Mission}            Mission    The Mission parser
   * @param   {Reward}             Reward     The Reward parser
   * @param   {string}             locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, Mission, Reward, locale }) {
    super(data, { timeDate });

    const deps = {
      mdConfig,
      translator,
      timeDate,
      Mission,
      Reward,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The mission that the players have to complete
     * @type {Mission}
     */
    this.mission = new Mission(data.MissionInfo, deps);

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();

    /**
     * An array containing the types of all of the alert's rewards
     * @type {Array.<string>}
     */
    this.rewardTypes = this.getRewardTypes().length ? this.getRewardTypes() : ['credits'];

    /**
     * A tag that DE occasionally provides, such as `LotusGift`
     * @type {String}
     */
    this.tag = data.Tag || undefined;
  }

  /**
   * Get the alert's description text
   * @returns {string}
   */
  getDescription() {
    return this.mission.description;
  }

  /**
   * Get the alert's reward
   * @returns {Reward}
   */
  getReward() {
    return this.mission.reward;
  }

  /**
   * Get a string indicating how much time is left before the alert expires
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Get an array containing the types of all of the alert's rewards
   * @returns {Array.<string>}
   */
  getRewardTypes() {
    return this.mission.reward.getTypes();
  }

  /**
   * The alert's string representation
   * @returns {string}
   */
  toString() {
    const lines = [this.mission.toString(), this.getETAString()];

    return `${this.mdConfig.codeMulti}${lines.join(this.mdConfig.lineEnd)}${this.mdConfig.blockEnd}`;
  }
}

module.exports = Alert;

},{"./WorldstateObject":242}],208:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents the current Cambion Drift Fass/Vome Cycle
 * @extends {WorldstateObject}
 * @property {string} timeLeft time rendering of amount of time left
 */
class CambionCycle extends WorldstateObject {
  /**
   * @param   {CetusCycle}        cetusCycle Match data from cetus cycle for data
   * @param   {Object}            deps            The dependencies object
   * @param   {TimeDateFunctions} deps.timeDate   The time and date functions
   */
  constructor(cetusCycle, { timeDate }) {
    super({ _id: { $oid: 'cambionCycle0' } }, { timeDate });

    ({ activation: this.activation, expiry: this.expiry, timeLeft: this.timeLeft } = cetusCycle);

    this.state = cetusCycle.isDay ? 'fass' : 'vome';
    this.active = this.state;

    this.id = `cambionCycle${this.expiry.getTime()}`;
  }

  /**
   * Get whether the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }
}

module.exports = CambionCycle;

},{"./WorldstateObject":242}],209:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

const nightTime = 3000;

const maximums = {
  day: 6000000,
  night: 3000000,
};

/**
 * Represents the current Earth Day/Night Cycle
 * @extends {WorldstateObject}
 */
class CetusCycle extends WorldstateObject {
  /**
   * @param   {Date}              bountiesEndDate The end date for Ostron bounties
   * @param   {Object}            deps            The dependencies object
   * @param   {MarkdownSettings}  deps.mdConfig   The markdown settings
   * @param   {TimeDateFunctions} deps.timeDate   The time and date functions
   */
  constructor(bountiesEndDate, { mdConfig, timeDate }) {
    super({ _id: { $oid: 'cetusCycle0' } }, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The end of the Ostron bounties timer (marks the end of night)
     * @type {Date}
     * @private
     */
    this.bountiesEndDate = bountiesEndDate;
    Object.defineProperty(this, 'bountiesEndDate', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The current cetus cycle, for calculating the other fields
     * @type {Object}
     * @private
     */
    const ec = this.getCurrentCetusCycle();
    Object.defineProperty(this, 'ec', { enumerable: false, configurable: false });

    /**
     * The date and time at which the event ends
     * @type {Date}
     */
    this.expiry = ec.expiry;

    /**
     * The date and time at which the event started
     * @type {Date}
     */
    this.activation = new Date(ec.start);

    /**
     * Whether it's daytime
     * @type {boolean}
     */
    this.isDay = ec.dayTime;

    /**
     * Current cycle state. One of `day`, `night`
     * @type {string}
     */
    this.state = ec.state;

    /**
     * Time remaining string
     * @type {string}
     */
    this.timeLeft = ec.timeLeft;

    /**
     * Whether this is for Cetus Cycle
     * @type {boolean}
     */
    this.isCetus = true;

    this.id = `cetusCycle${this.expiry.getTime()}`;

    this.shortString = `${this.timeLeft.replace(/\s\d*s/gi, '')} to ${this.isDay ? 'Night' : 'Day'}`;
  }

  /**
   * Get whether or not the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  getCurrentCetusCycle() {
    const now = Date.now();
    const bountiesClone = this.bountiesEndDate;
    bountiesClone.setSeconds(0);
    let millisLeft = this.timeDate.fromNow(bountiesClone);
    const secondsToNightEnd = (millisLeft / 1000).toFixed(0);
    const dayTime = secondsToNightEnd > nightTime;

    const secondsRemainingInCycle = dayTime ? secondsToNightEnd - nightTime : secondsToNightEnd;
    millisLeft = secondsRemainingInCycle * 1000;
    const minutesCoef = 1000 * 60;
    const expiry = new Date(Math.round((now + millisLeft) / minutesCoef) * minutesCoef);
    const state = dayTime ? 'day' : 'night';

    return {
      dayTime,
      timeLeft: this.timeDate.timeDeltaToString(millisLeft),
      expiry,
      expiresIn: millisLeft,
      state,
      start: expiry.getTime() - maximums[state],
    };
  }

  /**
   * The event's string representation
   * @returns {string}
   */
  toString() {
    const lines = [
      `Operator, Cetus is currently in ${this.state}time`,
      `Time remaining until ${this.isDay ? 'night' : 'day'}: ${this.timeLeft}`,
    ];

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = CetusCycle;

},{"./WorldstateObject":242}],210:[function(require,module,exports){
'use strict';

/**
 * Describes a world challenge instance
 */
class ChallengeInstance {
  /**
   * @param   {Object}             data            The challenge instance data
   * @param   {Dependency}         deps            The dependencies object
   * @param   {Translator}         deps.translator The string translator
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { translator, locale }) {
    /**
     * Type of challenge
     * @type {string}
     */
    this.type = translator.languageString(data.Type, locale);

    /**
     * Minimum enemy level to fulfill challenge
     * @type {Number}
     */
    this.minEnemyLevel = Number(data.MinimumEnemyLevel);

    /**
     * Required number of units to complete challenge
     * @type {Number}
     */
    this.requiredAmount = Number(data.RequiredCount);

    /**
     * Waypoint for amount of units between progression updates
     * @type {Number}
     */
    this.progressAmount = Number(data.ProgressIndicatorFreq);

    /**
     * Required damage type
     * @type {String|undefined}
     */
    this.damageType = data.DamageType ? translator.languageString(data.DamageType, locale) : undefined;

    /**
     * Target to fulfill challenge
     * @type {string}
     */
    this.target =
      data.VictimType && data.VictimType[0]
        ? translator.languageString(data.VictimType[0], locale)
        : // eslint-disable-next-line no-underscore-dangle
          data.Script._faction;
  }

  toString() {
    return `Task: ${this.type}\nAmount: ${this.requiredAmount}\nTarget: ${this.target}`;
  }
}

module.exports = ChallengeInstance;

},{}],211:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents a Conclave challenge
 * @extends {WorldstateObject}
 */
class ConclaveChallenge extends WorldstateObject {
  /**
   * @param   {Object}             data            The challenge data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, locale }) {
    super(data, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * Time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The time and date at which the challenge expires
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.endDate);

    /**
     * The time and date at which the challenge starts
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.startDate);

    /**
     * The number of times that the challenge's objective needs to be completed
     * @type {number}
     */
    this.amount = data.params[0].v;

    /**
     * The PVP mode that the challenge must be completed in
     * @type {string}
     */
    this.mode = translator.conclaveMode(data.PVPMode, locale);

    /**
     * The challenge's category (daily, weekly...)
     * @type {string}
     */
    this.category = translator.conclaveCategory(data.Category, locale);

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getEndString();

    /**
     * Whether or not this is expired (at time of object creation)
     * @type {boolean}
     */
    this.expired = this.isExpired();

    /**
     * Whether or not this is a daily conclave challenge.
     * @type {boolean}
     */
    this.daily = this.isDaily();

    /**
     * Whether or not this is the root challenge
     * @type {boolean}
     */
    this.rootChallenge = this.isRootChallenge();

    /**
     * the end string
     * @type {string}
     */
    this.endString = this.getEndString();

    /**
     * The challenge's description text
     * @type {string}
     */
    this.description = undefined;

    /**
     * Title of the challenge
     * @type {string}
     */
    this.title = undefined;

    /**
     * Standing granted by completing challenge.
     * @type {Number}
     */
    this.standing = undefined;

    const challenge = translator.conclaveChallenge(data.challengeTypeRefID, locale);

    ({ title: this.title, description: this.description, standing: this.standing } = challenge);

    /**
     * This challenge as a string
     * @type {string}
     */
    this.asString = this.toString();
  }

  /**
   * Get whether or not the challenge is daily
   * @returns {boolean}
   */
  isDaily() {
    return this.category.toLowerCase() === 'day';
  }

  /**
   * Get whether or not this is the weekly root challenge
   * @returns {boolean}
   */
  isRootChallenge() {
    return this.category.toLowerCase() === 'week_root';
  }

  /**
   * Get whether or not the challenge has expired
   * @returns {boolean}
   */
  isExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * Get a string indicating how much time is left before the challenge expires
   * @returns {string}
   */
  getEndString() {
    const timeDelta = this.timeDate.fromNow(this.expiry);
    return this.timeDate.timeDeltaToString(timeDelta);
  }

  /**
   * The conclave challenge's string representation
   * @returns {string}
   */
  toString() {
    return `${this.description} on ${this.mode} ${this.amount} times in a ${this.category}`;
  }
}

module.exports = ConclaveChallenge;

},{"./WorldstateObject":242}],212:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents enemy construction progress
 * @extends {WorldstateObject}
 */
class ConstructionProgress extends WorldstateObject {
  /**
   * @param   {Object}             data            The construction data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   */
  constructor(data, { mdConfig, timeDate }) {
    super(data, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    this.fomorianProgress = (data.ProjectPct[0] || 0.0).toFixed(2);
    this.razorbackProgress = (data.ProjectPct[1] || 0.0).toFixed(2);
    this.unknownProgress = (data.ProjectPct[2] || 0.0).toFixed(2);
  }

  /**
   * The alert's string representation
   * @returns {string}
   */
  toString() {
    return (
      `${this.mdConfig.codeMulti}Fomorian: ${this.fomorianProgress}%${this.mdConfig.lineEnd}Razorback: ` +
      `${this.razorbackProgress}%${this.mdConfig.lineEnd}Unknown: ${this.unknownProgress}%${this.mdConfig.blockEnd}`
    );
  }
}

module.exports = ConstructionProgress;

},{"./WorldstateObject":242}],213:[function(require,module,exports){
'use strict';

/**
 * Represents a daily deal
 */
class DailyDeal {
  /**
   * @param   {Object}            data            The deal data
   * @param   {Object}            deps            The dependencies object
   * @param   {MarkdownSettings}  deps.mdConfig   The markdown settings
   * @param   {Translator}        deps.translator The string translator
   * @param   {TimeDateFunctions} deps.timeDate   The time and date functions
   * @param   {string}            deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, locale }) {
    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The item that is being offered in the sale
     * @type {string}
     */
    this.item = translator.languageString(data.StoreItem, locale);

    /**
     * The uniqueName for the item on sale.
     * @type {string}
     */
    this.uniqueName = data.StoreItem;

    /**
     * The date and time at which the deal will expire
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.Expiry);

    /**
     * The date and time at which the deal will or did start
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.Activation);

    /**
     * The item's original price
     * @type {number}
     */
    this.originalPrice = data.OriginalPrice;

    /**
     * The item's discounted price
     * @type {number}
     */
    this.salePrice = data.SalePrice;

    /**
     * The number of available items on sale
     * @type {number}
     */
    this.total = data.AmountTotal;

    /**
     * The number of items that have already been sold
     * @type {number}
     */
    this.sold = data.AmountSold;

    /**
     * Unique identifier for this deal built from the end time and item
     * @type {string}
     */
    this.id = `${data.StoreItem.split('/').slice(-1)[0]}${this.expiry.getTime()}`;

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();

    /**
     * Percent discount
     * @type {number}
     */
    this.discount = data.Discount;
  }

  /**
   * Get a string indicating how much time is left before the deal expires
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Returns a string representation of the daily deal
   * @returns {string}
   */
  toString() {
    const lines = [
      `Daily Deal: ${this.item}`,
      `${this.salePrice}p (original ${this.originalPrice}p)`,
      `${this.sold} / ${this.total} sold`,
      `Expires in ${this.getETAString()}`,
    ];
    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = DailyDeal;

},{}],214:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents a dark sector
 * @extends {WorldstateObject}
 */
class DarkSector extends WorldstateObject {
  /**
   * @param   {Object}             data                  The dark sector data
   * @param   {Object}             deps                  The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig         The markdown settings
   * @param   {Translator}         deps.translator       The string translator
   * @param   {TimeDateFunctions}  deps.timeDate         The time and date functions
   * @param   {Mission}            deps.Mission          The mission parser
   * @param   {DarkSectorBattle}   deps.DarkSectorBattle The dark sector battle parser
   * @param   {Reward}             deps.Reward           The reward parser
   * @param   {string}             deps.locale           Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, Mission, DarkSectorBattle, Reward, locale }) {
    super(data, { timeDate });

    const deps = {
      translator,
      Mission,
      DarkSectorBattle,
      mdConfig,
      Reward,
      timeDate,
      locale,
    };

    /**
     * The dark sector credit tax rate
     * @type {number}
     */
    this.creditTaxRate = data.DefenderInfo.CreditsTaxRate;

    /**
     * The dark sector credit tax rate for clan/alliance members
     * @type {number}
     */
    this.memberCreditsTaxRate = data.DefenderInfo.MemberCreditsTax;

    /**
     * The dark sector resource tax rate
     * @type {number}
     */
    this.itemsTaxRate = data.DefenderInfo.ItemsTaxRate;

    /**
     * The dark sector resource tax rate for clan/alliance members
     * @type {number}
     */
    this.memberItemsTaxRate = data.DefenderInfo.MemberItemsTaxRate;

    /**
     * Whether the dark sector holder is an alliance or not
     * @type {Boolean}
     */
    this.isAlliance = data.DefenderInfo.IsAlliance;

    /**
     * The current holder of the dark sector
     * @type {string}
     */
    this.defenderName = data.DefenderInfo.Name;

    /**
     * The remaining health of the current solar rail
     * @type {number}
     */
    this.defenderPoolRemaining = Number.parseFloat(data.DefenderInfo.StrengthRemaining);

    /**
     * The maximum health of the solar rail
     * @type {number}
     */
    this.defenderMaxPool = Number.parseFloat(data.DefenderInfo.MaxStrength);

    /**
     * The date and time at which the rail was deployed
     * @type {Date}
     */
    this.defenderDeployemntActivation = data.DefenderInfo.DeploymentActivationTime
      ? timeDate.parseDate(data.DefenderInfo.DeploymentActivationTime)
      : 0;

    /**
     * The solar rail type
     * @type {string}
     */
    this.railType = translator.languageString(data.DefenderInfo.RailType, locale);

    /**
     * The MOTD set by the dark sector holder
     * @type {string}
     */
    this.defenderMOTD = data.DefenderInfo.MOTD;

    /**
     * The player who deployed the solar rail
     * @type {string}
     */
    this.deployerName = data.DefenderInfo.DeployerName;

    /**
     * The clan of the player who deployed the solar rail
     * @type {string}
     */
    this.deployerClan = data.DefenderInfo.DeployerClan;

    this.defenderRailHealReserve = data.DefenderInfo.RailHealReserve;

    this.healRate = Number.parseFloat(data.DefenderInfo.healRate);

    this.damagePerMission = data.DefenderInfo.DamagePerMission;

    /**
     * The dark sector's mission
     * @type {?Mission}
     */
    this.mission = data.DefenderInfo.MissionInfo ? new Mission(data.DefenderInfo.MissionInfo, deps) : undefined;

    this.battlePayReserve = data.DefenderInfo.BattlePayReserve;

    /**
     * The battle pay per mission offered to players
     * @type {number}
     */
    this.perMissionBattlePay = data.DefenderInfo.MissionBattlePay;

    /**
     * The player who set the battle pay
     * @type {string}
     */
    this.battlePaySetBy = data.DefenderInfo.BattlePaySetBy;

    /**
     * The clan of the player who set the battle pay
     * @type {string}
     */
    this.battlePaySetByClan = data.DefenderInfo.BattlePaySetByClan;

    /**
     * The player who changed the tax
     * @type {string}
     */
    this.taxChangedBy = data.DefenderInfo.TaxLastChangedBy;

    /**
     * The clan of the player who set the tax
     * @type {string}
     */
    this.taxChangedByClan = data.DefenderInfo.TaxLastChangedByClan;

    /**
     * The history of the dark sector
     * @type {Array.<DarkSectorBattle>}
     */
    this.history = data.History ? data.History.map((b) => new DarkSectorBattle(b, deps)) : [];
  }
}

module.exports = DarkSector;

},{"./WorldstateObject":242}],215:[function(require,module,exports){
'use strict';

/**
 * Represents a battle over a dark sector
 */
class DarkSectorBattle {
  /**
   * @param   {Object} data The battle data
   */
  constructor(data, { timeDate }) {
    /**
     * The defenders of the dark sector
     * @type {string}
     */
    this.defender = data.Def;

    /**
     * Whether the defenders are an alliance or not
     * @type {boolean}
     */
    this.defenderIsAlliance = data.DefAli;

    /**
     * The attackers of the dark sector
     * @type {string}
     */
    this.attacker = data.Att;

    /**
     * Whether the attackers are an alliance or not
     * @type {boolean}
     */
    this.attackerIsAlliance = data.AttAli;

    const defId = data.DefId.$oid || data.DefId.$id;
    const winId = data.WinId.$oid || data.WinId.$id;

    /**
     * The winner of the battle
     * @type {string}
     */
    this.winner = defId === winId ? this.defender : this.attacker;

    /**
     * The date and time at which the battle started
     * @type {Date}
     */
    this.start = timeDate.parseDate(data.Start);

    /**
     * The date and time at which the battle ended
     * @type {Date}
     */
    this.end = timeDate.parseDate(data.End);
  }
}

module.exports = DarkSectorBattle;

},{}],216:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

const cycleTime = 36000;
const stateTime = 7200;

const states = ['sorrow', 'fear', 'joy', 'anger', 'envy'];

const getStageInfo = () => {
  const cycleDelta = (Math.floor(Date.now() / 1000) - 52) % cycleTime;
  const stateInd = Math.floor(cycleDelta / stateTime);
  const stateDelta = cycleDelta % stateTime;
  const untilNext = stateTime - stateDelta;
  const expiry = new Date(Date.now() + untilNext * 1000);
  const activation = new Date(expiry.getTime() - stateTime * 1000);
  return {
    state: states[stateInd],
    expiry,
    activation,
  };
};

/**
 * @typedef {WorldstateObject} DuviriCycle
 * @extends {WorldstateObject}
 */
class DuviriCycle extends WorldstateObject {
  constructor({ timeDate, translator }) {
    super({ _id: { $oid: 'duviriCycle0' } }, { timeDate, translator });
    const { activation, expiry, state } = getStageInfo();

    /**
     * When the cycle start(s/ed)
     * @type {Date}
     */
    this.activation = activation;
    /**
     * When the cycle end(s/ed)
     * @type {Date}
     */
    this.expiry = expiry;
    /**
     * Current stage key
     * @type {string}
     */
    this.state = state;

    this.id = `duviriCycle${this.state}${this.expiry.getTime()}`;
  }

  toString() {
    return `${this.translator.toTitleCase(this.state)} spiral. ${this.translator.toTitleCase(
      states[(states.indexOf(this.state) + 1) % 5]
    )} in ${this.timeDate.timeDeltaToString(new Date(this.expiry).getTime() - Date.now())}`;
  }
}

module.exports = DuviriCycle;

},{"./WorldstateObject":242}],217:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

function getCurrentEarthCycle() {
  const now = Date.now();
  const cycleSeconds = Math.floor(now / 1000) % 28800; // One cycle = 8 hours = 28800 seconds
  const dayTime = cycleSeconds < 14400;

  let secondsLeft = 14400 - (cycleSeconds % 14400);
  const millisLeft = secondsLeft * 1000;
  const expiry = new Date(now + secondsLeft * 1000);

  const minutesCoef = 1000 * 60;
  const rounded = new Date(Math.round((now + millisLeft) / minutesCoef) * minutesCoef);

  const timePieces = [];
  if (secondsLeft > 3600) {
    timePieces.push(`${Math.floor(secondsLeft / 3600)}h`);
    secondsLeft %= 3600;
  }
  if (secondsLeft > 60) {
    timePieces.push(`${Math.floor(secondsLeft / 60)}m`);
    secondsLeft %= 60;
  }
  timePieces.push(`${secondsLeft}s`);

  return {
    dayTime,
    timeLeft: timePieces.join(' '),
    expiry,
    expiresIn: millisLeft,
    rounded,
    state: dayTime ? 'day' : 'night',
    start: new Date(expiry.getTime() - 1000 * 60 * 60 * 4), // start is 4h before end
  };
}

/**
 * Represents the current Earth Day/Night Cycle
 * @extends {WorldstateObject}
 */
class EarthCycle extends WorldstateObject {
  /**
   * @param   {Object}            data            The event data
   * @param   {Object}            deps            The dependencies object
   * @param   {MarkdownSettings}  deps.mdConfig   The markdown settings
   */
  constructor({ mdConfig, timeDate }) {
    super({ _id: { $oid: 'earthCycle0' } }, { timeDate });

    const ec = getCurrentEarthCycle();

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The date and time at which the event ends
     * @type {Date}
     */
    this.expiry = ec.expiry;

    /**
     * The date and time at which the event started
     * @type {Date}
     */
    this.activation = ec.start;

    /**
     * Whether or not this it's daytime
     * @type {boolean}
     */
    this.isDay = ec.dayTime;

    /**
     * Current cycle state. One of `day`, `night`
     * @type {string}
     */
    this.state = ec.state;

    /**
     * Time remaining string
     * @type {string}
     */
    this.timeLeft = ec.timeLeft;

    this.id = `earthCycle${ec.rounded.getTime()}`;
  }

  /**
   * Get whether or not the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * The event's string representation
   * @returns {string}
   */
  toString() {
    const lines = [
      `Operator, Earth is currently in ${this.dayTime ? 'Day' : 'Night'}time`,
      `Time remaining until ${this.dayTime ? 'night' : 'day'}: ${this.timeLeft}`,
    ];

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = EarthCycle;

},{"./WorldstateObject":242}],218:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents a fissure mission
 * @extends {WorldstateObject}
 */
class Fissure extends WorldstateObject {
  /**
   * @param   {Object}             data            The fissure data
   * @param   {Object}             deps            The dependencies object
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { translator, timeDate, locale }) {
    super(data, { timeDate });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The node where the fissure has appeared
     * @type {string}
     */
    this.node = translator.node(data.Node, locale);

    /**
     * The fissure mission type
     * @type {string}
     */
    this.missionType = data.MissionType
      ? translator.missionType(data.MissionType, locale)
      : translator.nodeMissionType(data.Node, locale);

    /**
     * The fissure mission type key
     * @type {string}
     */
    this.missionKey = data.MissionType
      ? translator.missionType(data.MissionType)
      : translator.nodeMissionType(data.Node);

    /**
     * The faction controlling the node where the fissure has appeared
     * @type {string}
     */
    this.enemy = translator.nodeEnemy(data.Node, locale);

    /**
     * Faction enum for the faction controlling the node where the fissure has appeared
     * @type {string}
     */
    this.enemyKey = translator.nodeEnemy(data.Node);

    /**
     * The node key where the fissure has appeared
     * @type {string}
     */
    this.nodeKey = translator.node(data.Node);

    /**
     * The fissure's tier
     * @type {string}
     */
    this.tier = translator.fissureModifier(data.Modifier || data.ActiveMissionTier, locale);

    /**
     * The fissure's tier as a number
     * @type {number}
     */
    this.tierNum = translator.fissureTier(data.Modifier || data.ActiveMissionTier, locale);

    /**
     * The date and time at which the fissure appeared
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.Activation);

    /**
     * The date and time at which the fissure will disappear
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.Expiry);

    /**
     * Whether this is expired (at time of object creation)
     * @type {boolean}
     */
    this.expired = this.getExpired();

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();

    /**
     * Whether this fissure corresponds to a RailJack Void Storm
     * @type {Boolean}
     */
    this.isStorm = !!data.ActiveMissionTier;

    /**
     * Whether this fissure is a Steel Path fissure
     * @type {boolean}
     */
    this.isHard = !!data.Hard;
  }

  /**
   * Get whether this deal has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * Get a string representation of how long the void fissure will remain active
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Returns a string representation of the fissure
   * @returns {string}
   */
  toString() {
    return `[${this.getETAString()}] ${this.tier} fissure at ${this.node} - ${this.enemy} ${this.missionType}`;
  }
}

module.exports = Fissure;

},{"./WorldstateObject":242}],219:[function(require,module,exports){
'use strict';

/**
 * Represents a flash sale
 */
class FlashSale {
  /**
   * @param   {Object}             data            The flash sale data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { translator, mdConfig, timeDate, locale }) {
    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The item being offered in the flash sale
     * @type {string}
     */
    this.item = translator.languageString(data.TypeName, locale);

    /**
     * The date and time at which the sale will end
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.EndDate);

    /**
     * The date and time at which the sale will or did start
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.StartDate);

    /**
     * The item's discount percentage
     * @type {number}
     */
    this.discount = data.Discount;

    /**
     * The item's discounted credit price
     * @type {number}
     */
    this.regularOverride = data.RegularOverride;

    /**
     * The item's discounted platinum price
     * @type {number}
     */
    this.premiumOverride = data.PremiumOverride;

    /**
     * Whether this item is show in the in-game market
     * @type {boolean}
     */
    this.isShownInMarket = data.ShowInMarket;

    /**
     * Whether this item is featured in the in-game market
     * @type {boolean}
     */
    this.isFeatured = data.Featured;

    /**
     * Whether this item is marked as popular in the in-game market
     * @type {boolean}
     */
    this.isPopular = data.Popular;

    /**
     * Unique identifier for this sale built from the end time and reward
     * @type {string}
     */
    this.id = `${data.TypeName.split('/').slice(-1)[0]}${this.expiry.getTime()}`;

    /**
     * Whether or not this is expired (at time of object creation)
     * @type {boolean}
     */
    this.expired = this.getExpired();

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();
  }

  /**
   * Get how much time is left before the deal expires
   * @returns {string}
   */
  getETAString() {
    const timeDelta = this.timeDate.fromNow(this.expiry);
    return this.timeDate.timeDeltaToString(timeDelta);
  }

  /**
   * Get whether or not this deal has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * Returns a string representation of the flash sale
   * @returns {string}
   */
  toString() {
    const lines = [`${this.item}, ${this.premiumOverride}p`, `Expires in ${this.getETAString()}`];

    if (this.discount) {
      lines.unshift(`${this.discount}% off!`);
    } else if (this.isShownInMarket) {
      lines.unshift('**ShowInMarket**');
    } else if (this.isPopular) {
      lines.unshift('**Popular**');
    } else if (this.isFeatured) {
      lines.unshift('**Featured**');
    }

    return `${this.mdConfig.codeMulti}${lines.join(this.mdConfig.lineEnd)}${this.mdConfig.blockEnd}`;
  }
}

module.exports = FlashSale;

},{}],220:[function(require,module,exports){
'use strict';

/**
 * Represents an upgrade that applies to all players
 */
class GlobalUpgrade {
  /**
   * @param   {Object}             data            The global upgrade data
   * @param   {Object}             deps            The dependencies object
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { translator, timeDate, mdConfig, locale }) {
    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date at which the global upgrade starts being active
     * @type {Date}
     */
    this.start = timeDate.parseDate(data.Activation);

    /**
     * The time and date at which the global upgrade stops being active
     * @type {Date}
     */
    this.end = timeDate.parseDate(data.ExpiryDate);

    /**
     * The effect of the upgrade
     * @type {string}
     */
    this.upgrade = translator.upgrade(data.UpgradeType, locale);

    /**
     * The operation type
     * @type {string}
     */
    this.operation = translator.operation(data.OperationType, locale);

    /**
     * Symbol for operation
     * @type {string}
     */
    this.operationSymbol = translator.operationSymbol(data.OperationType, locale);

    /**
     * The operation value
     * @type {string}
     */
    this.upgradeOperationValue = data.Value;

    /**
     * Whether or not this is expired (at time of object creation)
     * @type {boolean}
     */
    this.expired = this.getExpired();

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();

    /**
     * Plaintext description of upgrade
     * @type {string}
     */
    this.desc = this.compileDesription();
  }

  /**
   * Get whether or not the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.end) < 0;
  }

  /**
   * Get a string indicating how long it will take for the upgrade to expire
   * @returns {string}
   */
  getETAString() {
    const timeDelta = this.timeDate.fromNow(this.end);
    return this.timeDate.timeDeltaToString(timeDelta);
  }

  /**
   * Turn the global upgrade into a plain text description
   * @returns {string} Descriptio
   */
  compileDesription() {
    return `${this.upgradeOperationValue}${this.operationSymbol} ${this.upgrade} for ${this.eta}`;
  }

  /**
   * Returns a string representation of the upgrade
   * @returns {string}
   */
  toString() {
    return (
      `${this.mdConfig.codeMulti}[${this.getETAString()}] ${this.upgrade}` +
      `${this.operation} ${this.upgradeOperationValue}${this.mdConfig.blockEnd}`
    );
  }
}

module.exports = GlobalUpgrade;

},{}],221:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * An invasion participant
 * @typedef {Object} Invasion~Participant
 * @property {string} reward Reward for supporting this participant in the invasion
 * @property {string} faction Faction of this participant (localized)
 * @property {string} factionKey Faction of this participant (always English)
 */

/**
 * Represents an invasion
 */
class Invasion extends WorldstateObject {
  /**
   * @param   {Object}             data            The invasion data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {Reward}             deps.Reward     The Reward parser
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, Reward, locale }) {
    super(data, { timeDate });

    const opts = {
      mdConfig,
      translator,
      timeDate,
      Reward,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The node where the invasion is taking place
     * @type {string}
     */
    this.node = translator.node(data.Node, locale);

    /**
     * The node key where the invasion is taking place
     * @type {string}
     */
    this.nodeKey = translator.node(data.Node);

    /**
     * The invasion's description
     * @type {string}
     */
    this.desc = translator.languageString(data.LocTag, locale);

    /**
     * The attacker's reward
     * @type {Reward}
     */
    this.attackerReward = new Reward(data.AttackerReward, opts);

    /**
     * The attacking faction
     * @type {string}
     */
    this.attackingFaction = translator.faction(data.DefenderMissionInfo.faction, locale);

    /**
     * Invasion attacker
     * @type {Invasion~Partipant}
     */
    this.attacker = {
      reward: this.attackerReward,
      faction: this.attackingFaction,
      factionKey: translator.faction(data.DefenderMissionInfo.faction, 'en'),
    };

    /**
     * The defender's reward
     * @type {Reward}
     */
    this.defenderReward = new Reward(data.DefenderReward, opts);

    /**
     * The defending faction
     * @type {string}
     */
    this.defendingFaction = translator.faction(data.AttackerMissionInfo.faction, locale);

    /**
     * Invasion defender
     * @type {Partipant}
     */
    this.defender = {
      reward: this.defenderReward,
      faction: this.defendingFaction,
      factionKey: translator.faction(data.AttackerMissionInfo.faction, 'en'),
    };

    /**
     * Whether this invasion is against the infestation
     * @type {boolean}
     */
    this.vsInfestation = /infest/i.test(data.DefenderMissionInfo.faction);

    /**
     * The time at which the invasion starts
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.Activation);

    /**
     * The signed count of completed runs. Supporting the attackers makes the count go up,
     * supporting the defenders makes it go down
     * @type {number}
     */
    this.count = data.Count;

    /**
     * The number of runs that one side needs to win
     * @type {number}
     */
    this.requiredRuns = data.Goal;

    /**
     * The invasion's completion percentage. Defenders win if it gets to 0
     * Grineer vs. Corpus invasions start at 50, Infested invasions start at 100
     * @type {number}
     */
    this.completion = (1 + data.Count / data.Goal) * (this.vsInfestation ? 100 : 50);

    /**
     * Whether the invasion has finished
     * @type {boolean}
     */
    this.completed = data.Completed;

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();

    /**
     * An array containing the types of all of the invasions's rewards
     * @type {Array.<string>}
     */
    this.rewardTypes = this.getRewardTypes();
  }

  /**
   * Whether or not the attackers are winning.
   * This is always false when the infestation is attacking
   * @returns {boolean}
   */
  isAttackerWinning() {
    return this.count > 0;
  }

  /**
   * Get an estimation of how much time is left before the invasion ends in milliseconds
   * @returns {number}
   */
  getRemainingTime() {
    const completedRuns = Math.abs(this.count);
    const elapsedMillis = this.timeDate.toNow(this.activation);
    const remainingRuns = this.requiredRuns - completedRuns;
    return remainingRuns * (elapsedMillis / completedRuns);
  }

  /**
   * Get a string estimating how much time is left before the invasion ends
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.getRemainingTime());
  }

  /**
   * Get the types of the items being rewarded in the invasion
   * @returns {Array.<string>}
   */
  getRewardTypes() {
    return this.attacker.reward.getTypes().concat(this.defender.reward.getTypes());
  }

  /**
   * The invasion's string representation
   * @returns {string}
   */
  toString() {
    let lines = [];
    if (this.vsInfestation) {
      lines = [
        this.defenderReward.toString(),
        `${this.desc} on ${this.node}`,
        `${Math.round(this.completion * 100) / 100}% - ETA: ${this.getETAString()}`,
      ];
    } else {
      lines = [
        `${this.attackingFaction} (${this.attackerReward}) vs. ${this.defendingFaction} (${this.defenderReward})`,
        `${this.node} - ${this.desc}`,
        `${Math.round(this.completion * 100) / 100}% - ETA: ${this.getETAString()}`,
      ];
    }
    return `${this.mdConfig.codeMulti}${lines.join(this.mdConfig.lineEnd)}${this.mdConfig.blockEnd}`;
  }
}

module.exports = Invasion;

},{"./WorldstateObject":242}],222:[function(require,module,exports){
'use strict';

/**
 * External mission data retrieved from https://10o.io/kuvalog.json
 * @typedef {Object} ExternalMission
 * @property {Date} activation start time
 * @property {Date} expiry end timer
 * @property {string} node formatted node name with planet
 * @property {string} enemy Enemy on tile
 * @property {string} type Mission type of node
 * @property {boolean} archwing whether or not the tile requires archwing
 * @property {boolean} sharkwing whether or not the tile requires
 *    sumbersible archwing
 */

/**
 * Stores and parses kuva data from https://10o.io/kuvalog.json
 * @typedef {Object} Kuva
 * @property {ExternalMission[]} kuva currently active kuva missions
 * @property {ExternalMission} arbitration current arbitration
 */

const HOURS_2 = 7200000;

/**
 * Truncate time for a semlar-provided mission
 * @param  {Object} mission parsed mission with re-aligned field names
 */
const truncateTime = (mission) => {
  mission.expiry.setHours(mission.activation.getHours() + 1);
  mission.expiry.setMinutes(4);
  mission.expiry.setSeconds(0);
  mission.expiry.setMilliseconds(0);
  mission.activation.setMinutes(mission.activation.getMinutes() + 5.1);
};

/**
 * Scrub unnecessary details from the mission
 * @param  {Object} mission parsed mission with re-aligned field names
 */
const scrub = (mission) => {
  /* eslint-disable no-param-reassign */
  delete mission.solnode;
  delete mission.name;
  delete mission.node_type;
  delete mission.tile;
  delete mission.planet;
  /* eslint-enable no-param-reassign */
};

const hash = (str) => require('crypto').createHash('sha256').update(str, 'utf8').digest('hex');

/**
 * Parse kuva & arbitration data
 * @param  {Object} data       Data to split for kuva/arbitration
 * @param  {Object.<function>} translator Translator functions
 * @param  {string} locale     locale to translate
 * @returns {Kuva}           Split parsed data
 */
const parse = (data, translator, locale) => {
  const parsed = { kuva: [], arbitration: {} };
  const now = new Date();
  data.forEach((mission) => {
    const p = {
      activation: new Date(mission.start),
      expiry: new Date(mission.end),
      ...mission.solnodedata,
      node: translator.node(mission.solnode, locale),
      nodeKey: translator.node(mission.solnode, 'en'),
      type: translator.nodeMissionType(mission.solnode, locale),
      typeKey: translator.nodeMissionType(mission.solnode, 'en'),
    };
    truncateTime(p);
    p.id = hash(JSON.stringify(p));
    p.expired = Date.now() - p.expiry.getTime() < 0;

    if (
      p.activation < now &&
      now < p.expiry &&
      new Date(p.activation.getTime() + HOURS_2) > now &&
      new Date(p.expiry.getTime() - HOURS_2) < now
    ) {
      if (mission.missiontype === 'EliteAlertMission') {
        // if the diff is less than 2 hours?
        parsed.arbitration = p;
      }
      if (mission.missiontype.startsWith('KuvaMission')) parsed.kuva.push(p);
    }
    scrub(p);
  });
  parsed.kuva = new Array(...new Set(parsed.kuva));

  return parsed;
};

/**
 * Stores and parses kuva data from https://10o.io/kuvalog.json
 * @property {ExternalMission[]} kuva currently active kuva missions
 * @property {ExternalMission} arbitration current arbitration
 */
module.exports = class Kuva {
  constructor({ kuvaData, translator, locale, logger }) {
    /**
     * The translation functions
     * @type {Translator}
     * @private
     */
    this.translator = translator;
    Object.defineProperty(this, 'translator', { enumerable: false, configurable: false });

    /**
     * The locale to leverage for translations
     * @type {string}
     * @private
     */
    this.locale = locale;
    Object.defineProperty(this, 'locale', { enumerable: false, configurable: false });

    if (!kuvaData) {
      // eslint-ignore-next-line no-console
      logger.debug('No defined kuva data, skipping data');
    } else {
      const parsed = parse(kuvaData, this.translator, this.locale);
      ({ kuva: this.kuva, arbitration: this.arbitration } = parsed);
    }
  }
};

},{"crypto":71}],223:[function(require,module,exports){
'use strict';

/**
 * Represents an in-game mission
 */
module.exports = class Mission {
  /**
   * @param   {Object}             data            The mission data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {Reward}             deps.Reward     The Reward parser
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, Reward, locale }) {
    const deps = {
      mdConfig,
      translator,
      Reward,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The mission's description
     * @type {?string}
     */
    this.description = translator.languageString(data.descText, locale);

    /**
     * The node where the mission takes place
     * @type {string}
     */
    this.node = translator.node(data.location || data.node, locale);

    /**
     * Unlocalized {@link mission#node}
     * @type {string}
     */
    this.nodeKey = translator.node(data.location || data.node, 'en');

    /**
     * The mission's type
     * @type {string}
     */
    this.type = translator.missionType(data.missionType, locale);

    /**
     * The mission's type
     * @type {string}
     */
    this.typeKey = translator.missionType(data.missionType, 'en');

    /**
     * The factions that the players must fight in the mission
     * @type {string}
     */
    this.faction = translator.faction(data.faction, locale);

    /**
     * The factions that the players must fight in the mission
     * @type {string}
     */
    this.factionKey = translator.faction(data.faction, 'en');

    /**
     * The mission's reward
     * @type {?Reward}
     */
    this.reward = data.missionReward ? new Reward(data.missionReward, deps) : undefined;

    /**
     * The minimum level of the enemies in the mission
     * @type {number}
     */
    this.minEnemyLevel = data.minEnemyLevel;

    /**
     * The maximum level of the enemies in the mission
     * @type {number}
     */
    this.maxEnemyLevel = data.maxEnemyLevel;

    /**
     * The number of waves that the players need to complete (undefined if not applicable)
     * @type {?number}
     */
    this.maxWaveNum = data.maxWaveNum;

    /**
     * The Mission's nightmare boolean
     * @type {boolean}
     */
    this.nightmare = data.nightmare || false;

    /**
     * The Mission's archwing requirement
     * @type {boolean}
     */
    this.archwingRequired = data.archwingRequired || false;

    /**
     * The Mission's sharkwing requirement
     * @type {boolean}
     */
    this.isSharkwing = data.isSharkwingMission || false;

    /**
     * Override for the map on this mission
     * @type {string}
     */
    this.levelOverride = translator.languageString(data.levelOverride, locale);

    /**
     * Enemy specification for the mission
     * @type {String}
     */
    this.enemySpec = translator.languageString(data.enemySpec, locale);

    /**
     * Array of strings denoting extra spawners for a mission
     * @type {string[]}
     */
    this.advancedSpawners = (data.advancedSpawners || []).map((spawner) => translator.languageString(spawner, locale));

    /**
     * Items required to enter the mission
     * @type {string[]}
     */
    this.requiredItems = (data.requiredItems || []).map((reqItem) => translator.languageString(reqItem, locale));

    /**
     * Whether or not the required items are consumed
     * @type {boolean}
     */
    this.consumeRequiredItems = data.consumeRequiredItems;

    /**
     * Target for the mission
     * @type {string}
     */
    this.target = translator.languageString(data.vipAgent, locale);

    /**
     * Whether or not leaders are always allowed
     * @type {boolean}
     */
    this.leadersAlwaysAllowed = data.leadersAlwaysAllowed;

    /**
     * A tag for the event that this corresponds to
     * @type {string}
     */
    this.goalTag = data.goalTag;

    /**
     * Affectors for this mission
     * @type {string[]}
     */
    this.levelAuras = (data.levelAuras || []).map((aura) => translator.languageString(aura, locale));

    /**
     * Only weapon allowed for the mission
     * @type {string}
     */
    this.exclusiveWeapon = translator.languageString(data.exclusiveWeapon, locale);
  }

  /**
   * The Mission's string representation
   * @returns {string}
   */
  toString() {
    const lines = [this.reward.toString()];

    lines.push(`${this.faction} (${this.type})`);
    lines.push(this.node);
    lines.push(`level ${this.minEnemyLevel} - ${this.maxEnemyLevel}`);

    return lines.join(this.mdConfig.lineEnd);
  }
};

},{}],224:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

const updateReg = /(update|hotfix)/i;
const primeAccessReg = /(access)/i;
const streamReg = /(devstream|prime-time|warframeinternational|stream)/i;
const langString = /(\/Lotus\/Language\/)/i;

/**
 * Represents a game news item
 * @extends {WorldstateObject}
 */
class News extends WorldstateObject {
  /**
   * @param   {Object}             data            The news data
   * @param   {Dependency}         deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {locale}             deps.locale     Locale to use for determining language
   */
  constructor(data, { mdConfig, translator, timeDate, locale }) {
    super(data, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The news message
     * @type {string}
     */
    this.message = (data.Messages.find((msg) => msg.LanguageCode === locale) || { Message: '' }).Message;
    if (langString.test(this.message)) {
      this.message = translator.languageString(this.message, locale);
    }

    /**
     * The link to the forum post
     * @type {string}
     */
    this.link = data.Prop;
    if ((!this.link || !this.link.length) && data.Links && data.Links.length) {
      this.link = (data.Links.find((l) => l.LanguageCode === locale) || { Link: 'https://www.warframe.com/' }).Link;
    }

    /**
     * The news's image link
     * @type {string}
     */
    this.imageLink = (data.ImageUrl || 'https://i.imgur.com/CNrsc7V.png')
      .replace('https://forums.warframe.com/applications/core/interface/imageproxy/imageproxy.php?img=', '')
      .replace(/&key=\w*/gi, '')
      .replace('http://', 'https://');

    /**
     * Whether this has priority over other news or not
     * @type {boolean}
     */
    this.priority = data.Priority;

    /**
     * The date at which the post was published
     * @type {Date}
     */
    this.date = timeDate.parseDate(data.Date);

    /**
     * The date at which the event starts
     * @type {?Date}
     */
    this.startDate = data.EventStartDate ? timeDate.parseDate(data.EventStartDate) : undefined;

    /**
     * The date at which the event ends
     * @type {?Date}
     */
    this.endDate = data.EventEndDate ? timeDate.parseDate(data.EventEndDate) : undefined;

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();

    /**
     * Whther or not this is an update news item
     * @type {boolean}
     */
    this.update = this.isUpdate();

    /**
     * Whther or not this is a prime access news item
     * @type {boolean}
     */
    this.primeAccess = this.isPrimeAccess();

    /**
     * Whether or not this is a stream
     * @type {boolean}
     */
    this.stream = this.isStream();

    /**
     * Translation of the news item
     * @type {Object.<string, string>}
     */
    this.translations = {};
    data.Messages.forEach((message) => {
      this.translations[message.LanguageCode] = message.Message;

      if (langString.test(message.Message)) {
        this.translations[message.LanguageCode] = translator.languageString(message.Message, message.LanguageCode);
      }
    });

    /**
     * The string representation of this object at creation
     * @type {string}
     */
    this.asString = this.toString();
  }

  /**
   * Get a string indicating how long it will take for the event to start or
   * how long it's been since the news went up
   * @returns {string}
   */
  getETAString() {
    if (this.endDate) {
      const timeDelta = this.timeDate.fromNow(this.endDate);
      return `in ${this.timeDate.timeDeltaToString(timeDelta)}`;
    }
    const timeDelta = this.timeDate.toNow(this.date);
    return `${this.timeDate.timeDeltaToString(timeDelta)} ago`;
  }

  /**
   * Whether or not this is about a game update
   * @returns {boolean}
   */
  isUpdate() {
    return updateReg.test(this.link);
  }

  /**
   * Whether or not this is about a new Prime Access
   * @returns {boolean}
   */
  isPrimeAccess() {
    return primeAccessReg.test(this.link);
  }

  /**
   * Whether or not this is about a new Prime Access
   * @returns {boolean}
   */
  isStream() {
    return streamReg.test(this.message);
  }

  /**
   * String representation
   * @returns {string}
   */
  toString() {
    return (
      `[${this.getETAString()}] ${this.mdConfig.linkBegin}${this.message}` +
      `${this.mdConfig.linkMid}${this.link}${this.mdConfig.linkEnd}`
    );
  }

  /**
   * The title of the news item in the specified language
   * @param {string} langCode Ex. 'es', 'de', 'fr'
   * @returns {string}
   */
  getTitle(langCode) {
    return langCode in this.translations ? this.translations[langCode] : this.message;
  }
}

module.exports = News;

},{"./WorldstateObject":242}],225:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');
const NightwaveChallenge = require('./NightwaveChallenge');

/**
 * Represents an alert
 * @extends {WorldstateObject}
 */
class Nightwave extends WorldstateObject {
  /**
   * @param   {Object}             data            The alert data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {Mission}            deps.Mission    The Mission parser
   * @param   {Reward}             deps.Reward     The Reward parser
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, Mission, Reward, locale }) {
    super(data, { timeDate });

    this.id = `nightwave${new Date(this.expiry).getTime()}`;

    const deps = {
      mdConfig,
      translator,
      timeDate,
      Mission,
      Reward,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The current season. 0-indexed.
     * @type {Number}
     */
    this.season = data.Season;

    /**
     * Descriptor for affiliation
     * @type {string}
     */
    this.tag = translator.languageString(data.AffiliationTag, locale);

    /**
     * The current season's current phase. 0-indexed.
     * @type {Number}
     */
    this.phase = data.Phase;

    /**
     * Misc params provided.
     * @type {Object}
     */
    this.params = JSON.parse(data.Params || '{}');

    this.possibleChallenges = (data.Challenges || [])
      .map((challenge) => new NightwaveChallenge(challenge, deps))
      .filter((challenge) => challenge);

    this.activeChallenges = (data.ActiveChallenges || [])
      .map((challenge) => new NightwaveChallenge(challenge, deps))
      .filter((challenge) => challenge);

    /**
     * An array containing the types of all of the alert's rewards
     * @type {Array.<string>}
     */
    this.rewardTypes = this.getRewardTypes().length ? this.getRewardTypes() : ['credits'];
  }

  /**
   * Get a string indicating how much time is left before the alert expires
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Get an array containing the types of all of the nightwave season's rewards
   * @returns {Array.<string>}
   */
  // eslint-disable-next-line class-methods-use-this
  getRewardTypes() {
    return [];
  }

  /**
   * The alert's string representation
   * @returns {string}
   */
  // eslint-disable-next-line class-methods-use-this
  toString() {
    return '';
  }
}

module.exports = Nightwave;

},{"./NightwaveChallenge":226,"./WorldstateObject":242}],226:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

const repBase = 1000;

/**
 * Represents an alert
 * @extends {WorldstateObject}
 */
class NightwaveChallenge extends WorldstateObject {
  /**
   * @param   {Object}             data            The alert data
   * @param   {Object}             deps            The dependencies object
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { translator, timeDate, locale }) {
    super(data, { timeDate });

    /**
     * Whether or not this is a daily challenge
     * @type {Boolean}
     */
    this.isDaily = data.Daily || false;

    /**
     * Whether or not the challenge is an elite challenge
     * @type {Boolean}
     */
    this.isElite = /hard/gi.test(data.Challenge);

    /**
     * The descriptor for this challenge
     * @type {string}
     */
    this.desc = translator.languageDesc(data.Challenge, locale);

    /**
     * The title for this challenge
     * @type {string}
     */
    this.title = translator.languageString(data.Challenge, locale);

    /**
     * Generated id from expiry, challenge string,
     *  and whether or not it has `[PH]` (designating placeholder text)
     * @type {string}
     */
    this.id = `${this.expiry.getTime()}${data.Challenge.split('/').slice(-1)[0].toLowerCase()}`;

    /**
     * Reputation reward for ranking up in the Nightwave
     * @type {Number}
     */
    this.reputation = repBase + (!this.isDaily ? 3500 : 0) + (this.isElite ? 2500 : 0);
  }
}

module.exports = NightwaveChallenge;

},{"./WorldstateObject":242}],227:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');
/**
 * Represents a persistent enemy
 * @extends {WorldstateObject}
 */
class PersistentEnemy extends WorldstateObject {
  /**
   * @param   {Object}             data            The persistent enemy data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, locale }) {
    super(data, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The enemy's type
     * @type {string}
     */
    this.agentType = translator.languageString(data.AgentType, locale);

    /**
     * The location tag
     * @type {string}
     */
    this.locationTag = translator.languageString(data.LocTag, locale);

    /**
     * The enemy's rank
     * @type {number}
     */
    this.rank = data.Rank;

    /**
     * The enemy's remainaing health percentage
     * @type {number}
     */
    this.healthPercent = Number.parseFloat(data.HealthPercent);

    /**
     * The percentual damage that the enemy takes when it's defeated
     * @type {number}
     */
    this.fleeDamage = data.FleeDamage;

    /**
     * The region where the enemy is located
     * @type {string}
     */
    this.region = translator.region(data.Region, locale);

    /**
     * The last time the enemy was discovered
     * @type {Date}
     */
    this.lastDiscoveredTime = timeDate.parseDate(data.LastDiscoveredTime);

    /**
     * The node at which the enemy was last discovered
     * @type {string}
     */
    this.lastDiscoveredAt = translator.node(data.LastDiscoveredLocation, locale);

    /**
     * Whether or not the enemy is currently available
     * @type {Boolean}
     */
    this.isDiscovered = data.Discovered;

    /**
     * Whether or not the enemy is using ticketing
     * @type {Boolean}
     */
    this.isUsingTicketing = data.UseTicketing;

    /**
     * Fake ID incorporating discovery
     * @type {string}
     */
    this.pid = `${this.id}${this.isDiscovered}`;
  }

  /**
   * Returns a string representation of the persistent enemy
   * @returns {string}
   */
  toString() {
    const status = this.isDiscovered ? 'discovered' : 'not discovered';
    const lines = [
      `${this.agentType} last discovered at ${this.lastDiscoveredAt}.`,
      `It has ${this.healthPercent}% health remaining and is currently ${status}`,
    ];

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = PersistentEnemy;

},{"./WorldstateObject":242}],228:[function(require,module,exports){
'use strict';

const rewardTypes = require('../supporting/RewardTypes');

/**
 * An object describing a type of reward, including name, description,
 * test function to verify type from a string, thumbnail url, and color
 * @typedef {Object} RewardType
 * @property {string} name          - Name of the reward type
 * @property {string} description   - Description of the reward type
 * @property {string} test          - Function for testing the return type against a string
 * @property {string} thumbnail     - Thumbnail url for this reward type
 * @property {string} color         - Summary color representing this reward type
 */

/**
 * Returns the type of a given item
 * @param   {string}          item The item whose type needs to be determined
 * @param   {Array.<RewardType>}  [types] The possible types
 * @returns {string}          The type name
 */
function getItemType(item, types = rewardTypes) {
  return types.find((t) => t.test(item)).name;
}

/**
 * Returns the full type of a given item
 * @param   {string}          item The item whose type needs to be determined
 * @param   {Array.<RewardType>}  [types] The possible types
 * @returns {RewardType}      The type
 */
function getItemTypeFull(item, types = rewardTypes) {
  return types.find((t) => t.test(item));
}

/**
 * Represents a mission reward
 */
class Reward {
  /**
   * @param   {Object} data                 The mission data
   * @param   {Object}             deps            The dependencies object
   * @param   {Translator}         deps.translator The string translator
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { translator, locale }) {
    /**
     * The items being rewarded
     * @type {Array.<string>}
     */
    this.items = data.items ? data.items.map((i) => translator.languageString(i), locale) : [];

    /**
     * The counted items being rewarded
     * @type {Array.<Object>}
     */
    this.countedItems = data.countedItems
      ? data.countedItems.map((i) => ({
          count: i.ItemCount,
          type: translator.languageString(i.ItemType, locale),
          key: translator.languageString(i.ItemType),
        }))
      : [];

    /**
     * The credits being rewarded
     * @type {number}
     */
    this.credits = data.credits || 0;

    this.asString = this.toString();

    this.itemString = this.items
      .concat(this.countedItems.map((i) => `${i.count > 1 ? i.count : ''} ${i.type}`.trim()))
      .join(' + ');

    this.thumbnail = this.getTypesFull()[0] ? this.getTypesFull()[0].thumbnail : 'https://i.imgur.com/JCKyUXJ.png';

    this.color = this.getTypesFull()[0] ? this.getTypesFull()[0].color : 0xf1c40f;
  }

  /**
   * The types of all items that are being rewarded
   * @returns {Array.<string>}
   */
  getTypes() {
    return this.items.concat(this.countedItems.map((i) => i.key)).map((t) => getItemType(t));
  }

  /**
   * The types of all the items that are being rewarded
   * @returns {Array.<RewardType>}
   */
  getTypesFull() {
    return this.items.concat(this.countedItems.map((i) => i.key)).map((t) => getItemTypeFull(t));
  }

  /**
   * The reward's string representation
   * @returns {string}
   */
  toString() {
    const tokens = this.items.concat(this.countedItems.map((i) => `${i.count > 1 ? i.count : ''} ${i.type}`.trim()));

    if (this.credits) {
      tokens.push(`${this.credits}cr`);
    }

    return tokens.join(' + ');
  }
}

module.exports = Reward;

},{"../supporting/RewardTypes":247}],229:[function(require,module,exports){
'use strict';

const duration = 1800;

const sat = () => {
  const now = Math.floor(Date.now() / 1000);
  // One cycle = 3 hours
  const cycleSeconds = now % duration;
  // active range is after 30m and lasts for 30m
  const active = cycleSeconds > 0 && cycleSeconds < 1800;
  const start = (now - cycleSeconds) * 1000;
  const end = (now - cycleSeconds + duration) * 1000;

  return {
    active,
    expiry: new Date(end),
    activation: new Date(start),
  };
};

/**
 * Mission typeDef
 * @typedef {Object} Mission
 * @property {string} node Mission node name
 * @property {string} enemy Node enemy
 * @property {string} type Mission type of the node
 */

/**
 * Represents a set of sentient outposts that are present
 * Parsed source is combined data from DE's worldstate and semlar.com/anomaly.json
 * @property {Mission} mission    List of current missions
 * @property {string}  id         Identifier for the mission node with active indicator
 * @property {boolean} active     Whether or not the mission is active
 * @property {Date}    activation When the mission became or becomes active
 * @property {Date}    expiry     When the mission became or becomes inactive
 * @property {Object}  previous   Estimation data for the last mission that was active.
 *                                Could also be the current.
 * @property {Date}    previous.activation  When the mission became or becomes active
 * @property {Date}    previous.expiry     When the mission became or becomes inactive
 */
class SentientOutpost {
  constructor(data, { translator, locale, sentientData, logger }) {
    // eslint-disable-next-line no-param-reassign
    if (!data) data = '{"sfn":000}';
    const node = (data.match(/\d{3}/g) || ['000'])[0];
    const id = `CrewBattleNode${node}`;
    /* istanbul ignore if */
    if (node === '000') {
      this.mission = undefined;
    } else {
      this.mission = {
        node: translator.node(id, locale),
        faction: translator.nodeEnemy(id, locale),
        type: translator.nodeMissionType(id, locale),
      };
    }
    ({ activation: this.activation, expiry: this.expiry } = sat());
    this.active = !!this.mission;
    this.id = `${id}:${this.active}`;

    if (!sentientData) {
      logger.debug('No outpost data, skipping');
    } else {
      this.activation = new Date(sentientData.start * 1000);
      this.expiry = new Date(sentientData.end * 1000);
    }
  }
}

module.exports = SentientOutpost;

},{}],230:[function(require,module,exports){
'use strict';

/**
 * Contains information about sanctuary targets
 */
class Simaris {
  /**
   * @param   {Object}             data            The sanctuary data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, locale }) {
    if (!data) {
      // eslint-disable-next-line no-param-reassign
      data = {};
    }

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The sanctuary target
     * @type {string}
     */
    this.target = translator.languageString(data.LastCompletedTargetType, locale) || 'N/A';

    /**
     * Whether or not the target is currently active
     * @type {Boolean}
     */
    this.isTargetActive = !data.LastCompletedTargetType;

    /**
     * A string representation of the current sanctuary status
     * @type {string}
     */
    this.asString = this.toString();
  }

  /**
   * Returns a string representation of the current sanctuary status
   * @returns {string}
   */
  toString() {
    return (
      `Simaris's ${this.isTargetActive ? 'current' : 'previous'} objective ` +
      `${this.isTargetActive ? 'is' : 'was'} ${this.target}`
    );
  }
}

module.exports = Simaris;

},{}],231:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

/**
 * Represents a daily sortie
 * @extends {WorldstateObject}
 */
class Sortie extends WorldstateObject {
  /**
   * @param   {Object}            data               The data for all daily sorties
   * @param   {Object}            deps               The dependencies object
   * @param   {MarkdownSettings}  mdConfig      The markdown settings
   * @param   {Translator}        translator    The string translator
   * @param   {TimeDateFunctions} timeDate      The time and date functions
   * @param   {Object}            sortieData    The data used to parse sorties
   * @param   {SortieVariant}     SortieVariant The sortie variant parser
   * @param   {string}            locale        Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, sortieData, SortieVariant, locale, Mission }) {
    super(data, { timeDate });

    const opts = {
      mdConfig,
      translator,
      timeDate,
      sortieData,
      SortieVariant,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The date and time at which the sortie starts
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.Activation);

    /**
     * The date and time at which the sortie ends
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.Expiry);

    /**
     * The sortie's reward pool
     * @type {string}
     */
    this.rewardPool = translator.languageString(data.Reward, locale);

    /**
     * The sortie's variants
     * @type {Array.<SortieVariant>}
     */
    this.variants = (data.Variants || []).map((v) => new SortieVariant(v, opts));

    this.missions = (data.Missions || []).map((v) => new Mission(v, opts));

    /**
     * The sortie's boss
     * @type {string}
     */
    this.boss = translator.sortieBoss(data.Boss, locale);

    /**
     * The sortie's faction
     * @type {string}
     */
    this.faction = translator.sortieFaction(data.Boss, locale);

    /**
     * The sortie's faction
     * @type {string}
     */
    this.factionKey = translator.sortieFaction(data.boss, 'en');

    /**
     * Whether this is expired (at time of object creation)
     * @type {boolean}
     */
    this.expired = this.isExpired();

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();
  }

  /**
   * Get the sortie's boss
   * @returns {string}
   */
  getBoss() {
    return this.boss;
  }

  /**
   * Get the sortie's faction
   * @returns {string}
   */
  getFaction() {
    return this.faction;
  }

  /**
   * Gets a string indicating how long it will take for the sortie to end
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Get whether or not the sortie has expired
   * @returns {boolean}
   */
  isExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * Returns the sortie's string representation
   * @returns {string}
   */
  toString() {
    if (this.isExpired()) {
      return `${this.mdConfig.codeMulti}There's currently no sortie${this.mdConfig.lineEnd}${this.mdConfig.blockEnd}`;
    }

    const variantString = this.variants.map((v) => v.toString()).join('');

    return (
      `${this.mdConfig.codeMulti}${this.getBoss()}: ends in ${this.getETAString()}` +
      `${this.mdConfig.doubleReturn}${variantString}${this.mdConfig.blockEnd}`
    );
  }
}

module.exports = Sortie;

},{"./WorldstateObject":242}],232:[function(require,module,exports){
'use strict';

/**
 * Represents a sortie variant
 */
class SortieVariant {
  /**
   * @param   {Object}            data               Sortie variant data
   * @param   {MarkdownSettings}  mdConfig      The markdown settings
   * @param   {Translator}        translator    The string translator
   * @param   {Object}            sortieData    The data used to parse sorties
   * @param   {string}            locale        Locale to use for translations
   */
  constructor(data, { mdConfig, translator, locale }) {
    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The variant's mission type
     * @type {string}
     */
    this.missionType = translator.missionType(data.missionType, locale);

    /**
     * The variant's modifier
     * @type {string}
     */
    this.modifier = translator.sortieModifier(data.modifierType, locale);

    /**
     * The variant's modifier description
     * @type {string}
     */
    this.modifierDescription = translator.sortieModDesc(data.modifierType, locale);

    /**
     * The node where the variant takes place
     * @type {string}
     */
    this.node = translator.node(data.node, locale);
  }

  /**
   * Returns a string representation of the sortie variant
   * @returns {string}
   */
  toString() {
    return this.modifier
      ? `${this.node.padEnd(25, ' ')} |  ${this.modifier.padEnd(20, ' ')} | ${this.missionType}${this.mdConfig.lineEnd}`
      : `${this.node.padEnd(25, ' ')} | ${this.missionType}${this.mdConfig.lineEnd}`;
  }
}

module.exports = SortieVariant;

},{}],233:[function(require,module,exports){
'use strict';

const monday = 1;

function getFirstDayOfWeek() {
  const resultDate = new Date();
  /* istanbul ignore next */
  const offset = resultDate.getUTCDay() === 0 ? 6 : resultDate.getUTCDay() - monday;
  resultDate.setUTCDate(resultDate.getUTCDate() - offset);
  resultDate.setUTCHours(0);
  resultDate.setUTCMinutes(0);
  resultDate.setUTCSeconds(0);
  resultDate.setUTCMilliseconds(0);
  return resultDate;
}

function getLastDayOfWeek() {
  const last = new Date(getFirstDayOfWeek());
  last.setUTCDate(last.getUTCDate() + 6);
  last.setUTCHours(23);
  last.setUTCMinutes(59);
  last.setUTCSeconds(59);
  last.setUTCMilliseconds(0);
  return last;
}

function getStartOfDay() {
  const today = new Date();
  today.setUTCHours(0);
  today.setUTCMinutes(0);
  today.setUTCSeconds(0);
  today.setUTCMilliseconds(0);
  return today;
}

function getEndOfDay() {
  const last = new Date();
  last.setUTCHours(23);
  last.setUTCMinutes(59);
  last.setUTCSeconds(59);
  last.setUTCMilliseconds(0);
  return last;
}

/**
 * Start of Steel Path cycle calculations
 * @type {Date}
 */
const start = new Date('2020-11-16T00:00:00.000Z');

module.exports = class SteelPathOffering {
  constructor({ timeDate, translator, locale }) {
    const sSinceStart = (Date.now() - start.getTime()) / 1000;
    const eightWeeks = 4838400;
    const sevenDays = 604800;

    const ind = Math.floor((sSinceStart % eightWeeks) / sevenDays);

    this.currentReward = translator.steelPath(locale).rotation[ind];

    this.activation = getFirstDayOfWeek();

    this.expiry = getLastDayOfWeek();

    this.remaining = timeDate.timeDeltaToString(this.expiry.getTime() - Date.now());

    this.rotation = translator.steelPath(locale).rotation;
    this.evergreens = translator.steelPath(locale).evergreen;

    /**
     * General data pertaining to incursions
     * @type {Object}
     * @property {string} id Identifier for steel path incursion based on start of day.
     * @property {Date} activation when the current incursions became active
     * @property {Date} expiry when the current incursions become inactive
     */
    this.incursions = {
      id: `spi:${getStartOfDay().getTime()}`,
      activation: getStartOfDay(),
      expiry: getEndOfDay(),
    };
  }
};

},{}],234:[function(require,module,exports){
(function (process){(function (){
'use strict';

const fetch = require('node-fetch');

const WorldstateObject = require('./WorldstateObject');

const apiBase = process.env.API_BASE_URL || 'https://api.warframestat.us';
const bountyRewardRegex = /(?:Tier([ABCDE])|Narmer)Table([ABC])Rewards/i;
const ghoulRewardRegex = /GhoulBountyTable([AB])Rewards/i;

/**
 * Determine the level string for the bounty
 * @param  {Object} job Original raw job data
 * @returns {string}               level range string
 */
const getLevelString = (job) => `${job.minEnemyLevel} - ${job.maxEnemyLevel}`;

const determineLocation = (i18n, isVault, raw) => {
  const last = String(i18n).split('/').slice(-1)[0];

  const bountyMatches = last.match(bountyRewardRegex);
  const ghoulMatches = last.match(ghoulRewardRegex);

  const isBounty = bountyMatches && bountyMatches.length;
  const isGhoul = ghoulMatches && ghoulMatches.length;
  const isCetus = /eidolonjob/i.test(i18n);
  const isVallis = /venusjob/i.test(i18n);
  const isDeimos = /deimosmissionrewards/i.test(i18n);
  const rotation = isBounty ? bountyMatches[2] : '';
  const levelString = getLevelString(raw);

  let location;
  let levelClause;
  if (isCetus) {
    location = 'Earth/Cetus ';
    if (isGhoul) {
      levelClause = `(Level ${levelString} Ghoul Bounty)`;
    } else {
      levelClause = `(Level ${levelString} Cetus Bounty)`;
    }
  }
  if (isVallis) {
    location = 'Venus/Orb Vallis ';
    levelClause = `(Level ${levelString} Orb Vallis Bounty)`;
  }
  if (isDeimos) {
    location = 'Deimos/Cambion Drift '; // this will need to be updated when the actual drops are released
    const variant = isVault ? 'Isolation Vault' : 'Cambion Drift Bounty';
    levelClause = `(Level ${levelString} ${variant})`;
  }
  const locationWRot = `${location}${levelClause}, Rot ${rotation.length ? rotation : 'A'}`;
  return { location, locationWRot };
};

const getBountyRewards = async (i18n, isVault, raw) => {
  let location;
  let locationWRot;
  if (i18n.endsWith('PlagueStarTableRewards')) {
    location = 'plague star';
    locationWRot = 'Earth/Cetus (Level 15 - 25 Plague Star), Rot A';
  }
  if (!location || !locationWRot) {
    ({ location, locationWRot } = determineLocation(i18n, isVault, raw));
  }
  const url = `${apiBase}/drops/search/${encodeURIComponent(location)}?grouped_by=location`;
  const reply = await fetch(url)
    .then((res) => res.json())
    .catch(() => {}); // swallow errors
  const pool = (reply || {})[locationWRot];
  if (!pool) {
    return ['Pattern Mismatch. Results inaccurate.'];
  }
  const results = pool.rewards;
  if (results) {
    return Array.from(new Set(results.map((result) => result.item)));
  }
  /* istanbul ignore next */
  return [];
};

const FIFTY_MINUTES = 3000000;

/**
 * Represents a syndicate daily mission
 * @extends {WorldstateObject}
 */
class SyndicateJob extends WorldstateObject {
  /**
   * @param {Object} data The syndicate mission data
   * @param {Date} expiry The syndicate job expiration
   * @param {Object} deps The dependencies object
   * @param {Object} timeDate Time/Date functions
   * @param {Translator} translator The string translator
   * @param {string} locale Locale to use for translations
   */
  constructor(data, expiry, { translator, timeDate, locale }) {
    super(
      {
        _id: {
          $oid: data.JobCurrentVersion
            ? data.JobCurrentVersion.$oid
            : `${(data.jobType || '').split('/').slice(-1)[0]}${expiry.getTime()}`,
        },
      },
      { timeDate }
    );

    /**
     * Array of strings describing rewards
     * @type {Array.<String>}
     */
    this.rewardPool = [];
    getBountyRewards(data.rewards, data.isVault, data).then((rewards) => {
      this.rewardPool = rewards;
    });

    const chamber = ((data.locationTag || '').match(/[A-Z]+(?![a-z])|[A-Z]?[a-z]+|\d+/g) || []).join(' ');

    /**
     * The type of job this is
     * @type {String}
     */
    this.type =
      translator.languageString(data.jobType, locale) || `${data.isVault ? 'Isolation Vault' : ''} ${chamber}`;

    /**
     * Array of enemy levels
     * @type {Array.<number>}
     */
    this.enemyLevels = [data.minEnemyLevel, data.maxEnemyLevel];

    /**
     * Array of standing gains per stage of job
     * @type {Array.<number>}
     */
    this.standingStages = data.xpAmounts;

    /**
     * Minimum mastery required to participate
     * @type {Number}
     */
    this.minMR = data.masteryReq || 0;

    /**
     * Whether or not this is a Vault job.
     * No indication for difference of normal vs arcana vaults.
     * @type {Boolean}
     */
    this.isVault = data.isVault;

    /**
     * Corresponding chamber. Nullable
     * @type {string|null}
     */
    this.locationTag = data.locationTag;

    /**
     * End time for the syndicate mission.
     * Should be inherited from the Syndicate, but some are timebound.
     * @type {Date}
     */
    this.expiry = expiry;

    /**
     * What time phase this bounty is bound to
     * @type {string}
     */
    this.timeBound = undefined;
    if (data.jobType && data.jobType.toLowerCase().includes('narmer')) {
      if (data.jobType.toLowerCase().includes('eidolon')) {
        this.timeBound = 'day';
        this.expiry = new Date(this.expiry.getTime() - FIFTY_MINUTES);
      } else {
        this.timeBoound = 'night';
      }
    }
  }
}

module.exports = SyndicateJob;

}).call(this)}).call(this,require('_process'))
},{"./WorldstateObject":242,"_process":150,"node-fetch":138}],235:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');
const SyndicateJob = require('./SyndicateJob');

/**
 * Represents a syndicate daily mission
 * @extends {WorldstateObject}
 */
class SyndicateMission extends WorldstateObject {
  /**
   * @param   {Object}             data            The syndicate mission data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, locale }) {
    super(data, { timeDate });

    const deps = {
      mdConfig,
      translator,
      timeDate,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The translation functions
     * @type {Translator}
     * @private
     */
    this.translator = translator;
    Object.defineProperty(this, 'translator', { enumerable: false, configurable: false });

    /**
     * The date and time at which the syndicate mission starts
     * @type {Date}
     */
    this.activation = timeDate.parseDate(data.Activation);

    /**
     * The date and time at which the syndicate mission ends
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.Expiry);

    /**
     * The syndicate that is offering the mission
     * @type {string}
     */
    this.syndicate = translator.syndicate(data.Tag, locale);

    /**
     * The syndicate that is offering the mission
     * @type {string}
     */
    this.syndicateKey = translator.syndicate(data.Tag, 'en');

    /**
     * The nodes on which the missions are taking place
     * @type {Array.<string>}
     */
    this.nodes = data.Nodes.map((n) => translator.node(n), locale);

    /**
     * The jobs for this syndicate. Will normally be []
     * @type {Array.<SyndicateJob>}
     */
    this.jobs = (data.Jobs || []).map((j) => new SyndicateJob(j, this.expiry, deps));

    /**
     * Unique identifier for this mission set built from the end time and syndicate
     * @type {string}
     */
    this.id = `${this.expiry.getTime()}${data.Tag}`;

    /**
     * ETA string (at time of object creation)
     * @type {String}
     */
    this.eta = this.getETAString();
  }

  /**
   * Get a string indicating how much time is left before the syndicate mission expries
   * @returns {string}
   */
  getETAString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Returns a string representation of the syndicate mission
   * @returns {string}
   */
  toString() {
    if (this.nodes.length > 0) {
      const missions = this.nodes.map((n) => `  \u2022${n.toString()}`).join(this.mdConfig.lineEnd);
      return `[${this.getETAString()}] ${this.syndicate} currently has missions on:${this.mdConfig.lineEnd}${missions}`;
    }

    return `No missions available for ${this.syndicate}`;
  }
}

module.exports = SyndicateMission;

},{"./SyndicateJob":234,"./WorldstateObject":242}],236:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

const lStart = new Date('November 10, 2018 08:13:48 UTC');
const loopTime = 1600000;
const warmTime = 400000;
const coldTime = loopTime - warmTime;

function getCurrentCycle() {
  const sinceLast = (Date.now() - lStart) % loopTime;
  const toNextFull = loopTime - sinceLast;
  let state = 'cold';
  if (toNextFull > coldTime) {
    state = 'warm';
  }
  let toNextMinor;
  if (toNextFull < coldTime) {
    toNextMinor = toNextFull;
  } else {
    toNextMinor = toNextFull - coldTime;
  }
  const milliAtNext = Date.now() + toNextMinor;
  const milliAtPrev = Date.now() + toNextFull - (state === 'warm' ? loopTime : coldTime);
  const timeAtPrevious = new Date(milliAtPrev);
  timeAtPrevious.setSeconds(0);

  return {
    state,
    toNextMinor,
    toNextFull,
    timeAtNext: new Date(milliAtNext),
    timeAtPrevious,
  };
}

/**
 * Represents the current Earth Day/Night Cycle
 * @extends {WorldstateObject}
 */
class VallisCycle extends WorldstateObject {
  /**
   * @param   {Date}              bountiesEndDate The end date for Ostron bounties
   * @param   {Object}            deps            The dependencies object
   * @param   {MarkdownSettings}  deps.mdConfig   The markdown settings
   * @param   {TimeDateFunctions} deps.timeDate   The time and date functions
   */
  constructor({ mdConfig, timeDate }) {
    super({ _id: { $oid: 'vallisCycle0' } }, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The current cetus cycle, for calculating the other fields
     * @type {Object}
     * @private
     */
    const ec = getCurrentCycle();
    Object.defineProperty(this, 'ec', { enumerable: false, configurable: false });

    /**
     * The date and time at which the event ends
     * @type {Date}
     */
    this.expiry = ec.timeAtNext;

    /**
     * Whether or not this it's daytime
     * @type {boolean}
     */
    this.isWarm = ec.state === 'warm';

    /**
     * Current cycle state. One of `warm`, `cold`
     * @type {string}
     */
    this.state = ec.state;

    /**
     * Date and time at which the event started
     * @type {Date}
     */
    this.activation = ec.timeAtPrevious;

    /**
     * Time remaining string
     * @type {string}
     */
    this.timeLeft = timeDate.timeDeltaToString(ec.toNextMinor);

    this.id = `vallisCycle${ec.timeAtPrevious.getTime()}`;

    this.shortString = `${this.timeLeft.replace(/\s\d*s/gi, '')} to ${this.isWarm ? 'Cold' : 'Warm'}`;
  }

  /**
   * Get whether or not the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * The event's string representation
   * @returns {string}
   */
  toString() {
    const lines = [
      `Operator, the Orb Vallis is currently ${this.isWarm ? 'Warm' : 'Cold'}`,
      `Time remaining until ${this.isWarm ? 'Cold' : 'Warm'}: ${this.timeLeft}`,
    ];

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = VallisCycle;

},{"./WorldstateObject":242}],237:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');
const VoidTraderItem = require('./VoidTraderItem');
const VoidTraderSchedule = require('./VoidTraderSchedule');

/**
 * Represents a void trader
 * @extends {WorldstateObject}
 */
class VoidTrader extends WorldstateObject {
  /**
   * @param   {Object}             data            The Void trader data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, locale }) {
    super(data, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The date and time at which the void trader arrives
     * @type {Date}
     */
    this.activation = this.timeDate.parseDate(data.Activation);

    /**
     * The date and time at which the void trader leaves
     * @type {Date}
     */
    this.expiry = this.timeDate.parseDate(data.Expiry);

    /**
     * The void trader's name
     * @type {string}
     */
    this.character = data.Character ? data.Character.replace("Baro'Ki Teel", "Baro Ki'Teer") : '';

    /**
     * The node at which the Void Trader appears
     * @type {string}
     */
    this.location = translator.node(data.Node, locale);

    /**
     * The trader's inventory
     * @type {VoidTraderItem[]}
     */
    this.inventory = data.Manifest ? data.Manifest.map((i) => new VoidTraderItem(i, { translator, locale })) : [];

    /**
     * Pseudo Identifier for identifying changes in inventory
     * @type {string}
     */
    this.psId = `${this.id}${this.inventory.length}`;

    /**
     * Whether or not the void trader is active (at time of object creation)
     * @type {boolean}
     */
    this.active = this.isActive();

    /**
     * A string indicating how long it will take for the trader to arrive
     *  (at time of object creation)
     * @type {string}
     */
    this.startString = this.getStartString();

    /**
     * A string indicating how long it will take for the trader to leave
     *  (at time of object creation)
     * @type {string}
     */
    this.endString = this.getEndString();

    this.initialStart = timeDate.parseDate(data.InitialStartDate);
    this.completed = data.Completed;
    this.schedule = data.ScheduleInfo
      ? data.ScheduleInfo.map((i) => new VoidTraderSchedule(i, { timeDate, translator, locale }))
      : [];
  }

  /**
   * Get whether or not the trader is currently active
   * @returns {boolean}
   */
  isActive() {
    return this.timeDate.fromNow(this.activation) < 0 && this.timeDate.fromNow(this.expiry) > 0;
  }

  /**
   * Get a string indicating how long it will take for the trader to arrive
   * @returns {string}
   */
  getStartString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.activation));
  }

  /**
   * Get a string indicating how long it will take for the trader to leave
   * @returns {string}
   */
  getEndString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }

  /**
   * Returns a string representation of the trader
   * @returns {string}
   */
  toString() {
    if (!this.isActive()) {
      const timeDelta = this.timeDate.fromNow(this.activation);
      const nextArrivalTime = this.timeDate.timeDeltaToString(timeDelta);
      return (
        `${this.mdConfig.codeMulti}${this.character} is not here yet, he will arrive in ` +
        `${nextArrivalTime} at ${this.location}${this.mdConfig.blockEnd}`
      );
    }

    const inventoryString = this.inventory
      .map((i) => `  ${i.item} - ${i.ducats} ducats + ${i.credits}cr%s`)
      .join(this.mdConfig.lineEnd);

    const lines = [
      `${this.mdConfig.codeMulti}Void Trader at ${this.location}`,
      inventoryString,
      `Trader departing in ${this.getEndString()}${this.mdConfig.blockEnd}`,
    ];

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = VoidTrader;

},{"./VoidTraderItem":238,"./VoidTraderSchedule":239,"./WorldstateObject":242}],238:[function(require,module,exports){
'use strict';

/**
 * A void trader inventory item
 * @property {string} item The name of the inventory item
 * @property {number|string} ducats Ducat cost of the item
 * @property {number|string} credits Credit cost of the item
 */
class VoidTraderItem {
  /**
   * @param   {Object}             data            The void trader item data
   * @param   {string}             data.ItemType   Worldstate Item i18n path
   * @param   {string}             data.PrimePrice Ducat cost of the item
   * @param   {string}             data.RegularPrice Credit price of the item
   * @param   {Dependency}         deps            The dependencies object
   * @param   {Translator}         deps.translator The string translator
   * @param   {string}             deps.locale     Locale to use for translations
   */
  constructor({ ItemType, PrimePrice, RegularPrice }, { translator, locale }) {
    this.uniqueName = ItemType;
    this.item = translator.languageString(ItemType, locale);
    this.ducats = Number.parseInt(PrimePrice, 10);
    this.credits = Number.parseInt(RegularPrice, 10);
  }
}

module.exports = VoidTraderItem;

},{}],239:[function(require,module,exports){
'use strict';

module.exports = class VoidTraderSchedule {
  constructor(data, { timeDate, translator, locale }) {
    this.expiry = timeDate.parseDate(data.Expiry);
    this.item = translator.languageString(data.FeaturedItem, locale);
  }
};

},{}],240:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');
const ChallengeInstance = require('./ChallengeInstance');

/**
 * Represents a void trader
 * @extends {WorldstateObject}
 */
class WeeklyChallenge extends WorldstateObject {
  /**
   * @param   {Object}             data            The Void trader data
   * @param   {Object}             deps            The dependencies object
   * @param   {MarkdownSettings}   deps.mdConfig   The markdown settings
   * @param   {Translator}         deps.translator The string translator
   * @param   {TimeDateFunctions}  deps.timeDate   The time and date functions
   */
  constructor(data, { timeDate, translator }) {
    super(data, { timeDate });

    this.challenges = data.Challenges.map((challengeData) => new ChallengeInstance(challengeData, { translator }));
  }

  /**
   * Returns a string representation of the trader
   * @returns {string}
   */
  toString() {
    return `Starts: ${this.getStartString()}\nEnds: ${this.getEndString()}\nChallenges:\n${this.challenges
      .map((challenge) => `\t${challenge.toString()}`)
      .join('\n')}`;
  }
}

module.exports = WeeklyChallenge;

},{"./ChallengeInstance":210,"./WorldstateObject":242}],241:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');
const SyndicateJob = require('./SyndicateJob');

/**
 * Interim step for an event reward system.
 * @typedef {Object} InterimStep
 *
 * @property {Number} goal          Goal amount
 * @property {Reward} reward        Reward for reaching the step
 * @property {Number} winnerCount   Amount of players at this step
 * @property {Object} message       Message received when reaching the interim step
 */

/**
 * Progress for one of multiple stages
 * @typedef {Object} ProgressStep
 *
 * @property {string} type
 * @property {Number} progressAmt
 */

/**
 * Represents an in-game special event
 *
 * @extends {WorldstateObject}
 */
class WorldEvent extends WorldstateObject {
  /**
   * @param   {Object}            data            The event data
   * @param   {Object}            deps            The dependencies object
   * @param   {MarkdownSettings}  deps.mdConfig   The markdown settings
   * @param   {Translator}        deps.translator The string translator
   * @param   {TimeDateFunctions} deps.timeDate   The time and date functions
   * @param   {Reward}            deps.Reward     The Reward parser
   * @param   {string}            deps.locale     Locale to use for translations
   */
  constructor(data, { mdConfig, translator, timeDate, Reward, locale }) {
    super(data, { timeDate });

    const opts = {
      translator,
      mdConfig,
      Reward,
      timeDate,
      locale,
    };

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The date and time at which the event ends
     * @type {Date}
     */
    this.expiry = timeDate.parseDate(data.Expiry);

    /**
     * The event's main score goal
     * @type {number}
     */
    this.maximumScore = Number.parseInt(data.Goal, 10);

    /**
     * The current score on the event
     * @type {number}
     */
    this.currentScore = Number.parseInt(data.Count, 10);

    /**
     * The first intermediate score goal
     * @type {?number}
     */
    this.smallInterval = Number.parseInt(data.GoalInterim, 10);

    /**
     * The second intermediate score goal
     * @type {?number}
     */
    this.largeInterval = Number.parseInt(data.GoalInterim2, 10);

    /**
     * The faction that the players must fight in the event
     * @type {string}
     */
    this.faction = translator.faction(data.Faction, locale);

    /**
     * The description of the event
     * @type {string}
     */
    this.description = translator.languageString(data.Desc, locale);

    /**
     * Tooltip for the event
     * @type {?string}
     */
    this.tooltip = translator.languageString(data.ToolTip, locale);

    /**
     * The node where the event takes place
     * @type {?string}
     */
    this.node = translator.node(data.Node, locale);

    /**
     * The other nodes where the event takes place
     * @type {string[]}
     */
    this.concurrentNodes = data.ConcurrentNodes ? data.ConcurrentNodes.map((n) => translator.node(n), locale) : [];

    /**
     * The victim node
     * @type {?string}
     */
    this.victimNode = translator.node(data.VictimNode, locale);

    /**
     * The score description
     * @type {?string}
     */
    this.scoreLocTag = data.Fomorian ? 'Fomorian Assault Score' : translator.languageString(data.ScoreLocTag, locale);

    /**
     * The event's rewards
     * @type {Reward[]}
     */
    this.rewards = Object.keys(data)
      .filter((k) => k.includes('Reward') || k.includes('reward'))
      .map((k) => new Reward(data[k], opts));

    /**
     * Whether or not this is expired (at time of object creation)
     * @type {boolean}
     */
    this.expired = this.getExpired();

    /**
     * Health remaining for the target
     * @type {Number}
     */
    this.health =
      typeof data.HealthPct !== 'undefined' ? Number.parseFloat(((data.HealthPct || 0.0) * 100).toFixed(2)) : undefined;

    if (data.JobAffiliationTag) {
      this.affiliatedWith = translator.syndicate(data.JobAffiliationTag, locale);
      if (data.Jobs) {
        this.jobs = (data.Jobs || []).map((j) => new SyndicateJob(j, this.expiry, opts));
        this.previousJobs = (data.PreviousJobs || []).map((j) => new SyndicateJob(j, this.expiry, opts));
      }
    }

    /**
     * Previous job id
     * @type {String}
     */
    this.previousId = (data.JobPreviousVersion || {}).$oid;

    /**
     * Array of steps
     * @type {InterimStep[]}
     */
    this.interimSteps = [];

    (data.InterimRewards || []).forEach((reward, index) => {
      const msg = (data.InterimRewardMessages || [])[index] || {};
      this.interimSteps[index] = {
        goal: Number.parseInt(data.InterimGoals[index], 10),
        reward: reward ? new Reward(reward, opts) : undefined,
        message: {
          sender: translator.languageString(msg.sender, locale),
          subject: translator.languageString(msg.subject, locale),
          message: translator.languageString(msg.message, locale),
          senderIcon: msg.senderIcon,
          attachments: msg.attachments,
        },
        // eslint-disable-next-line no-underscore-dangle
        winnerCount: (data._interimWinnerCounts || [])[index],
      };
    });

    /**
     * Progress Steps, if any are present
     * @type {ProgressStep[]}
     */
    this.progressSteps = [];

    if (data.IsMultiProgress) {
      data.Types.forEach((type, index) => {
        this.progressSteps[index] = {
          type: translator.languageString(type, locale),
          progressAmt: Number.parseInt(data.MultiProgress[index], 10),
        };
      });

      /**
       * Total of all MultiProgress
       * @type {Number}
       */
      this.progressTotal = Number.parseFloat(data.MultiProgress.reduce((accumulator, val) => accumulator + val));
    }

    /**
     * Whether or not to show the total score at the end of the mission
     * @type {boolean}
     */
    this.showTotalAtEndOfMission = data.ShowTotalAtEOM;
    /**
     * Whether or not the event is personal
     * @type {Boolean}
     */
    this.isPersonal = data.Personal;
    /**
     * Whether or not the event is community
     * @type {Boolean}
     */
    this.isCommunity = data.Community;

    /**
     * Affectors for this mission
     * @type {string[]}
     */
    this.regionDrops = (data.RegionDrops || []).map((drop) => translator.languageString(drop, locale));

    /**
     * Archwing Drops in effect while this event is active
     * @type {string[]}
     */
    this.archwingDrops = (data.ArchwingDrops || []).map((drop) => translator.languageString(drop, locale));

    this.asString = this.toString();

    /**
     * Metadata provided by DE
     * @type {Object}
     */
    this.metadata = JSON.parse((data.Metadata || '{}').replace('" ', '"'));

    /**
     * Bonuses given for completion
     * @type {Array.<Number>}
     */
    this.completionBonuses = data.CompletionBonus || [];

    this.scoreVar = data.ScoreVar;

    this.altExpiry = timeDate.parseDate(data.AltExpiry);
    this.altActivation = timeDate.parseDate(data.AltActivation);

    this.nextAlt = {
      expiry: timeDate.parseDate(data.NextAltExpiry),
      activation: timeDate.parseDate(data.NextAltActivation),
    };
  }

  /**
   * Get whether or not the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.timeDate.fromNow(this.expiry) < 0;
  }

  /**
   * The event's string representation
   * @returns {string}
   */
  toString() {
    let lines = [`${this.description} : ${this.faction}`];

    if (this.scoreLocTag && this.maximumScore) {
      lines.push(`${this.scoreLocTag} : ${this.maximumScore}`);
    }

    if (this.rewards.length) {
      lines.push('Rewards:');
      lines = lines.concat(this.rewards.map((r) => r.toString()));
    }
    if (this.node) {
      lines.push(`Battle on ${this.node}`);
    }
    if (this.victim) {
      lines.push(`Protect ${this.victimNode}`);
    }
    if (this.health) {
      lines.push(`${this.health}% Remaining`);
    }

    if (this.affiliatedWith && this.jobs) {
      lines.push(
        `${this.affiliatedWith} will reward you for performing ` +
          `${this.jobs.map((job) => job.type).join(', ')} job${this.jobs.length > 1 ? 's' : ''}`
      );
    }

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = WorldEvent;

},{"./SyndicateJob":234,"./WorldstateObject":242}],242:[function(require,module,exports){
'use strict';

/**
 * @typedef {Object} Identifier
 * @property {string} $id older identifier schema
 * @property {string} $oid newer global identifier schema
 */
/**
 * @typedef {Object} LegacyTimestamp
 * @property {number} sec second-based timestamp
 */
/**
 * @typedef {Object} Timestamp
 * @property {number} $numberLong millisecond-based timestamp
 */
/**
 * @typedef {Object} ContentTimestamp
 * @property {LegacyTimestamp|Timestamp} $date timestamp number wrapper
 */
/**
 * @typedef {Object} BaseContentObject
 * @property {Identifier} _id
 * @property {ContentTimestamp} Activation
 * @property {ContentTimestamp} Expiry
 */

/**
 * Represents a generic object from Worldstate
 */
module.exports = class WorldstateObject {
  /**
   * @param   {BaseContentObject} data The object data
   * @param   {TimeDateFunctions} timeDate time date functions
   * @param   {Translator} translator translation functions
   */
  constructor(data, { timeDate, translator }) {
    /**
     * The object's id field
     * @type {Identifier.$id|Identifier.$oid}
     */
    // eslint-disable-next-line no-underscore-dangle
    this.id = data._id ? data._id.$oid || data._id.$id : undefined;

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    this.translator = translator || require('../utilities/translation');
    Object.defineProperty(this, 'translator', { enumerable: false, configurable: false });

    if (data.Activation) {
      /**
       * The date and time at which the void trader arrives
       * @type {Date}
       */
      this.activation = timeDate.parseDate(data.Activation);

      /**
       * A string indicating how long it will take for the trader to arrive
       *  (at time of object creation)
       * @type {string}
       */
      this.startString = this.getStartString();
    }

    if (data.Expiry) {
      /**
       * The date and time at which the void trader leaves
       * @type {Date}
       */
      this.expiry = timeDate.parseDate(data.Expiry);
    }

    if (data.Activation && data.Expiry) {
      /**
       * Whether the void trader is active (at time of object creation)
       * @type {boolean}
       */
      this.active = this.isActive();
    }
  }

  /**
   * Returns a string representation of the object
   * @returns {string}
   */
  toString() {
    return `id: ${this.id}`;
  }

  /**
   * Get whether the trader is currently active
   * @returns {boolean}
   */
  isActive() {
    return this.timeDate.fromNow(this.activation) < 0 && this.timeDate.fromNow(this.expiry) > 0;
  }

  /**
   * Get a string indicating how long it will take for the trader to arrive
   * @returns {string}
   */
  getStartString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.activation));
  }

  /**
   * Get a string indicating how long it will take for the trader to leave
   * @returns {string}
   */
  getEndString() {
    return this.timeDate.timeDeltaToString(this.timeDate.fromNow(this.expiry));
  }
};

},{"../utilities/translation":249}],243:[function(require,module,exports){
'use strict';

const WorldstateObject = require('./WorldstateObject');

// This is a confirmed starting time for Corpus (in millis)
// All faction operation should use this as a calculation point
// Unless there's a better logic
const corpusTimeMillis = 1655182800000;
const fullCycle = 18000000;
const stateMaximum = 9000000;

/**
 * Represents the current Zariman Corpus/Grineer Cycle
 * @extends {WorldstateObject}
 */
class ZarimanCycle extends WorldstateObject {
  /**
   * @param   {Date}              bountiesEndDate The current zariman cycle expiry
   * @param   {Object}            deps            The dependencies object
   * @param   {MarkdownSettings}  deps.mdConfig   The markdown settings
   * @param   {TimeDateFunctions} deps.timeDate   The time and date functions
   */
  constructor(bountiesEndDate, { mdConfig, timeDate }) {
    super({ _id: { $oid: 'zarimanCycle0' } }, { timeDate });

    /**
     * The markdown settings
     * @type {MarkdownSettings}
     * @private
     */
    this.mdConfig = mdConfig;
    Object.defineProperty(this, 'mdConfig', { enumerable: false, configurable: false });

    /**
     * The end of the Zariman bounties timer, the faction changes exactly half way through
     * @type {Date}
     * @private
     */
    this.bountiesEndDate = bountiesEndDate;
    Object.defineProperty(this, 'currentTime', { enumerable: false, configurable: false });

    /**
     * The time and date functions
     * @type {TimeDateFunctions}
     * @private
     */
    this.timeDate = timeDate;
    Object.defineProperty(this, 'timeDate', { enumerable: false, configurable: false });

    /**
     * The current zariman cycle, for calculating the other fields
     * @type {Object}
     * @private
     */
    const ec = this.getCurrentZarimanCycle();
    Object.defineProperty(this, 'ec', { enumerable: false, configurable: false });

    /**
     * The date and time at which the event ends
     * @type {Date}
     */
    this.expiry = ec.expiry;

    /**
     * The date and time at which the event started
     * @type {Date}
     */
    this.activation = new Date(ec.start);

    /**
     * Whether or not this it's corpus or grineer
     * @type {boolean}
     */
    this.isCorpus = ec.isCorpus;

    /**
     * Current cycle state. One of `corpus`, `grineer`
     * @type {string}
     */
    this.state = ec.state;

    /**
     * Time remaining string
     * @type {string}
     */
    this.timeLeft = ec.timeLeft;

    this.id = `zarimanCycle${this.expiry.getTime()}`;

    this.shortString = `${this.timeLeft.replace(/\s\d*s/gi, '')} to ${this.isCorpus ? 'grineer' : 'corpus'}`;
  }

  /**
   * Get whether the event has expired
   * @returns {boolean}
   */
  getExpired() {
    return this.expiry ? this.timeDate.fromNow(this.expiry) < 0 : /* istanbul ignore next */ true;
  }

  getCurrentZarimanCycle() {
    const now = Date.now();
    // determine if it is corpus cycle or grineer cycle based on bounty end time
    // we subtract 5000 millis (5 seconds) to ensure the corpus/grineer calculation is correct
    const bountiesClone = this.bountiesEndDate.getTime() - 5000;
    const millisLeft = this.timeDate.fromNow(new Date(bountiesClone));
    // the following line is a modulus operation
    // this ensures that our calculation is correct if bountiesClone is before corpusTimeMillis
    // if you really care, read https://torstencurdt.com/tech/posts/modulo-of-negative-numbers/
    const cycleTimeElapsed = (((bountiesClone - corpusTimeMillis) % fullCycle) + fullCycle) % fullCycle;
    const cycleTimeLeft = fullCycle - cycleTimeElapsed;
    // if timeInCycle is more than 2.5 hours, it is corpus, otherwise it is grineer
    const isCorpus = cycleTimeLeft > stateMaximum;

    const minutesCoef = 1000 * 60;
    const expiry = new Date(Math.round((now + millisLeft) / minutesCoef) * minutesCoef);
    const state = isCorpus ? 'corpus' : 'grineer';

    return {
      isCorpus,
      timeLeft: this.timeDate.timeDeltaToString(millisLeft),
      expiry,
      expiresIn: millisLeft,
      state,
      start: expiry.getTime() - stateMaximum,
    };
  }

  /**
   * The event's string representation
   * @returns {string}
   */
  toString() {
    const lines = [
      `Operator, Zariman Ten Zero is currently occupied by ${this.state}`,
      `Time remaining until ${this.isCorpus ? 'grineer' : 'corpus'} takeover: ${this.timeLeft}`,
    ];

    return lines.join(this.mdConfig.lineEnd);
  }
}

module.exports = ZarimanCycle;

},{"./WorldstateObject":242}],244:[function(require,module,exports){
'use strict';

/**
 * Dependency Object
 * @property   {MarkdownSettings}   mdConfig   The markdown settings
 * @property   {Translator}         translator The string translator
 * @property   {TimeDateFunctions}  timeDate   The time and date functions
 * @property   {Mission}            Mission    The Mission parser
 * @property   {Reward}             Reward     The Reward parser
 * @property   {string}             locale     Locale to use for translations
 * @property   {Object}             logger     Generic logger to use if needed
 */
class Dependency {}

module.exports = Dependency;

},{}],245:[function(require,module,exports){
'use strict';

/**
 * A collection of strings that are used by the parser to produce markdown-formatted text
 * @property {string} lineEnd      - Line return character
 * @property {string} blockEnd     - Block end string
 * @property {string} doubleReturn - Double line return string
 * @property {string} linkBegin    - Link begin string
 * @property {string} linkMid      - Link middle string
 * @property {string} linkEnd      - Link end string
 * @property {string} bold         - String for denoting bold text
 * @property {string} italic       - String for denoting italicized text
 * @property {string} underline    - String for denoting underlined text
 * @property {string} strike       - String for denoting striked-through text
 * @property {string} codeLine     - String for denoting in-line code
 * @property {string} codeBlock    - String for denoting multi-line code blocks
 */
module.exports = class MarkdownSettings {
  constructor() {
    this.lineEnd = '\n';
    this.blockEnd = '\n```';
    this.doubleReturn = '\n\n';
    this.linkBegin = '[';
    this.linkMid = '](';
    this.linkEnd = ')';
    this.bold = '**';
    this.italic = '*';
    this.underline = '__';
    this.strike = '~~';
    this.codeLine = '`';
    this.codeBlock = '```';
    this.spoiler = '||';
  }
};

},{}],246:[function(require,module,exports){
'use strict';

const resources = [
  'Alloy Plate',
  'Argon Crystal',
  'Circuits',
  'Control Module',
  'Cryotic',
  'Ferrite',
  'Gallium',
  'Morphics',
  'Nano Spores',
  'Neural Sensors',
  'Neurodes',
  'Orokin Cell',
  'Oxium',
  'Plastids',
  'Polymer Bundle',
  'Rubedo',
  'Salvage',
  'Tellurium',
];

// Aura names
const auras = [
  'Brief Respite',
  'Corrosive Projection',
  'Dead Eye',
  'EMP Aura',
  'Empowered Blades',
  'Enemy Radar',
  'Energy Siphon',
  'Growing Power',
  'Infested Impedance',
  'Loot Detector',
  'Physique',
  'Pistol Amp',
  'Pistol Scavenger',
  'Rejuvenation',
  'Rifle Amp',
  'Rifle Scavenger',
  'Shield Disruption',
  'Shotgun Amp',
  'Shotgun Scavenger',
  'Sniper Scavenger',
  'Speed Holster',
  'Sprint Boost',
  'Stand United',
  'Steel Charge',
];

// Nightmare mod names
const nightmare = [
  'Accelerated Blast',
  'Animal Instinct',
  'Armored Agility',
  'Blaze',
  'Chilling Reload',
  'Constitution',
  'Drifting Contact',
  'Focus Energy',
  'Fortitude',
  'Hammer Shot',
  'Ice Storm',
  'Lethal Torrent',
  'Rending Strike',
  'Stunning Speed',
  'Wildfire',
  'Seeking Fury',
  'Streamlined Form',
  'Shred',
  'Vigor',
];

module.exports = {
  nightmare,
  auras,
  resources,
};

},{}],247:[function(require,module,exports){
'use strict';

const { auras, nightmare, resources } = require('./RewardData');

/**
 * All possible RewardTypes
 * @type {Array.<RewardType>}
 */
module.exports = [
  {
    name: 'vauban',
    description: 'Vauban parts',
    test: (s) => /^vauban(?!.*helmet)/i.test(s),
    thumbnail: 'https://i.imgur.com/r5x0owi.png',
    color: 0x5c5a53,
  },
  {
    name: 'vandal',
    description: 'Vandal Weapon Parts',
    test: (s) => /vandal/i.test(s),
    thumbnail: 'https://i.imgur.com/kPQcg5B.png',
    color: 0x5c5a53,
  },
  {
    name: 'wraith',
    description: 'Wraith Weapon Parts',
    test: (s) => /wraith/i.test(s),
    thumbnail: 'https://i.imgur.com/B5sv3mQ.png',
    color: 0x5c5a53,
  },
  {
    name: 'skin',
    description: 'Weapon skins',
    test: (s) => /skin/i.test(s),
    thumbnail:
      'https://raw.githubusercontent.com/Warframe-Community-Developers/warframe-worldstate-parser/master/resources/weapon_skin_thumb.png',
    color: 0x4f4c33,
  },
  {
    name: 'helmet',
    description: 'Alternative helmets',
    test: (s) => /helmet/i.test(s),
    thumbnail:
      'https://raw.githubusercontent.com/Warframe-Community-Developers/warframe-worldstate-parser/master/resources/alt_helmet_thumb.png',
    color: 0x567677,
  },
  {
    name: 'nitain',
    description: 'Nitain extract',
    test: (s) => /nitain/i.test(s),
    thumbnail: 'https://i.imgur.com/3Db4PHh.png',
    color: 0xaeada4,
  },
  {
    name: 'mutalist',
    description: 'Mutalist Alad V coordinates',
    test: (s) => /mutalist/i.test(s),
    thumbnail: 'https://i.imgur.com/96AWqr8.png',
    color: 0x26b37,
  },
  {
    name: 'weapon',
    description: 'Weapons',
    test: (s) => /dagger|sword|glaive/i.test(s),
    thumbnail: 'https://i.imgur.com/A2gbH8k.png',
    color: 0xa3a097,
  },
  {
    name: 'fieldron',
    description: 'Fieldron',
    test: (s) => /fieldron/i.test(s),
    thumbnail: 'https://i.imgur.com/qlrlfft.png',
    color: 0x4d5556,
  },
  {
    name: 'detonite',
    description: 'Detonite Injector',
    test: (s) => /detonite/i.test(s),
    thumbnail: 'https://i.imgur.com/rV6lN4W.png',
    color: 0x4d5556,
  },
  {
    name: 'mutagen',
    description: 'Mutagen Mass',
    test: (s) => /mutagen/i.test(s),
    thumbnail: 'https://i.imgur.com/vV7kzub.png',
    color: 0x4d5556,
  },
  {
    name: 'clantech',
    description: 'Clantech resources',
    test: (s) => /fieldron|detonite|mutagen/i.test(s),
    thumbnail:
      'https://github.com/Warframe-Community-Developers/warframe-worldstate-parser/raw/master/resources/clantech_thmb.png',
    color: 0x4d5556,
  },
  {
    name: 'aura',
    description: 'Auras',
    test: (s) => auras.includes(s),
    thumbnail:
      'https://github.com/Warframe-Community-Developers/warframe-worldstate-parser/raw/master/resources/aura_thumb.png',
    color: 0xc8f8ff,
  },
  {
    name: 'neuralSensors',
    description: 'Neural Sensors',
    test: (s) => /neural/i.test(s),
    thumbnail: 'https://i.imgur.com/Gq6cz9p.png',
    color: 0xc8f8ff,
  },
  {
    name: 'neurodes',
    description: 'Neurodes',
    test: (s) => /neurode/i.test(s),
    thumbnail: 'https://cdn.warframestat.us/img/component-neurode.png',
    color: 0xc8f8ff,
  },
  {
    name: 'orokinCell',
    description: 'Orokin Cell',
    test: (s) => /orokin\scell/i.test(s),
    thumbnail: 'https://i.imgur.com/tEQdoDE.png',
    color: 0xc8f8ff,
  },
  {
    name: 'alloyPlate',
    description: 'Alloy Plate',
    test: (s) => /alloy\splate/i.test(s),
    thumbnail: 'https://i.imgur.com/E8K3fOI.png',
    color: 0xc8f8ff,
  },
  {
    name: 'circuits',
    description: 'Circuits',
    test: (s) => /circuits/i.test(s),
    thumbnail: 'https://i.imgur.com/OxJvWIx.png',
    color: 0xc8f8ff,
  },
  {
    name: 'controlModule',
    description: 'Control Module',
    test: (s) => /control\smodule/i.test(s),
    thumbnail: 'https://i.imgur.com/F1UUub1.png',
    color: 0xc8f8ff,
  },
  {
    name: 'ferrite',
    description: 'Ferrite',
    test: (s) => /ferrite/i.test(s),
    thumbnail: 'https://i.imgur.com/h93eVLr.png',
    color: 0xc8f8ff,
  },
  {
    name: 'gallium',
    description: 'Gallium',
    test: (s) => /gallium/i.test(s),
    thumbnail: 'https://i.imgur.com/pvpc73S.png',
    color: 0xa1adba,
  },
  {
    name: 'morphics',
    description: 'Morphics',
    test: (s) => /morphics/i.test(s),
    thumbnail: 'https://i.imgur.com/SF3XWd6.png',
    color: 0xc8f8ff,
  },
  {
    name: 'nanoSpores',
    description: 'Nano Spores',
    test: (s) => /nano\sspores/i.test(s),
    thumbnail: 'https://i.imgur.com/bb71Cy7.png',
    color: 0x533f36,
  },
  {
    name: 'oxium',
    description: 'Oxium',
    test: (s) => /oxium/i.test(s),
    thumbnail: 'https://i.imgur.com/hY8NCjk.png',
    color: 0x92713b,
  },
  {
    name: 'rubedo',
    description: 'Rubedo',
    test: (s) => /rubedo/i.test(s),
    thumbnail: 'https://i.imgur.com/gSO9ILf.png',
    color: 0xce3e36,
  },
  {
    name: 'salvage',
    description: 'Salvage',
    test: (s) => /salvage/i.test(s),
    thumbnail: 'https://i.imgur.com/3L7xLYg.png',
    color: 0x8b8e8d,
  },
  {
    name: 'plastids',
    description: 'Plastids',
    test: (s) => /plastids/i.test(s),
    thumbnail: 'https://i.imgur.com/5yVfTEF.png',
    color: 0xceae88,
  },
  {
    name: 'polymerBundle',
    description: 'Polymer Bundle',
    test: (s) => /polymer\sbundle/i.test(s),
    thumbnail: 'https://i.imgur.com/pg8asnC.png',
    color: 0x6b4da4,
  },
  {
    name: 'argonCrystal',
    description: 'Argon Crystal',
    test: (s) => /argon\scrystal/i.test(s),
    thumbnail: 'https://i.imgur.com/DdJJYSB.png',
    color: 0xc8f8ff,
  },
  {
    name: 'cryotic',
    description: 'Cryotic',
    test: (s) => /cryotic/i.test(s),
    thumbnail: 'https://i.imgur.com/yqPgj21.png',
    color: 0x78a2b3,
  },
  {
    name: 'tellurium',
    description: 'Tellurium',
    test: (s) => /tellurium/i.test(s),
    thumbnail: 'https://i.imgur.com/ocjnGU8.png',
    color: 0xe72e18,
  },
  {
    name: 'resource',
    description: 'Resources',
    test: (s) => resources.includes(s),
    thumbnail: 'https://i.imgur.com/Bq5TEPo.png',
    color: 0xffee9c,
  },
  {
    name: 'nightmare',
    description: 'Nightmare mods',
    test: (s) => nightmare.includes(s),
    thumbnail: 'https://i.imgur.com/cAYNH7j.png',
    color: 0xb22e2c,
  },
  {
    name: 'endo',
    description: 'Endo',
    test: (s) => /\d+\sendo/i.test(s),
    thumbnail: 'https://i.imgur.com/mS8oSwx.png',
    color: 0xc2a24c,
  },
  {
    name: 'reactor',
    description: 'Orokin Reactors',
    test: (s) => /reactor/i.test(s),
    thumbnail: 'https://i.imgur.com/6Hm1BEq.png',
    color: 0xd7c37d,
  },
  {
    name: 'catalyst',
    description: 'Orokin Catalyst',
    test: (s) => /catalyst/i.test(s),
    thumbnail: 'https://i.imgur.com/C4X9NWm.png',
    color: 0x689add,
  },
  {
    name: 'potato',
    description: 'Orokin Catalysts/Reactors',
    test: (s) => /catalyst|reactor/i.test(s),
    thumbnail: 'https://i.imgur.com/6Hm1BEq.png',
    color: 0x689add,
  },
  {
    name: 'forma',
    description: 'Forma',
    test: (s) => /forma/i.test(s),
    thumbnail: 'https://i.imgur.com/2b0FT3D.png',
    color: 0xb19547,
  },
  {
    name: 'exilus',
    description: 'Exilus',
    test: (s) => /exilus/i.test(s),
    thumbnail: 'https://i.imgur.com/eQNeNpY.png',
    color: 0x88332d,
  },
  {
    name: 'synthula',
    description: 'Synthula',
    test: (s) => /synthula/i.test(s),
    thumbnail: 'https://i.imgur.com/X0Lvfc9.png',
    color: 0x9fa19f,
  },
  {
    name: 'kavatGene',
    description: 'Kavat Genetic Code',
    test: (s) => /Kavat Ge/i.test(s),
    thumbnail: 'https://i.imgur.com/ijVUmQV.png',
    color: 0x76a8ad,
  },
  {
    name: 'kubrowEgg',
    description: 'Kubrow Egg',
    test: (s) => /kubrow\segg/i.test(s),
    thumbnail: 'https://i.imgur.com/Vv3LXnz.png',
    color: 0xa5937f,
  },
  {
    name: 'traces',
    description: 'Void Traces',
    test: (s) => /trace/i.test(s),
    thumbnail: 'https://i.imgur.com/vvZGMPv.png',
    color: 0x69a4dd,
  },
  {
    name: 'riven',
    description: 'Riven Mod',
    test: (s) => /riven/i.test(s),
    thumbnail: 'https://i.imgur.com/LoficZr.png',
    color: 0xa183bd,
  },
  // Catch-all
  {
    name: 'other',
    description: 'Other',
    test: () => true,
    thumbnail: '',
    color: 0x4f545c,
  },
];

},{"./RewardData":246}],248:[function(require,module,exports){
'use strict';

const epochZero = {
  $date: {
    $numberLong: 0,
  },
};

/**
 * @param   {number} millis The number of milliseconds in the time delta
 * @returns {string}
 */
function timeDeltaToString(millis) {
  if (typeof millis !== 'number') {
    throw new TypeError('millis should be a number');
  }
  const timePieces = [];
  const prefix = millis < 0 ? '-' : '';
  let seconds = Math.abs(millis / 1000);

  // Seconds in a day
  if (seconds >= 86400) {
    timePieces.push(`${Math.floor(seconds / 86400)}d`);
    seconds = Math.floor(seconds) % 86400;
  }
  // Seconds in an hour
  if (seconds >= 3600) {
    timePieces.push(`${Math.floor(seconds / 3600)}h`);
    seconds = Math.floor(seconds) % 3600;
  }
  if (seconds >= 60) {
    timePieces.push(`${Math.floor(seconds / 60)}m`);
    seconds = Math.floor(seconds) % 60;
  }

  /* istanbul ignore else */
  if (seconds >= 0) {
    timePieces.push(`${Math.floor(seconds)}s`);
  }
  return `${prefix}${timePieces.join(' ')}`;
}

/**
 * Returns the number of milliseconds between now and a given date
 * @param   {Date} d         The date from which the current time will be subtracted
 * @param   {function} [now] A function that returns the current UNIX time in milliseconds
 * @returns {number}
 */
function fromNow(d, now = Date.now) {
  return d.getTime() - now();
}

/**
 * Returns the number of milliseconds between a given date and now
 * @param   {Date} d         The date that the current time will be subtracted from
 * @param   {function} [now] A function that returns the current UNIX time in milliseconds
 * @returns {number}
 */
function toNow(d, now = Date.now) {
  return now() - d.getTime();
}

/**
 * Returns a new Date constructed from a worldState date object
 * @param {Object} d The worldState date object
 * @returns {Date}
 */
function parseDate(d) {
  const safeD = d || epochZero;
  const dt = safeD.$date || epochZero.$date;
  return new Date(safeD.$date ? Number(dt.$numberLong) : 1000 * d.sec);
}

/**
 * An object containing functions to format dates and times
 * @typedef {Object.<function>}           TimeDateFunctions
 * @property {function} timeDeltaToString - Converts a time difference to a string
 * @property {function} fromNow           - Returns the number of milliseconds between now and
 *                                          a given date
 * @property {function} toNow             - Returns the number of milliseconds between a given
 *                                          date and now
 */
module.exports = {
  timeDeltaToString,
  fromNow,
  toNow,
  parseDate,
};

},{}],249:[function(require,module,exports){
'use strict';

const data = require('warframe-worldstate-data');

function toTitleCase(str) {
  return str.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());
}

function splitResourceName(str) {
  return str
    .split(/([A-Z]?[^A-Z]*)/g)
    .filter((item) => item)
    .join(' ');
}

const i18n = (locale = 'en') => data[locale] || data;

function faction(key, dataOverride) {
  if (key in i18n(dataOverride).factions) {
    return i18n(dataOverride).factions[key].value;
  }
  return key;
}

function node(key, dataOverride) {
  if (key in i18n(dataOverride).solNodes) {
    return i18n(dataOverride).solNodes[key].value;
  }
  if (key) {
    return key.split('/').slice(-1)[0];
  }
  return key;
}

function nodeMissionType(key, dataOverride) {
  if (key in i18n(dataOverride).solNodes) {
    return i18n(dataOverride).solNodes[key].type;
  }
  if (key) {
    return key.split('/').slice(-1)[0];
  }
  return key;
}

function nodeEnemy(key, dataOverride) {
  if (key in i18n(dataOverride).solNodes) {
    return i18n(dataOverride).solNodes[key].enemy;
  }
  if (key) {
    return key.split('/').slice(-1)[0];
  }
  return key;
}

function languageString(key, dataOverride) {
  const lowerKey = String(key).toLowerCase();
  if (lowerKey in i18n(dataOverride).languages) {
    return i18n(dataOverride).languages[lowerKey].value;
  }
  if (key in i18n(dataOverride).languages) {
    return i18n(dataOverride).languages[key].value;
  }
  if (key) {
    return toTitleCase(splitResourceName(String(key).split('/').slice(-1)[0]));
  }
  return key;
}

function languageDesc(key, dataOverride) {
  const lowerKey = String(key).toLowerCase();
  if (lowerKey in i18n(dataOverride).languages) {
    return i18n(dataOverride).languages[lowerKey].desc;
  }
  if (key in i18n(dataOverride).languages) {
    return i18n(dataOverride).languages[key].desc;
  }
  if (key) {
    return `[PH] ${toTitleCase(splitResourceName(String(key).split('/').slice(-1)[0]))} Desc`;
  }
  return key;
}

function missionType(key, dataOverride) {
  if (key in i18n(dataOverride).missionTypes) {
    return i18n(dataOverride).missionTypes[key].value;
  }
  if (key) {
    return toTitleCase(key.replace(/^MT_/, ''));
  }
  return key;
}

function conclaveMode(key, dataOverride) {
  if (key in i18n(dataOverride).conclave.modes) {
    return i18n(dataOverride).conclave.modes[key].value;
  }
  return key;
}

function conclaveCategory(key, dataOverride) {
  if (key in i18n(dataOverride).conclave.categories) {
    return i18n(dataOverride).conclave.categories[key].value;
  }
  return key;
}

function fissureModifier(key, dataOverride) {
  if (key in i18n(dataOverride).fissureModifiers) {
    return i18n(dataOverride).fissureModifiers[key].value;
  }
  return key;
}

function fissureTier(key, dataOverride) {
  if (key in i18n(dataOverride).fissureModifiers) {
    return i18n(dataOverride).fissureModifiers[key].num;
  }
  return key;
}

function syndicate(key, dataOverride) {
  if (key in i18n(dataOverride).syndicates) {
    return i18n(dataOverride).syndicates[key].name;
  }
  return key;
}

function upgrade(key, dataOverride) {
  if (key in i18n(dataOverride).upgradeTypes) {
    return i18n(dataOverride).upgradeTypes[key].value;
  }
  return key;
}

function operation(key, dataOverride) {
  if (key in i18n(dataOverride).operationTypes) {
    return i18n(dataOverride).operationTypes[key].value;
  }
  return key;
}

function operationSymbol(key, dataOverride) {
  if (key in i18n(dataOverride).operationTypes) {
    return i18n(dataOverride).operationTypes[key].symbol;
  }
  return key;
}

function sortieBoss(key, dataOverride) {
  if (key in i18n(dataOverride).sortie.bosses) {
    return i18n(dataOverride).sortie.bosses[key].name;
  }
  return key;
}

function sortieFaction(key, dataOverride) {
  if (key in i18n(dataOverride).sortie.bosses) {
    return i18n(dataOverride).sortie.bosses[key].faction;
  }
  return key;
}

function sortieModifier(key, dataOverride) {
  if (key in i18n(dataOverride).sortie.modifierTypes) {
    return i18n(dataOverride).sortie.modifierTypes[key];
  }
  return key;
}

function sortieModDesc(key, dataOverride) {
  if (i18n(dataOverride).sortie.modifierDescriptions && key in i18n(dataOverride).sortie.modifierDescriptions) {
    return i18n(dataOverride).sortie.modifierDescriptions[key];
  }
  return key;
}

function region(key, dataOverride) {
  if (key && i18n(dataOverride).persistentEnemy.regions[key]) {
    return i18n(dataOverride).persistentEnemy.regions[key];
  }
  return key;
}

function conclaveChallenge(key, dataOverride) {
  const splitKey = String(key).split('/').slice(-1)[0];

  if (
    i18n(dataOverride).conclave &&
    i18n(dataOverride).conclave.challenges &&
    i18n(dataOverride).conclave.challenges[splitKey]
  ) {
    return i18n(dataOverride).conclave.challenges[splitKey];
  }
  return {
    title: toTitleCase(splitResourceName(splitKey)),
    description: toTitleCase(splitResourceName(splitKey)),
    standing: 0,
  };
}

function steelPath(dataOverride) {
  return (i18n(dataOverride) || /* istanbul ignore next */ data).steelPath;
}

/**
 * An object containing functions to convert in-game names to their localizations
 * @typedef {Record<string, function>} Translator
 * @property {function} faction          - Converts faction names
 * @property {function} node             - Converts star map node names
 * @property {function} nodeMissionType  - Returns the mission type of given node
 * @property {function} nodeEnemy        - Returns the faction that controls a given node
 * @property {function} languageString   - Converts generic language strings
 * @property {function} languageDesc     - Converts generic language strings
 *                                          and retrieves the description
 * @property {function} missionType      - Converts mission types
 * @property {function} conclaveMode     - Converts conclave modes
 * @property {function} conclaveCategory - Converts conclave challenge categories
 * @property {function} fissureModifier  - Converts fissure mission modifiers
 * @property {function} syndicate        - Converts syndicate names
 * @property {function} upgrade          - Converts upgrade types
 * @property {function} operation        - Converts operation types
 * @property {function} sortieBoss       - Converts sortie boss names
 * @property {function} sortieModifier    - Converts sortie modifier types
 * @property {function} sortieModDesc    - Converts sortie modifier type descriptions
 * @property {function} region           - Converts persistent enemy region indicies
 * @property {function} conclaveChallenge - Convert conclave identifiers into standing data
 * @property {function} steelPath        -  Retrieve Steel Path rotation data for locale
 * @property {function} toTitleCase      - Format provided string as titlecase
 */
module.exports = {
  faction,
  node,
  nodeMissionType,
  nodeEnemy,
  languageString,
  languageDesc,
  missionType,
  conclaveMode,
  conclaveCategory,
  fissureModifier,
  fissureTier,
  syndicate,
  upgrade,
  operation,
  operationSymbol,
  sortieBoss,
  sortieModifier,
  sortieModDesc,
  sortieFaction,
  region,
  conclaveChallenge,
  steelPath,
  toTitleCase,
};

},{"warframe-worldstate-data":204}],250:[function(require,module,exports){
'use strict';

module.exports = require('./lib/WorldState');

},{"./lib/WorldState":206}],251:[function(require,module,exports){
const WorldState = require("warframe-worldstate-parser");
const webReq = new XMLHttpRequest();
var pageState = {ready:false};
var warState;

function readyPage(e){
	console.log(webReq)
	if(webReq.status == 200){
		warState= new WorldState(webReq.responseText);
		console.log(ws.alerts[0].toString());
		pageState.ready = true;
	}
}

webReq.onreadystatechange = readyPage;
const warframeStateUrl = "https://content.warframe.com/dynamic/worldState.php";
webReq.open("GET", warframeStateUrl);
webReq.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
webReq.setRequestHeader('Access-Control-Allow-Origin', '*');
webReq.send();
fetch("https://content.warframe.com/dynamic/worldState.php", {method: "get", headers: {"X-Requested-With": "XMLHttpRequest", "Access-Control-Allow-Origin": "*"}, mode:"cors"}).then(data => console.log(data));
},{"warframe-worldstate-parser":250}]},{},[251]);
